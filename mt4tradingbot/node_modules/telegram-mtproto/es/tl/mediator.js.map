{"version":3,"sources":["../../src/tl/mediator.js"],"names":["TypeWriter","TypeBuffer","longToInts","stringToChars","lshift32","bytesToHex","Logger","log","WriteMediator","int","ctx","i","field","writeInt","bool","longP","iHigh","iLow","writePair","long","sLong","Array","isArray","length","intBytes","str","toString","int1","int2","double","f","buffer","ArrayBuffer","intView","Int32Array","doubleView","Float64Array","bytes","list","binaryDataGuard","checkLength","next","set","addPadding","bits","Error","ReadMediator","result","nextInt","res","string","sUTF8","map","getChar","join","s","decodeURIComponent","escape","e","len","nextByte","Uint8Array","byteLength","unescape","encodeURIComponent","undefined","String","fromCharCode"],"mappings":"AAEA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,eAAvC;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,QAApC,EAA8CC,UAA9C,QAAgE,QAAhE;;AAEA,OAAOC,MAAP,MAAmB,aAAnB;AACA,IAAMC,MAAMD,MAAO,aAAnB;;AAIA,OAAO,IAAME,gBAAgB;AAC3BC,MAAIC,GAAJ,EAAqBC,CAArB,EAAgCC,QAAgB,EAAhD,EAAoD;AAClDF,QAAIG,QAAJ,CAAaF,CAAb,EAAiB,GAAGC,KAAO,MAA3B;AACD,GAH0B;AAI3BE,OAAKJ,GAAL,EAAsBC,CAAtB,EAAkCC,QAAgB,EAAlD,EAAsD;AACpD,QAAID,CAAJ,EAAO;AACLD,UAAIG,QAAJ,CAAa,UAAb,EAA0B,GAAGD,KAAO,OAApC;AACD,KAFD,MAEO;AACLF,UAAIG,QAAJ,CAAa,UAAb,EAA0B,GAAGD,KAAO,OAApC;AACD;AACF,GAV0B;AAW3BG,QAAML,GAAN,EACMM,KADN,EAEMC,IAFN,EAGML,KAHN,EAGqB;AACnBF,QAAIQ,SAAJ,CAAcD,IAAd,EAAoBD,KAApB,EACe,GAAGJ,KAAO,YADzB,EAEe,GAAGA,KAAO,aAFzB;AAGD,GAlB0B;AAmB3BO,OAAKT,GAAL,EACKU,KADL,EAEKR,QAAgB,EAFrB,EAEyB;AACvB,QAAIS,MAAMC,OAAN,CAAcF,KAAd,CAAJ,EACE,OAAOA,MAAMG,MAAN,KAAiB,CAAjB,GACH,KAAKR,KAAL,CAAWL,GAAX,EAAgBU,MAAM,CAAN,CAAhB,EAA0BA,MAAM,CAAN,CAA1B,EAAoCR,KAApC,CADG,GAEH,KAAKY,QAAL,CAAcd,GAAd,EAAmBU,KAAnB,EAA0B,EAA1B,EAA8BR,KAA9B,CAFJ;AAGF,QAAIa,YAAJ;AACA,QAAI,OAAOL,KAAP,KAAiB,QAArB,EACEK,MAAML,QACFA,MAAMM,QAAN,EADE,GAEF,GAFJ,CADF,KAIKD,MAAML,KAAN;AACL,QAAM,CAACO,IAAD,EAAOC,IAAP,IAAe1B,WAAWuB,GAAX,CAArB;AACAf,QAAIQ,SAAJ,CAAcU,IAAd,EAAoBD,IAApB,EACe,GAAGf,KAAO,YADzB,EAEe,GAAGA,KAAO,aAFzB;AAGD,GApC0B;AAqC3BiB,SAAOnB,GAAP,EAAwBoB,CAAxB,EAAmClB,QAAgB,EAAnD,EAAuD;AACrD,QAAMmB,SAAS,IAAIC,WAAJ,CAAgB,CAAhB,CAAf;AACA,QAAMC,UAAU,IAAIC,UAAJ,CAAeH,MAAf,CAAhB;AACA,QAAMI,aAAa,IAAIC,YAAJ,CAAiBL,MAAjB,CAAnB;;AAEAI,eAAW,CAAX,IAAgBL,CAAhB;;AAEA,QAAM,CAACH,IAAD,EAAOC,IAAP,IAAeK,OAArB;AACAvB,QAAIQ,SAAJ,CAAcU,IAAd,EAAoBD,IAApB,EACe,GAAGf,KAAO,cADzB,EAEe,GAAGA,KAAO,eAFzB;AAGD,GAhD0B;AAiD3ByB,QAAM3B,GAAN,EACM2B,KADN,EAEMzB,QAAgB,EAFtB,EAE0B;AACxB,QAAM,EAAE0B,IAAF,EAAQf,MAAR,KAAmBgB,gBAAgBF,KAAhB,CAAzB;AACA;;AAEA3B,QAAI8B,WAAJ,CAAgBjB,SAAS,CAAzB;AACA,QAAIA,UAAU,GAAd,EAAmB;AACjBb,UAAI+B,IAAJ,CAASlB,MAAT;AACD,KAFD,MAEO;AACLb,UAAI+B,IAAJ,CAAS,GAAT;AACA/B,UAAI+B,IAAJ,CAASlB,SAAS,IAAlB;AACAb,UAAI+B,IAAJ,CAAS,CAAClB,SAAS,MAAV,KAAqB,CAA9B;AACAb,UAAI+B,IAAJ,CAAS,CAAClB,SAAS,QAAV,KAAuB,EAAhC;AACD;;AAEDb,QAAIgC,GAAJ,CAAQJ,IAAR,EAAcf,MAAd;AACAb,QAAIiC,UAAJ;AACD,GAnE0B;AAoE3BnB,WAASd,GAAT,EACS2B,KADT,EAESO,IAFT,EAGShC,QAAgB,EAHzB,EAG6B;AAC3B,QAAM,EAAE0B,IAAF,EAAQf,MAAR,KAAmBgB,gBAAgBF,KAAhB,CAAzB;;AAEA,QAAIO,IAAJ,EAAU;AACR,UAAIA,OAAO,EAAP,IAAarB,SAAS,CAAT,IAAcqB,IAA/B,EAAqC;AACnC,cAAM,IAAIC,KAAJ,CAAW,iBAAkBD,IAAO,KAAIrB,MAAO,EAA/C,CAAN;AACD;AACF;AACD;AACAb,QAAI8B,WAAJ,CAAgBjB,MAAhB;AACAb,QAAIgC,GAAJ,CAAQJ,IAAR,EAAcf,MAAd;AACD;AAlF0B,CAAtB;;AAqFP,OAAO,IAAMuB,eAAe;AAC1BrC,MAAIC,GAAJ,EAAqBE,KAArB,EAAoC;AAClC,QAAMmC,SAASrC,IAAIsC,OAAJ,EAAf;AACAzC,QAAI,WAAJ,EAAiBK,KAAjB,EAAwBmC,MAAxB;AACA,WAAOA,MAAP;AACD,GALyB;AAM1B5B,OAAKT,GAAL,EAAsBE,KAAtB,EAAqC;AACnC,QAAMK,OAAO,KAAKR,GAAL,CAASC,GAAT,EAAe,GAAGE,KAAO,YAAzB,CAAb;AACA,QAAMI,QAAQ,KAAKP,GAAL,CAASC,GAAT,EAAe,GAAGE,KAAO,aAAzB,CAAd;;AAEA,QAAMqC,MAAM7C,SAASY,KAAT,EAAgBC,IAAhB,CAAZ;AACA,WAAOgC,GAAP;AACD,GAZyB;AAa1BpB,SAAOnB,GAAP,EAAwBE,KAAxB,EAAuC;AACrC,QAAMmB,SAAS,IAAIC,WAAJ,CAAgB,CAAhB,CAAf;AACA,QAAMC,UAAU,IAAIC,UAAJ,CAAeH,MAAf,CAAhB;AACA,QAAMI,aAAa,IAAIC,YAAJ,CAAiBL,MAAjB,CAAnB;;AAEAE,YAAQ,CAAR,IAAa,KAAKxB,GAAL,CAASC,GAAT,EAAe,GAAGE,KAAO,cAAzB,CAAb;AACAqB,YAAQ,CAAR,IAAa,KAAKxB,GAAL,CAASC,GAAT,EAAe,GAAGE,KAAO,eAAzB,CAAb;;AAEA,WAAOuB,WAAW,CAAX,CAAP;AACD,GAtByB;AAuB1Be,SAAOxC,GAAP,EAAwBE,KAAxB,EAAuC;AACrC,QAAMyB,QAAQ,KAAKA,KAAL,CAAW3B,GAAX,EAAiB,GAAEE,KAAM,SAAzB,CAAd;AACA,QAAMuC,QAAQ,CAAC,GAAGd,KAAJ,EACXe,GADW,CACPC,OADO,EAEXC,IAFW,CAEN,EAFM,CAAd;;AAIA,QAAIC,UAAJ;AACA,QAAI;AACFA,UAAIC,mBAAmBC,OAAON,KAAP,CAAnB,CAAJ;AACD,KAFD,CAEE,OAAOO,CAAP,EAAU;AACVH,UAAIJ,KAAJ;AACD;;AAED5C,QAAK,cAAL,EAAoBgD,CAApB,EAAwB,GAAE3C,KAAM,SAAhC;;AAEA,WAAO2C,CAAP;AACD,GAvCyB;AAwC1BlB,QAAM3B,GAAN,EAAuBE,KAAvB,EAAsC;AACpC,QAAI+C,MAAMjD,IAAIkD,QAAJ,EAAV;;AAEA,QAAID,OAAO,GAAX,EAAgB;AACdA,YAAMjD,IAAIkD,QAAJ,KACFlD,IAAIkD,QAAJ,MAAkB,CADhB,GAEFlD,IAAIkD,QAAJ,MAAkB,EAFtB;AAGD;;AAED,QAAMvB,QAAQ3B,IAAI+B,IAAJ,CAASkB,GAAT,CAAd;AACAjD,QAAIiC,UAAJ;;AAEApC,QAAK,aAAL,EAAmBF,WAAWgC,KAAX,CAAnB,EAAuC,GAAGzB,KAAO,QAAjD;;AAEA,WAAOyB,KAAP;AACD;AAvDyB,CAArB;;AA0DP,IAAME,kBAAmBF,KAAD,IAA0D;AAChF,MAAIC,aAAJ;AAAA,MAAUf,eAAV;AACA,MAAIc,iBAAiBL,WAArB,EAAkC;AAChCM,WAAO,IAAIuB,UAAJ,CAAexB,KAAf,CAAP;AACAd,aAASc,MAAMyB,UAAf;AACD,GAHD,MAGO,IAAI,OAAOzB,KAAP,KAAiB,QAArB,EAA+B;AACpCC,WACEnC,cACE4D,SACEC,mBACE3B,KADF,CADF,CADF,CADF;AAKAd,aAASe,KAAKf,MAAd;AACD,GAPM,MAOA,IAAIc,UAAU4B,SAAd,EAAyB;AAC9B3B,WAAO,EAAP;AACAf,aAAS,CAAT;AACD,GAHM,MAGA;AACLe,WAAOD,KAAP;AACAd,aAASc,MAAMd,MAAf;AACD;AACD,SAAO;AACLe,QADK;AAELf;AAFK,GAAP;AAID,CAvBD;;AAyBA,IAAM8B,UAAWK,CAAD,IAAeQ,OAAOC,YAAP,CAAoBT,CAApB,CAA/B","file":"mediator.js","sourcesContent":["//@flow\r\n\r\nimport { TypeWriter, TypeBuffer } from './type-buffer'\r\nimport { longToInts, stringToChars, lshift32, bytesToHex } from '../bin'\r\n\r\nimport Logger from '../util/log'\r\nconst log = Logger`tl:mediator`\r\n\r\nimport type { BinaryData } from './index.h'\r\n\r\nexport const WriteMediator = {\r\n  int(ctx: TypeWriter, i: number, field: string = '') {\r\n    ctx.writeInt(i, `${ field }:int`)\r\n  },\r\n  bool(ctx: TypeWriter, i: boolean, field: string = '') {\r\n    if (i) {\r\n      ctx.writeInt(0x997275b5, `${ field }:bool`)\r\n    } else {\r\n      ctx.writeInt(0xbc799737, `${ field }:bool`)\r\n    }\r\n  },\r\n  longP(ctx: TypeWriter,\r\n        iHigh: number,\r\n        iLow: number,\r\n        field: string) {\r\n    ctx.writePair(iLow, iHigh,\r\n                  `${ field }:long[low]`,\r\n                  `${ field }:long[high]`)\r\n  },\r\n  long(ctx: TypeWriter,\r\n       sLong?: number[] | string | number,\r\n       field: string = '') {\r\n    if (Array.isArray(sLong))\r\n      return sLong.length === 2\r\n        ? this.longP(ctx, sLong[0], sLong[1], field)\r\n        : this.intBytes(ctx, sLong, 64, field)\r\n    let str\r\n    if (typeof sLong !== 'string')\r\n      str = sLong\r\n        ? sLong.toString()\r\n        : '0'\r\n    else str = sLong\r\n    const [int1, int2] = longToInts(str)\r\n    ctx.writePair(int2, int1,\r\n                  `${ field }:long[low]`,\r\n                  `${ field }:long[high]`)\r\n  },\r\n  double(ctx: TypeWriter, f: number, field: string = '') {\r\n    const buffer = new ArrayBuffer(8)\r\n    const intView = new Int32Array(buffer)\r\n    const doubleView = new Float64Array(buffer)\r\n\r\n    doubleView[0] = f\r\n\r\n    const [int1, int2] = intView\r\n    ctx.writePair(int2, int1,\r\n                  `${ field }:double[low]`,\r\n                  `${ field }:double[high]`)\r\n  },\r\n  bytes(ctx: TypeWriter,\r\n        bytes?: number[] | ArrayBuffer | string,\r\n        field: string = '') {\r\n    const { list, length } = binaryDataGuard(bytes)\r\n    // this.debug && console.log('>>>', bytesToHex(bytes), `${ field }:bytes`)\r\n\r\n    ctx.checkLength(length + 8)\r\n    if (length <= 253) {\r\n      ctx.next(length)\r\n    } else {\r\n      ctx.next(254)\r\n      ctx.next(length & 0xFF)\r\n      ctx.next((length & 0xFF00) >> 8)\r\n      ctx.next((length & 0xFF0000) >> 16)\r\n    }\r\n\r\n    ctx.set(list, length)\r\n    ctx.addPadding()\r\n  },\r\n  intBytes(ctx: TypeWriter,\r\n           bytes: BinaryData  | ArrayBuffer | string,\r\n           bits: number | false,\r\n           field: string = '') {\r\n    const { list, length } = binaryDataGuard(bytes)\r\n\r\n    if (bits) {\r\n      if (bits % 32 || length * 8 != bits) {\r\n        throw new Error(`Invalid bits: ${  bits  }, ${length}`)\r\n      }\r\n    }\r\n    // this.debug && console.log('>>>', bytesToHex(bytes), `${ field }:int${  bits}`)\r\n    ctx.checkLength(length)\r\n    ctx.set(list, length)\r\n  }\r\n}\r\n\r\nexport const ReadMediator = {\r\n  int(ctx: TypeBuffer, field: string) {\r\n    const result = ctx.nextInt()\r\n    log('read, int')(field, result)\r\n    return result\r\n  },\r\n  long(ctx: TypeBuffer, field: string ){\r\n    const iLow = this.int(ctx, `${ field }:long[low]`)\r\n    const iHigh = this.int(ctx, `${ field }:long[high]`)\r\n\r\n    const res = lshift32(iHigh, iLow)\r\n    return res\r\n  },\r\n  double(ctx: TypeBuffer, field: string) {\r\n    const buffer = new ArrayBuffer(8)\r\n    const intView = new Int32Array(buffer)\r\n    const doubleView = new Float64Array(buffer)\r\n\r\n    intView[0] = this.int(ctx, `${ field }:double[low]`)\r\n    intView[1] = this.int(ctx, `${ field }:double[high]`)\r\n\r\n    return doubleView[0]\r\n  },\r\n  string(ctx: TypeBuffer, field: string) {\r\n    const bytes = this.bytes(ctx, `${field}:string`)\r\n    const sUTF8 = [...bytes]\r\n      .map(getChar)\r\n      .join('')\r\n\r\n    let s\r\n    try {\r\n      s = decodeURIComponent(escape(sUTF8))\r\n    } catch (e) {\r\n      s = sUTF8\r\n    }\r\n\r\n    log(`read, string`)(s, `${field}:string`)\r\n\r\n    return s\r\n  },\r\n  bytes(ctx: TypeBuffer, field: string) {\r\n    let len = ctx.nextByte()\r\n\r\n    if (len == 254) {\r\n      len = ctx.nextByte() |\r\n          ctx.nextByte() << 8 |\r\n          ctx.nextByte() << 16\r\n    }\r\n\r\n    const bytes = ctx.next(len)\r\n    ctx.addPadding()\r\n\r\n    log(`read, bytes`)(bytesToHex(bytes), `${ field }:bytes`)\r\n\r\n    return bytes\r\n  }\r\n}\r\n\r\nconst binaryDataGuard = (bytes?: number[] | ArrayBuffer | Uint8Array | string) => {\r\n  let list, length\r\n  if (bytes instanceof ArrayBuffer) {\r\n    list = new Uint8Array(bytes)\r\n    length = bytes.byteLength\r\n  } else if (typeof bytes === 'string') {\r\n    list =\r\n      stringToChars(\r\n        unescape(\r\n          encodeURIComponent(\r\n            bytes)))\r\n    length = list.length\r\n  } else if (bytes === undefined) {\r\n    list = []\r\n    length = 0\r\n  } else {\r\n    list = bytes\r\n    length = bytes.length\r\n  }\r\n  return {\r\n    list,\r\n    length\r\n  }\r\n}\r\n\r\nconst getChar = (e: number) => String.fromCharCode(e)\r\n"]}