{"version":3,"sources":["../../src/tl/index.js"],"names":["is","has","uintToInt","intToUint","bytesToHex","gzipUncompress","bytesToArrayBuffer","longToInts","lshift32","stringToChars","WriteMediator","ReadMediator","Layout","getFlags","isSimpleType","getTypeProps","TypeBuffer","TypeWriter","getNakedType","getString","getTypeConstruct","Logger","debug","PACKED","apiLayer","mtLayer","Serialization","constructor","mtproto","startMaxLength","api","mtApi","writer","maxLength","reset","getBytes","typed","getBytesTyped","getBytesPlain","storeMethod","methodName","params","layer","pred","funcs","get","Error","int","id","hasFlags","flags","storeObject","param","paramName","name","typeClass","fieldObj","isFlag","typeDefaults","isVector","Array","isArray","TypeError","length","entries","i","elem","returns","obj","type","field","long","intBytes","bytes","double","bool","substr","itemType","toLowerCase","Object","schema","selectSchema","predicate","isBare","constructorData","charAt","constructors","tlConst","condType","fieldBit","indexOf","split","Deserialization","buffer","override","readInt","typeBuffer","fetchInt","fetchBool","offset","fetchObject","fetchIntBytes","bits","len","next","fetchRawBytes","byteView","byteLength","fetchPacked","compressed","uncompressed","newDeserializer","fetchVector","typeProps","constructorCmp","result","push","string","fallback","index","constructorsIndex","schemaFallback","finded","overrideKey","apply","value","getOffset","fetchEnd","isEnd","TL"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\r\n\r\nimport is from 'ramda/src/is'\r\nimport has from 'ramda/src/has'\r\n\r\nimport { uintToInt, intToUint, bytesToHex,\r\n  gzipUncompress, bytesToArrayBuffer, longToInts, lshift32, stringToChars } from '../bin'\r\n\r\nimport { WriteMediator, ReadMediator } from './mediator'\r\nimport Layout, { getFlags, isSimpleType, getTypeProps } from '../layout'\r\nimport { TypeBuffer, TypeWriter, getNakedType,\r\n  getString, getTypeConstruct } from './type-buffer'\r\nimport type { TLSchema, TLConstruct } from './index.h'\r\n\r\nimport Logger from '../util/log'\r\nconst debug = Logger`tl`\r\n\r\nconst PACKED = 0x3072cfa1\r\n\r\ntype SerialConstruct = {\r\n  mtproto: boolean,\r\n  startMaxLength: number\r\n}\r\n\r\nlet apiLayer: Layout\r\nlet mtLayer: Layout\r\n\r\nexport class Serialization {\r\n  writer: TypeWriter = new TypeWriter()\r\n  mtproto: boolean\r\n  api: TLSchema\r\n  mtApi: TLSchema\r\n  constructor({ mtproto, startMaxLength }: SerialConstruct, api: TLSchema, mtApi: TLSchema) {\r\n    this.api = api\r\n    this.mtApi = mtApi\r\n\r\n    this.writer.maxLength = startMaxLength\r\n\r\n    this.writer.reset()\r\n    this.mtproto = mtproto\r\n    if (!apiLayer)\r\n      apiLayer = new Layout(api)\r\n    if (!mtLayer)\r\n      mtLayer = new Layout(mtApi)\r\n  }\r\n\r\n  getBytes(typed?: boolean) {\r\n    if (typed)\r\n      return this.writer.getBytesTyped()\r\n    else\r\n      return this.writer.getBytesPlain()\r\n  }\r\n\r\n  storeMethod(methodName: string, params) {\r\n    const layer = this.mtproto\r\n      ? mtLayer\r\n      : apiLayer\r\n    const pred = layer.funcs.get(methodName)\r\n    if (!pred) throw new Error(`No method name ${methodName} found`)\r\n\r\n    WriteMediator.int(this.writer,\r\n                      intToUint(`${pred.id}`),\r\n                      `${methodName}[id]`)\r\n    if (pred.hasFlags) {\r\n      const flags = getFlags(pred)(params)\r\n      this.storeObject(flags, '#', `f ${methodName} #flags ${flags}`)\r\n    }\r\n    for (const param of pred.params) {\r\n      const paramName = param.name\r\n      const typeClass = param.typeClass\r\n      let fieldObj\r\n      if (!has(paramName, params)) {\r\n        if (param.isFlag) continue\r\n        else if (layer.typeDefaults.has(typeClass))\r\n          fieldObj = layer.typeDefaults.get(typeClass)\r\n        else if (isSimpleType(typeClass)) {\r\n          switch (typeClass) {\r\n            case 'int': fieldObj = 0; break\r\n            // case 'long': fieldObj = 0; break\r\n            case 'string': fieldObj = ' '; break\r\n            // case 'double': fieldObj = 0; break\r\n            case 'true': fieldObj = true; break\r\n            // case 'bytes': fieldObj = [0]; break\r\n          }\r\n        }\r\n        else throw new Error(`Method ${methodName} did not receive required argument ${paramName}`)\r\n      } else {\r\n        fieldObj = params[paramName]\r\n      }\r\n      if (param.isVector) {\r\n        if (!Array.isArray(fieldObj))\r\n          throw new TypeError(`Vector argument ${paramName} in ${methodName} required Array,`  +\r\n          //$FlowIssue\r\n          ` got ${fieldObj} ${typeof fieldObj}`)\r\n        WriteMediator.int(this.writer, 0x1cb5c415, `${paramName}[id]`)\r\n        WriteMediator.int(this.writer, fieldObj.length, `${paramName}[count]`)\r\n        for (const [ i, elem ] of fieldObj.entries())\r\n          this.storeObject(elem, param.typeClass, `${paramName}[${i}]`)\r\n      } else\r\n        this.storeObject(fieldObj, param.typeClass, `f ${methodName}(${paramName})`)\r\n    }\r\n    /*let condType\r\n    let fieldBit\r\n    for (const param of methodData.params) {\r\n      let type = param.type\r\n      if (type.indexOf('?') !== -1) {\r\n        condType = type.split('?')\r\n        fieldBit = condType[0].split('.')\r\n        if (!(params[fieldBit[0]] & 1 << fieldBit[1])) {\r\n          continue\r\n        }\r\n        type = condType[1]\r\n      }\r\n      const paramName = param.name\r\n      const stored = params[paramName]\r\n      if (!stored)\r\n        stored = this.emptyOfType(type, schema)\r\n      if (!stored)\r\n        throw new Error(`Method ${methodName}.`+\r\n          ` No value of field ${ param.name } recieved and no Empty of type ${ param.type }`)\r\n      this.storeObject(stored, type, `f ${methodName}(${paramName})`)\r\n    }*/\r\n\r\n    return pred.returns\r\n  }\r\n  /*emptyOfType(ofType, schema: TLSchema) {\r\n    const resultConstruct = schema.constructors.find(\r\n      ({ type, predicate }: TLConstruct) =>\r\n        type === ofType &&\r\n        predicate.indexOf('Empty') !== -1)\r\n    return resultConstruct\r\n      ? { _: resultConstruct.predicate }\r\n      : null\r\n  }*/\r\n  storeObject(obj, type: string, field: string) {\r\n    switch (type) {\r\n      case '#':\r\n      case 'int':\r\n        return WriteMediator.int(this.writer, obj, field)\r\n      case 'long':\r\n        return WriteMediator.long(this.writer, obj, field)\r\n      case 'int128':\r\n        return WriteMediator.intBytes(this.writer, obj, 128, field)\r\n      case 'int256':\r\n        return WriteMediator.intBytes(this.writer, obj, 256, field)\r\n      case 'int512':\r\n        return WriteMediator.intBytes(this.writer, obj, 512, field)\r\n      case 'string':\r\n        return WriteMediator.bytes(this.writer, obj, `${field}:string`)\r\n      case 'bytes':\r\n        return WriteMediator.bytes(this.writer, obj, field)\r\n      case 'double':\r\n        return WriteMediator.double(this.writer, obj, field)\r\n      case 'Bool':\r\n        return WriteMediator.bool(this.writer, obj, field)\r\n      case 'true':\r\n        return\r\n    }\r\n\r\n    if (Array.isArray(obj)) {\r\n      if (type.substr(0, 6) == 'Vector')\r\n        WriteMediator.int(this.writer, 0x1cb5c415, `${field}[id]`)\r\n      else if (type.substr(0, 6) != 'vector') {\r\n        throw new Error(`Invalid vector type ${  type}`)\r\n      }\r\n      const itemType = type.substr(7, type.length - 8) // for \"Vector<itemType>\"\r\n      WriteMediator.int(this.writer, obj.length, `${field}[count]`)\r\n      for (let i = 0; i < obj.length; i++) {\r\n        this.storeObject(obj[i], itemType, `${field  }[${  i  }]`)\r\n      }\r\n      return true\r\n    }\r\n    else if (type.substr(0, 6).toLowerCase() == 'vector') {\r\n      throw new Error('Invalid vector object')\r\n    }\r\n\r\n    if (!is(Object, obj))\r\n      throw new Error(`Invalid object for type ${  type}`)\r\n\r\n    const schema = selectSchema(this.mtproto, this.api, this.mtApi)\r\n\r\n    const predicate = obj['_']\r\n    let isBare = false\r\n    let constructorData = false\r\n    isBare = type.charAt(0) == '%'\r\n    if (isBare)\r\n      type = type.substr(1)\r\n\r\n\r\n    for (const tlConst of schema.constructors) {\r\n      if (tlConst.predicate == predicate) {\r\n        constructorData = tlConst\r\n        break\r\n      }\r\n    }\r\n\r\n    if (!constructorData)\r\n      throw new Error(`No predicate ${predicate} found`)\r\n\r\n    if (predicate == type)\r\n      isBare = true\r\n\r\n    if (!isBare)\r\n      WriteMediator.int(this.writer,\r\n                        intToUint(constructorData.id),\r\n                        `${field}.${predicate}[id]`)\r\n\r\n    let condType\r\n    let fieldBit\r\n\r\n    for (const param of constructorData.params) {\r\n      type = param.type\r\n      if (type.indexOf('?') !== -1) {\r\n        condType = type.split('?')\r\n        fieldBit = condType[0].split('.')\r\n        if (!(obj[fieldBit[0]] & 1 << fieldBit[1])) {\r\n          continue\r\n        }\r\n        type = condType[1]\r\n      }\r\n\r\n      this.storeObject(obj[param.name], type, `${field}.${  predicate  }.${  param.name  }`)\r\n    }\r\n\r\n    return constructorData.type\r\n  }\r\n\r\n}\r\n\r\nexport class Deserialization {\r\n  typeBuffer: TypeBuffer\r\n  override: Object\r\n  mtproto: boolean\r\n  api: TLSchema\r\n  mtApi: TLSchema\r\n  constructor(buffer: Buffer, { mtproto, override }: DConfig, api: TLSchema, mtApi: TLSchema) {\r\n    this.api = api\r\n    this.mtApi = mtApi\r\n    this.override = override\r\n\r\n    this.typeBuffer = new TypeBuffer(buffer)\r\n    this.mtproto = mtproto\r\n  }\r\n\r\n  readInt = (field: string) => {\r\n    // log('int')(field, i.toString(16), i)\r\n    return ReadMediator.int(this.typeBuffer, field)\r\n  }\r\n\r\n  fetchInt(field: string = '') {\r\n    return this.readInt(`${ field }:int`)\r\n  }\r\n\r\n  fetchBool(field: string = '') {\r\n    const i = this.readInt(`${ field }:bool`)\r\n    switch (i) {\r\n      case 0x997275b5: return true\r\n      case 0xbc799737: return false\r\n      default: {\r\n        this.typeBuffer.offset -= 4\r\n        return this.fetchObject('Object', field)\r\n      }\r\n    }\r\n  }\r\n  fetchIntBytes(bits: number, field: string = '') {\r\n    if (bits % 32)\r\n      throw new Error(`Invalid bits: ${bits}`)\r\n\r\n    const len = bits / 8\r\n\r\n    const bytes = this.typeBuffer.next(len)\r\n\r\n    debug(`int bytes`)(bytesToHex(bytes), `${ field }:int${  bits}`)\r\n\r\n    return bytes\r\n  }\r\n\r\n  fetchRawBytes(len: number | false, field: string = '') {\r\n    if (len === false) {\r\n      len = this.readInt(`${ field }_length`)\r\n      if (len > this.typeBuffer.byteView.byteLength)\r\n        throw new Error(`Invalid raw bytes length: ${  len  }, buffer len: ${this.typeBuffer.byteView.byteLength}`)\r\n    }\r\n    const bytes = this.typeBuffer.next(len)\r\n    debug(`raw bytes`)(bytesToHex(bytes), field)\r\n\r\n    return bytes\r\n  }\r\n\r\n  fetchPacked(type, field: string = '') {\r\n    const compressed = ReadMediator.bytes( this.typeBuffer, `${field}[packed_string]`)\r\n    const uncompressed = gzipUncompress(compressed)\r\n    const buffer = bytesToArrayBuffer(uncompressed)\r\n    const newDeserializer = new Deserialization(\r\n      buffer, {\r\n        mtproto : this.mtproto,\r\n        override: this.override\r\n      },\r\n      this.api, this.mtApi)\r\n\r\n    return newDeserializer.fetchObject(type, field)\r\n  }\r\n\r\n  fetchVector(type: string, field: string = '') {\r\n    const typeProps = getTypeProps(type)\r\n    if (type.charAt(0) === 'V') {\r\n      const constructor = this.readInt(`${field}[id]`)\r\n      const constructorCmp = uintToInt(constructor)\r\n\r\n      if (constructorCmp === PACKED)\r\n        return this.fetchPacked(type, field)\r\n      if (constructorCmp !== 0x1cb5c415)\r\n        throw new Error(`Invalid vector constructor ${constructor}`)\r\n    }\r\n    const len = this.readInt(`${field}[count]`)\r\n    const result = []\r\n    if (len > 0) {\r\n      const itemType = type.substr(7, type.length - 8) // for \"Vector<itemType>\"\r\n      for (let i = 0; i < len; i++)\r\n        result.push(this.fetchObject(itemType, `${field}[${i}]`))\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  fetchObject(type, field: string = '') {\r\n    switch (type) {\r\n      case '#':\r\n      case 'int':\r\n        return this.fetchInt(field)\r\n      case 'long':\r\n        return ReadMediator.long(this.typeBuffer, field)\r\n      case 'int128':\r\n        return this.fetchIntBytes(128, field)\r\n      case 'int256':\r\n        return this.fetchIntBytes(256, field)\r\n      case 'int512':\r\n        return this.fetchIntBytes(512, field)\r\n      case 'string':\r\n        return ReadMediator.string(this.typeBuffer, field)\r\n      case 'bytes':\r\n        return ReadMediator.bytes(this.typeBuffer, field)\r\n      case 'double':\r\n        return ReadMediator.double(this.typeBuffer, field)\r\n      case 'Bool':\r\n        return this.fetchBool(field)\r\n      case 'true':\r\n        return true\r\n    }\r\n    let fallback\r\n    field = field || type || 'Object'\r\n\r\n    // const layer = this.mtproto\r\n    //   ? mtLayer\r\n    //   : apiLayer\r\n    const typeProps = getTypeProps(type)\r\n    // layer.typesById\r\n\r\n    if (typeProps.isVector)\r\n      return this.fetchVector(type, field)\r\n\r\n    const schema = selectSchema(this.mtproto, this.api, this.mtApi)\r\n    let predicate = false\r\n    let constructorData = false\r\n\r\n    if (typeProps.isBare)\r\n      constructorData = getNakedType(type, schema)\r\n    else {\r\n      const constructor = this.readInt(`${field}[id]`)\r\n      const constructorCmp = uintToInt(constructor)\r\n\r\n      if (constructorCmp === PACKED)\r\n        return this.fetchPacked(type, field)\r\n\r\n      let index = schema.constructorsIndex\r\n      if (!index) {\r\n        schema.constructorsIndex = index = {}\r\n        for (let i = 0; i < schema.constructors.length; i++)\r\n          index[schema.constructors[i].id] = i\r\n      }\r\n      const i = index[constructorCmp]\r\n      if (i)\r\n        constructorData = schema.constructors[i]\r\n\r\n      fallback = false\r\n      if (!constructorData && this.mtproto) {\r\n        const schemaFallback = this.api\r\n        const finded = getTypeConstruct(constructorCmp, schemaFallback)\r\n        if (finded) {\r\n          constructorData = finded\r\n          delete this.mtproto\r\n          fallback = true\r\n        }\r\n      }\r\n      if (!constructorData) {\r\n        throw new Error(`Constructor not found: ${constructor} ${this.fetchInt()} ${this.fetchInt()}`)\r\n      }\r\n    }\r\n\r\n    predicate = constructorData.predicate\r\n\r\n    const result = { '_': predicate }\r\n    const overrideKey = (this.mtproto ? 'mt_' : '') + predicate\r\n\r\n    if (this.override[overrideKey]) {\r\n      this.override[overrideKey].apply(this, [result, `${field}[${predicate}]`])\r\n    } else {\r\n      for (const param of constructorData.params) {\r\n        type = param.type\r\n        // if (type === '#' && isNil(result.pFlags))\r\n        //   result.pFlags = {}\r\n        if (type.indexOf('?') !== -1) {\r\n          const condType = type.split('?')\r\n          const fieldBit = condType[0].split('.')\r\n          if (!(result[fieldBit[0]] & 1 << fieldBit[1]))\r\n            continue\r\n          type = condType[1]\r\n        }\r\n        const paramName = param.name\r\n        const value = this.fetchObject(type, `${field}[${predicate}][${paramName}]`)\r\n\r\n        result[paramName] = value\r\n      }\r\n    }\r\n\r\n    if (fallback)\r\n      this.mtproto = true\r\n\r\n    return result\r\n  }\r\n\r\n  getOffset() {\r\n    return this.typeBuffer.offset\r\n  }\r\n\r\n  fetchEnd() {\r\n    if (!this.typeBuffer.isEnd())\r\n      throw new Error('Fetch end with non-empty buffer')\r\n    return true\r\n  }\r\n\r\n}\r\n\r\nconst selectSchema = (mtproto: boolean, api: TLSchema, mtApi: TLSchema) => mtproto\r\n  ? mtApi\r\n  : api\r\n\r\ntype DConfig = {\r\n  mtproto: boolean,\r\n  override: Object\r\n}\r\n\r\nexport type DeserializationFabric = (\r\n  buffer: Buffer,\r\n  config?: {\r\n    mtproto?: boolean,\r\n    override?: Object\r\n  }) => Deserialization\r\n\r\nexport type SerializationFabric = (\r\n  config?: {\r\n    mtproto?: boolean,\r\n    startMaxLength?: number\r\n  }) => Serialization\r\n\r\nexport type TLFabric = {\r\n  Serialization: SerializationFabric,\r\n  Deserialization: DeserializationFabric\r\n}\r\n\r\nexport const TL = (api: TLSchema, mtApi: TLSchema) => ({\r\n  Serialization: ({ mtproto = false, startMaxLength = 2048 /* 2Kb */ } = {}) =>\r\n    new Serialization({ mtproto, startMaxLength }, api, mtApi),\r\n  Deserialization: (buffer: Buffer, { mtproto = false, override = {} }: DConfig = {}) =>\r\n    new Deserialization(buffer, { mtproto, override }, api, mtApi)\r\n})\r\n\r\nexport * from './mediator'\r\nexport { TypeWriter } from './type-buffer'\r\nexport default TL\r\n"]}