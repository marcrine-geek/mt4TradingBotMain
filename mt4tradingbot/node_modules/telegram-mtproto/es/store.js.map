{"version":3,"sources":["../src/store.js"],"names":["Promise","clone","ValueStore","val","get","set","newVal","ValueStoreMap","Map","key","TimeOffset","dcList","AsyncStorage","store","delete","e","remove","keys","map","clr","clear","resolve","noPrefix","PureStorage"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;;AAEA,OAAOC,KAAP,MAAkB,iBAAlB;;AAEA,OAAO,IAAMC,aAAa,MAAM;AAC9B,MAAIC,MAAM,IAAV;;AAEA,SAAO;AACLC,SAAK,MAAMH,MAAME,GAAN,CADN;AAELE,SAAKC,UAAUH,MAAMG;AAFhB,GAAP;AAID,CAPM;;AASP,OAAO,IAAMC,gBAAgB,MAAM;AACjC,MAAMJ,MAAM,IAAIK,GAAJ,EAAZ;;AAEA,SAAO;AACLJ,SAAKK,OAAOR,MAAME,IAAIC,GAAJ,CAAQK,GAAR,CAAN,CADP;AAELJ,SAAK,CAACI,GAAD,EAAMH,MAAN,KAAiBH,IAAIE,GAAJ,CAAQI,GAAR,EAAaH,MAAb;AAFjB,GAAP;AAID,CAPM;;AASP,OAAO,IAAMI,aAAaR,YAAnB;AACP,OAAO,IAAMS,SAASJ,eAAf;;AAcO;AAAA,SAAO,EAAP;AAAA;;AAZd,OAAO,IAAMK,eAAe,MAAM;AAChC,MAAMC,QAAQ,IAAIL,GAAJ,EAAd;;AAEA,MAAMJ,MAAMK,OAAOI,MAAMT,GAAN,CAAUK,GAAV,CAAnB;AACA,MAAMJ,MAAM,CAACI,GAAD,EAAMN,GAAN,KAAcU,MAAMR,GAAN,CAAUI,GAAV,EAAeN,GAAf,CAA1B;;AACgC;AAAA,WAAKU,MAAMC,MAAN,CAAaC,CAAb,CAAL;AAAA;;AAAhC,MAAMC,SAASC,QAAQA,KAAKC,GAAL,MAAvB;AACA,MAAMC,MAAM,MAAMN,MAAMO,KAAN,EAAlB;AACA,SAAO;AACLhB,SAAWK,GAAD,IAAST,QAAQqB,OAAR,CAAgBjB,IAAIK,GAAJ,CAAhB,CADd;AAELJ,SAAU,CAACI,GAAD,EAAMN,GAAN,KAAcH,QAAQqB,OAAR,CAAgBhB,IAAII,GAAJ,EAASN,GAAT,CAAhB,CAFnB;AAGLa,YAAU,CAAC,GAAGC,IAAJ,KAAajB,QAAQqB,OAAR,CAAgBL,OAAOC,IAAP,CAAhB,CAHlB;AAILG,WAAU,MAAMpB,QAAQqB,OAAR,CAAgBF,KAAhB,CAJX;AAKLG,mBALK;AAMLT;AANK,GAAP;AAQD,CAfM;;AAiBP,OAAO,IAAMU,cAAcX,cAApB,C,CAAmC","file":"store.js","sourcesContent":["import Promise from 'bluebird'\r\n\r\nimport clone from 'ramda/src/clone'\r\n\r\nexport const ValueStore = () => {\r\n  let val = null\r\n\r\n  return {\r\n    get: () => clone(val),\r\n    set: newVal => val = newVal\r\n  }\r\n}\r\n\r\nexport const ValueStoreMap = () => {\r\n  const val = new Map\r\n\r\n  return {\r\n    get: key => clone(val.get(key)),\r\n    set: (key, newVal) => val.set(key, newVal)\r\n  }\r\n}\r\n\r\nexport const TimeOffset = ValueStore()\r\nexport const dcList = ValueStoreMap()\r\n\r\nexport const AsyncStorage = () => {\r\n  const store = new Map\r\n\r\n  const get = key => store.get(key)\r\n  const set = (key, val) => store.set(key, val)\r\n  const remove = keys => keys.map(e => store.delete(e))\r\n  const clr = () => store.clear()\r\n  return {\r\n    get     : (key) => Promise.resolve(get(key)),\r\n    set     : (key, val) => Promise.resolve(set(key, val)),\r\n    remove  : (...keys) => Promise.resolve(remove(keys)),\r\n    clear   : () => Promise.resolve(clr()),\r\n    noPrefix: () => ({}),\r\n    store\r\n  }\r\n}\r\n\r\nexport const PureStorage = AsyncStorage() /*{\r\n  get     : (...keys) => new Promise(rs => ConfigStorage.get(keys, rs)),\r\n  set     : obj => new Promise(rs => ConfigStorage.set(obj, rs)),\r\n  remove  : (...keys) => new Promise(rs => ConfigStorage.remove(...keys, rs)),\r\n  noPrefix: () => ConfigStorage.noPrefix(),\r\n  clear   : () => new Promise(rs => ConfigStorage.clear(rs))\r\n}*/\r\n"]}