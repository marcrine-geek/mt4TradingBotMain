{"version":3,"sources":["../../../src/service/api-manager/index.js"],"names":["Promise","isNil","is","propEq","has","pathSatisfies","complement","Logger","debug","Auth","blueDefer","dTime","chooseServer","KeyManager","AuthKeyError","bytesFromHex","bytesToHex","switchErrors","delayedCall","Request","hasPath","baseDcID","Ln","length","obj","ApiManager","constructor","config","tls","netFabric","on","emit","cache","uploader","downloader","auth","servers","keysParsed","networkSetter","dc","options","authKey","serverSalt","networker","networkFabric","dcID","Error","akk","ssk","dcUrl","authKeyHex","storage","get","serverSaltHex","createNetworker","error","netError","set","mtpGetNetworker","method","params","deferred","rejectPromise","err","type","input","Object","message","reject","noErrorBox","initConnection","requestThunk","req","performRequest","waitTime","cfg","getNetworker","netOpts","then","resolve","deferResolve","apiSavedNet","apiRecall","console","code","mtpInvokeApi","catch","promise","setUserAuth","userAuth","fullUserAuth","user_auth","server","api","app","publicKeys","schema","mtSchema","apiConfig","serverConfig","TL","keyManager","Serialization","bind","apiManager","isAnyNetworker","storedBaseDc","baseDc","opts","nearestDc","wrapApiCall","nearest_dc","this_dc","mtpClearStorage","saveKeys","push","noPrefix","values","clear","restoreObj","forEach","key","i","value","undefined","ctx","keys","log","stack"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\r\n\r\nimport Promise from 'bluebird'\r\n// import UpdatesManager from '../updates'\r\n\r\nimport isNil from 'ramda/src/isNil'\r\nimport is from 'ramda/src/is'\r\nimport propEq from 'ramda/src/propEq'\r\nimport has from 'ramda/src/has'\r\nimport pathSatisfies from 'ramda/src/pathSatisfies'\r\nimport complement from 'ramda/src/complement'\r\n\r\nimport Logger from '../../util/log'\r\nconst debug = Logger`api-manager`\r\n\r\nimport Auth from '../authorizer'\r\nimport type { Args } from '../authorizer'\r\n\r\nimport blueDefer from '../../util/defer'\r\nimport { dTime } from '../time-manager'\r\nimport { chooseServer } from '../dc-configurator'\r\n\r\nimport KeyManager from '../rsa-keys-manger'\r\nimport { AuthKeyError } from '../../error'\r\n\r\nimport { bytesFromHex, bytesToHex } from '../../bin'\r\n\r\nimport type { TLFabric } from '../../tl'\r\nimport type { TLSchema } from '../../tl/index.h'\r\nimport { switchErrors } from './error-cases'\r\nimport { delayedCall } from '../../util/smart-timeout'\r\n\r\nimport Request from './request'\r\n\r\nimport type { Bytes, PublicKey, LeftOptions, AsyncStorage, Cache } from './index.h'\r\n\r\nimport type { ApiConfig, StrictConfig } from '../main/index.h'\r\n\r\nimport type { Networker } from '../networker'\r\n\r\nimport type { Emit, On } from '../main/index.h'\r\n\r\nconst hasPath = pathSatisfies( complement( isNil ) )\r\n\r\nconst baseDcID = 2\r\n\r\nconst Ln = (length, obj) => obj && propEq('length', length, obj)\r\n\r\n\r\n\r\nexport class ApiManager {\r\n  cache: Cache = {\r\n    uploader  : {},\r\n    downloader: {},\r\n    auth      : {},\r\n    servers   : {},\r\n    keysParsed: {}\r\n  }\r\n  apiConfig: ApiConfig\r\n  publicKeys: PublicKey[]\r\n  storage: AsyncStorage\r\n  TL: TLFabric\r\n  serverConfig: {}\r\n  schema: TLSchema\r\n  mtSchema: TLSchema\r\n  keyManager: Args\r\n  networkFabric: any\r\n  updatesManager: any\r\n  auth: any\r\n  on: On\r\n  emit: Emit\r\n  chooseServer: (dcID: number, upload?: boolean) => {}\r\n  constructor(config: StrictConfig, tls: TLFabric, netFabric: Function, { on, emit }: { on: On, emit: Emit }) {\r\n    const {\r\n      server,\r\n      api,\r\n      app: {\r\n        storage,\r\n        publicKeys\r\n      },\r\n      schema,\r\n      mtSchema\r\n    } = config\r\n    this.apiConfig = api\r\n    this.publicKeys = publicKeys\r\n    this.storage = storage\r\n    this.serverConfig = server\r\n    this.schema = schema\r\n    this.mtSchema = mtSchema\r\n    this.chooseServer = chooseServer(this.cache.servers, server)\r\n    this.on = on\r\n    this.emit = emit\r\n    this.TL = tls\r\n    this.keyManager = KeyManager(this.TL.Serialization, publicKeys, this.cache.keysParsed)\r\n    this.auth = Auth(this.TL, this.keyManager)\r\n    this.networkFabric = netFabric(this.chooseServer)\r\n    this.mtpInvokeApi = this.mtpInvokeApi.bind(this)\r\n    this.mtpGetNetworker = this.mtpGetNetworker.bind(this)\r\n    const apiManager = this.mtpInvokeApi\r\n    apiManager.setUserAuth = this.setUserAuth\r\n    apiManager.on = this.on\r\n    apiManager.emit = this.emit\r\n    apiManager.storage = storage\r\n\r\n    // this.updatesManager = UpdatesManager(apiManager)\r\n    // apiManager.updates = this.updatesManager\r\n\r\n    return apiManager\r\n  }\r\n  networkSetter = (dc: number, options: LeftOptions) =>\r\n    (authKey: Bytes, serverSalt: Bytes): Networker => {\r\n      const networker = this.networkFabric(dc, authKey, serverSalt, options)\r\n      this.cache.downloader[dc] = networker\r\n      return networker\r\n    }\r\n  mtpGetNetworker = async (dcID: number, options: LeftOptions = {}) => {\r\n    // const isUpload = options.fileUpload || options.fileDownload\r\n    // const cache = isUpload\r\n    //   ? this.cache.uploader\r\n    //   : this.cache.downloader\r\n\r\n    const cache = this.cache.downloader\r\n    if (!dcID) throw new Error('get Networker without dcID')\r\n\r\n    if (has(dcID, cache)) return cache[dcID]\r\n\r\n    const akk = `dc${  dcID  }_auth_key`\r\n    const ssk = `dc${  dcID  }_server_salt`\r\n\r\n    const dcUrl = this.chooseServer(dcID, false)\r\n\r\n    const networkSetter = this.networkSetter(dcID, options)\r\n\r\n    const authKeyHex = await this.storage.get(akk)\r\n    let serverSaltHex = await this.storage.get(ssk)\r\n\r\n    if (cache[dcID]) return cache[dcID]\r\n\r\n    if (Ln(512, authKeyHex)) {\r\n      if (!serverSaltHex || serverSaltHex.length !== 16)\r\n        serverSaltHex = 'AAAAAAAAAAAAAAAA'\r\n      const authKey = bytesFromHex(authKeyHex)\r\n      const serverSalt = bytesFromHex(serverSaltHex)\r\n\r\n      return networkSetter(authKey, serverSalt)\r\n    }\r\n\r\n    if (!options.createNetworker)\r\n      throw new AuthKeyError()\r\n\r\n    let auth\r\n    try {\r\n      auth = await this.auth(dcID, this.cache.auth, dcUrl)\r\n    } catch (error) {\r\n      return netError(error)\r\n    }\r\n\r\n    const { authKey, serverSalt } = auth\r\n\r\n    await this.storage.set(akk, bytesToHex(authKey))\r\n    await this.storage.set(ssk, bytesToHex(serverSalt))\r\n\r\n    return networkSetter(authKey, serverSalt)\r\n  }\r\n  async initConnection() {\r\n    if (!isAnyNetworker(this)) {\r\n      const storedBaseDc = await this.storage.get('dc')\r\n      const baseDc = storedBaseDc || baseDcID\r\n      const opts = {\r\n        dcID           : baseDc,\r\n        createNetworker: true\r\n      }\r\n      const networker = await this.mtpGetNetworker(baseDc, opts)\r\n      const nearestDc = await networker.wrapApiCall(\r\n        'help.getNearestDc', {}, opts)\r\n      const { nearest_dc, this_dc } = nearestDc\r\n      await this.storage.set('dc', nearest_dc)\r\n      debug(`nearest Dc`)('%O', nearestDc)\r\n      if (nearest_dc !== this_dc) await this.mtpGetNetworker(nearest_dc, { createNetworker: true })\r\n    }\r\n  }\r\n  mtpInvokeApi = async (method: string, params: Object, options: LeftOptions = {}) => {\r\n    const deferred = blueDefer()\r\n    const rejectPromise = (error: any) => {\r\n      let err\r\n      if (!error)\r\n        err = { type: 'ERROR_EMPTY', input: '' }\r\n      else if (!is(Object, error))\r\n        err = { message: error }\r\n      else err = error\r\n      deferred.reject(err)\r\n\r\n      if (!options.noErrorBox) {\r\n        //TODO weird code. `error` changed after `.reject`?\r\n\r\n        /*err.input = method\r\n\r\n        err.stack =\r\n          stack ||\r\n          hasPath(['originalError', 'stack'], error) ||\r\n          error.stack ||\r\n          (new Error()).stack*/\r\n        this.emit('error.invoke', error)\r\n      }\r\n    }\r\n\r\n    await this.initConnection()\r\n\r\n    const requestThunk = waitTime => delayedCall(req.performRequest, +waitTime * 1e3)\r\n\r\n    const dcID = options.dcID\r\n      ? options.dcID\r\n      : await this.storage.get('dc')\r\n\r\n    const networker = await this.mtpGetNetworker(dcID, options)\r\n\r\n    const cfg = {\r\n      networker,\r\n      dc          : dcID,\r\n      storage     : this.storage,\r\n      getNetworker: this.mtpGetNetworker,\r\n      netOpts     : options\r\n    }\r\n    const req = new Request(cfg, method, params)\r\n\r\n\r\n    req.performRequest()\r\n      .then(\r\n        deferred.resolve,\r\n        error => {\r\n          const deferResolve = deferred.resolve\r\n          const apiSavedNet = () => networker\r\n          const apiRecall = networker => {\r\n            req.config.networker = networker\r\n            return req.performRequest()\r\n          }\r\n          console.error(dTime(), 'Error', error.code, error.type, baseDcID, dcID)\r\n\r\n          return switchErrors(error, options, dcID, baseDcID)(\r\n            error, options, dcID, this.emit, rejectPromise, requestThunk,\r\n            apiSavedNet, apiRecall, deferResolve, this.mtpInvokeApi,\r\n            this.storage)\r\n        })\r\n      .catch(rejectPromise)\r\n\r\n    return deferred.promise\r\n  }\r\n\r\n  setUserAuth = (dcID: number, userAuth: any) => {\r\n    const fullUserAuth = { dcID, ...userAuth }\r\n    this.storage.set({\r\n      dc       : dcID,\r\n      user_auth: fullUserAuth\r\n    })\r\n    this.emit('auth.dc', { dc: dcID, auth: userAuth })\r\n  }\r\n  async mtpClearStorage() {\r\n    const saveKeys = []\r\n    for (let dcID = 1; dcID <= 5; dcID++) {\r\n      saveKeys.push(`dc${  dcID  }_auth_key`)\r\n      saveKeys.push(`t_dc${  dcID  }_auth_key`)\r\n    }\r\n    this.storage.noPrefix() //TODO Remove noPrefix\r\n\r\n    const values = await this.storage.get(...saveKeys)\r\n\r\n    await this.storage.clear()\r\n\r\n    const restoreObj = {}\r\n    saveKeys.forEach((key, i) => {\r\n      const value = values[i]\r\n      if (value !== false && value !== undefined)\r\n        restoreObj[key] = value\r\n    })\r\n    this.storage.noPrefix()\r\n\r\n    return this.storage.set(restoreObj) //TODO definitely broken\r\n  }\r\n}\r\n\r\nconst isAnyNetworker = (ctx: ApiManager) => Object.keys(ctx.cache.downloader).length > 0\r\n\r\nconst netError = error => {\r\n  console.log('Get networker error', error, error.stack)\r\n  return Promise.reject(error)\r\n}\r\n"]}