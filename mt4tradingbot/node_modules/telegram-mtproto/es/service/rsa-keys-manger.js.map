{"version":3,"sources":["../../src/service/rsa-keys-manger.js"],"names":["Promise","WriteMediator","bytesToHex","sha1BytesSync","bytesFromHex","strDecToHex","KeyManager","Serialization","publisKeysHex","publicKeysParsed","prepareRsaKeys","selectRsaKeyByFingerPrint","prepared","mapPrepare","modulus","exponent","RSAPublicKey","rsaBox","writer","bytes","buffer","getBuffer","fingerprintBytes","slice","reverse","map","fingerprints","fingerprintHex","foundKey","fingerprint","prepare","select"],"mappings":";;AAEA,OAAOA,OAAP,MAAoB,UAApB;;AAMA,SAASC,aAAT,QAA8B,OAA9B;;AAEA,SAASC,UAAT,EAAqBC,aAArB,EACEC,YADF,EACgBC,WADhB,QACmC,QADnC;;AAIA,OAAO,IAAMC,aAAa,CAACC,aAAD,EACxBC,aADwB,EAExBC,gBAFwB,KAEgB;AAAA;AAAA;;AAAA,oBAoBzBC,cApByB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,oBA4BzBC,yBA5ByB;AAAA;AAAA;AAAA;;AACxC,MAAIC,WAAW,KAAf;;AAEA,MAAMC,aAAa,CAAC,EAAEC,OAAF,EAAWC,QAAX,EAAD,KAAsC;AACvD,QAAMC,eAAeT,eAArB;AACA,QAAMU,SAASD,aAAaE,MAA5B;AACAjB,kBAAckB,KAAd,CAAoBF,MAApB,EAA4Bb,aAAaU,OAAb,CAA5B,EAAmD,GAAnD;AACAb,kBAAckB,KAAd,CAAoBF,MAApB,EAA4Bb,aAAaW,QAAb,CAA5B,EAAoD,GAApD;;AAEA,QAAMK,SAASH,OAAOI,SAAP,EAAf;;AAEA,QAAMC,mBAAmBnB,cAAciB,MAAd,EAAsBG,KAAtB,CAA4B,CAAC,CAA7B,CAAzB;AACAD,qBAAiBE,OAAjB;;AAEAf,qBAAiBP,WAAWoB,gBAAX,CAAjB,IAAiD;AAC/CR,aAD+C;AAE/CC;AAF+C,KAAjD;AAID,GAfD;;AAiBA,oBAAgC;AAC9B,QAAIH,QAAJ,EAAc;;AAEd,UAAMZ,QAAQyB,GAAR,CAAYjB,aAAZ,EAA2BK,UAA3B,CAAN;;AAEAD,eAAW,IAAX;AACD;;AAED,kBAAyCc,YAAzC,EAAiE;AAC/D,UAAMhB,gBAAN;;AAEA,QAAIiB,uBAAJ;AAAA,QAAoBC,iBAApB;AACA,yBAA0BF,YAA1B,kHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAA7BG,WAA6B;;AACtCF,uBAAiBtB,YAAYwB,WAAZ,CAAjB;AACAD,iBAAWnB,iBAAiBkB,cAAjB,CAAX;AACA,UAAIC,QAAJ,EACE,uBAASC,WAAT,IAAyBD,QAAzB;AACH;AACD,WAAO,KAAP;AACD;;AAED,SAAO;AACLE,aAASpB,cADJ;AAELqB,YAASpB;AAFJ,GAAP;AAID,CA/CM;;AAiDP,eAAeL,UAAf","file":"rsa-keys-manger.js","sourcesContent":["//@flow\r\n\r\nimport Promise from 'bluebird'\r\n\r\nimport type { PublicKey } from './main/index.h'\r\nimport type { Cached } from './api-manager/index.h'\r\nimport type { SerializationFabric } from '../tl'\r\n\r\nimport { WriteMediator } from '../tl'\r\n\r\nimport { bytesToHex, sha1BytesSync,\r\n  bytesFromHex, strDecToHex } from '../bin'\r\n\r\n\r\nexport const KeyManager = (Serialization: SerializationFabric,\r\n  publisKeysHex: PublicKey[],\r\n  publicKeysParsed: Cached<PublicKey>) => {\r\n  let prepared = false\r\n\r\n  const mapPrepare = ({ modulus, exponent }: PublicKey) => {\r\n    const RSAPublicKey = Serialization()\r\n    const rsaBox = RSAPublicKey.writer\r\n    WriteMediator.bytes(rsaBox, bytesFromHex(modulus), 'n')\r\n    WriteMediator.bytes(rsaBox, bytesFromHex(exponent), 'e')\r\n\r\n    const buffer = rsaBox.getBuffer()\r\n\r\n    const fingerprintBytes = sha1BytesSync(buffer).slice(-8)\r\n    fingerprintBytes.reverse()\r\n\r\n    publicKeysParsed[bytesToHex(fingerprintBytes)] = {\r\n      modulus,\r\n      exponent\r\n    }\r\n  }\r\n\r\n  async function prepareRsaKeys() {\r\n    if (prepared) return\r\n\r\n    await Promise.map(publisKeysHex, mapPrepare)\r\n\r\n    prepared = true\r\n  }\r\n\r\n  async function selectRsaKeyByFingerPrint(fingerprints: string[]) {\r\n    await prepareRsaKeys()\r\n\r\n    let fingerprintHex, foundKey\r\n    for (const fingerprint of fingerprints) {\r\n      fingerprintHex = strDecToHex(fingerprint)\r\n      foundKey = publicKeysParsed[fingerprintHex]\r\n      if (foundKey)\r\n        return { fingerprint, ...foundKey }\r\n    }\r\n    return false\r\n  }\r\n\r\n  return {\r\n    prepare: prepareRsaKeys,\r\n    select : selectRsaKeyByFingerPrint\r\n  }\r\n}\r\n\r\nexport default KeyManager\r\n"]}