{"version":3,"sources":["../../../src/service/authorizer/send-plain-req.js"],"names":["Promise","has","pathEq","allPass","httpClient","ErrorBadResponse","ErrorNotFound","generateID","WriteMediator","ReadMediator","is404","notError","err","error","reject","SendPlain","Serialization","Deserialization","onlySendPlainReq","url","requestBuffer","requestLength","byteLength","requestArray","Int32Array","header","headBox","writer","longP","long","int","headerBuffer","getBuffer","headerArray","headerLength","resultBuffer","ArrayBuffer","resultArray","set","length","requestData","reqPromise","post","responseType","props","req","onlySendPlainErr","onlySendPlainRes","data","deserializer","mtproto","ctx","typeBuffer","e","sendPlainReq","then"],"mappings":"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","file":"send-plain-req.js","sourcesContent":["//@flow\r\n\r\nimport Promise from 'bluebird'\r\n\r\nimport has from 'ramda/src/has'\r\nimport pathEq from 'ramda/src/pathEq'\r\nimport allPass from 'ramda/src/allPass'\r\n\r\nimport httpClient from '../../http'\r\nimport { ErrorBadResponse, ErrorNotFound } from '../../error'\r\nimport { generateID } from '../time-manager'\r\nimport { WriteMediator, ReadMediator } from '../../tl'\r\n\r\nimport type { TLFabric } from '../../tl'\r\n\r\nconst is404 = pathEq(['response', 'status'], 404)\r\nconst notError = allPass([has('message'), has('type')])\r\n\r\nconst SendPlain = ({ Serialization, Deserialization }: TLFabric) => {\r\n  const onlySendPlainReq = (url: string, requestBuffer: ArrayBuffer) => {\r\n    const requestLength = requestBuffer.byteLength,\r\n          requestArray = new Int32Array(requestBuffer)\r\n\r\n    const header = Serialization()\r\n    const headBox = header.writer\r\n\r\n    WriteMediator.longP(headBox, 0, 0, 'auth_key_id') // Auth key\r\n    WriteMediator.long(headBox, generateID(), 'msg_id') // Msg_id\r\n    WriteMediator.int(headBox, requestLength, 'request_length')\r\n\r\n    const headerBuffer: ArrayBuffer = headBox.getBuffer(),\r\n          headerArray = new Int32Array(headerBuffer)\r\n    const headerLength = headerBuffer.byteLength\r\n\r\n    const resultBuffer = new ArrayBuffer(headerLength + requestLength),\r\n          resultArray = new Int32Array(resultBuffer)\r\n\r\n    resultArray.set(headerArray)\r\n    resultArray.set(requestArray, headerArray.length)\r\n\r\n    const requestData = resultArray\r\n    // let reqPromise\r\n    // try {\r\n    const reqPromise = httpClient.post(url, requestData, {\r\n      responseType: 'arraybuffer'\r\n    })\r\n    // } catch (e) {\r\n    //   reqPromise = Promise.reject(new ErrorBadResponse(url, e))\r\n    // }\r\n    return Promise.props({ url, req: reqPromise })\r\n  }\r\n\r\n  const onlySendPlainErr = (err) => {\r\n    let error\r\n    switch (true) {\r\n      case is404(err):\r\n        error = new ErrorNotFound(err)\r\n        break\r\n      case notError(err):\r\n        error = new ErrorBadResponse('', err)\r\n        break\r\n      default:\r\n        error = err\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n\r\n  const onlySendPlainRes = ({ url, req }) => {\r\n    if (!req.data || !req.data.byteLength)\r\n      return Promise.reject(new ErrorBadResponse(url))\r\n    let deserializer\r\n    try {\r\n      deserializer = Deserialization(req.data, { mtproto: true })\r\n      const ctx = deserializer.typeBuffer\r\n      ReadMediator.long(ctx, 'auth_key_id')\r\n      ReadMediator.long(ctx, 'msg_id')\r\n      ReadMediator.int(ctx, 'msg_len')\r\n    } catch (e) {\r\n      return Promise.reject(new ErrorBadResponse(url, e))\r\n    }\r\n\r\n    return deserializer\r\n  }\r\n\r\n  const sendPlainReq = (url: string, requestBuffer: ArrayBuffer) =>\r\n    onlySendPlainReq(url, requestBuffer)\r\n      .then(\r\n        onlySendPlainRes,\r\n        onlySendPlainErr)\r\n\r\n  return sendPlainReq\r\n}\r\n\r\nexport default SendPlain"]}