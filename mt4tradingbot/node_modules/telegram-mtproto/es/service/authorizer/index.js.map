{"version":3,"sources":["../../../src/service/authorizer/index.js"],"names":["Promise","blueDefer","immediate","CryptoWorker","random","applyServerTime","dTime","tsNow","bytesCmp","bytesToHex","sha1BytesSync","nextRandomInt","aesEncryptSync","rsaEncrypt","aesDecryptSync","bytesToArrayBuffer","bytesFromHex","bytesXor","bpe","str2bigInt","one","dup","sub_","sub","greater","Logger","log","SendPlainReq","primeHex","concat","e1","e2","tmpAesKey","serverNonce","newNonce","arr1","arr2","key1","key2","slice","tmpAesIv","arr3","minSize","Math","ceil","getTwoPow","arr","Array","fill","unshift","hex","join","res","leemonTwoPow","mtpVerifyDhParams","g","dhPrime","gA","innerLog","dhPrimeHex","Error","dhPrimeLeemon","gALeemon","dhDec","case1","case2","case3","dhSubPow","case4","Auth","Serialization","Deserialization","select","prepare","mtpSendReqPQ","mtpSendReqDhParams","mtpSendSetClientDhParams","sendPlainReq","auth","deferred","nonce","request","mtproto","reqBox","writer","storeMethod","deserializer","dcUrl","getBuffer","err","console","error","message","reject","response","fetchObject","_","server_nonce","pq","fingerprints","server_public_key_fingerprints","key","publicKey","p","q","it","factorize","stack","data","dataBox","storeObject","new_nonce","dataWithHash","getBytes","public_key_fingerprint","fingerprint","encrypted_data","newNonceHash","new_nonce_hash","mtpDecryptServerDhDataAnswer","encrypted_answer","encryptedAnswer","answerWithHash","hash","answerWithPadding","buffer","dh_prime","g_a","serverTime","server_time","retry","offset","getOffset","localTime","gBytes","toString","b","gB","modPow","retry_id","g_b","encryptedData","authKey","authKeyHash","authKeyAux","authKeyID","newNonceHash1","new_nonce_hash1","serverSalt","resolve","newNonceHash2","new_nonce_hash2","newNonceHash3","new_nonce_hash3","authChain","then","mtpAuth","dcID","cached","promise","i","push","catch"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\r\n\r\nimport Promise from 'bluebird'\r\n\r\nimport blueDefer from '../../util/defer'\r\nimport { immediate } from '../../util/smart-timeout'\r\nimport CryptoWorker from '../../crypto'\r\n\r\nimport random from '../secure-random'\r\nimport { applyServerTime, dTime, tsNow } from '../time-manager'\r\n\r\nimport { bytesCmp, bytesToHex, sha1BytesSync, nextRandomInt,\r\n  aesEncryptSync, rsaEncrypt, aesDecryptSync, bytesToArrayBuffer,\r\n  bytesFromHex, bytesXor } from '../../bin'\r\nimport { bpe, str2bigInt, one,\r\n    dup, sub_, sub, greater } from '../../vendor/leemon'\r\n\r\nimport Logger from '../../util/log'\r\n\r\nconst log = Logger`auth`\r\n\r\n// import { ErrorBadResponse } from '../../error'\r\n\r\nimport SendPlainReq from './send-plain-req'\r\n\r\nimport type { TLFabric } from '../../tl'\r\n\r\nconst primeHex = 'c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d93' +\r\n  '0f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f6945' +\r\n  '8705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4a' +\r\n  'c8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba7' +\r\n  '4d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9c' +\r\n  'a3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851' +\r\n  'f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b'\r\n\r\nconst concat = (e1, e2) => [...e1, ...e2]\r\n\r\nconst tmpAesKey = (serverNonce, newNonce) => {\r\n  const arr1 = concat(newNonce, serverNonce)\r\n  const arr2 = concat(serverNonce, newNonce)\r\n  const key1 = sha1BytesSync(arr1)\r\n  const key2 = sha1BytesSync(arr2).slice(0, 12)\r\n  return key1.concat(key2)\r\n}\r\n\r\nconst tmpAesIv = (serverNonce, newNonce) => {\r\n  const arr1 = concat(serverNonce, newNonce)\r\n  const arr2 = concat(newNonce, newNonce)\r\n  const arr3 = newNonce.slice(0, 4)\r\n  const key1 = sha1BytesSync(arr1)\r\n  const key2 = sha1BytesSync(arr2)\r\n  return key1.slice(12).concat(key2, arr3)\r\n}\r\n\r\ntype Defer = {\r\n  resolve: (res: any) => void,\r\n  reject: (res: any) => void,\r\n  promise: Promise<any>\r\n}\r\n\r\ntype Cached = {[id: number]: Defer}\r\n\r\nexport type Args = {\r\n  select: () => Promise<string>,\r\n  prepare: () => Promise<void>\r\n}\r\n\r\ntype Bytes = number[]\r\n\r\ntype AuthBasic = {\r\n  dcID: number,\r\n  dcUrl: string,\r\n  nonce: Bytes,\r\n  deferred: Defer,\r\n  serverNonce: Bytes,\r\n  pq: Bytes,\r\n  fingerprints: Bytes,\r\n  p: number,\r\n  q: number,\r\n  publicKey: {\r\n    fingerprint: string\r\n  },\r\n  newNonce: number[],\r\n  b: Bytes,\r\n  g: number,\r\n  gA: any,\r\n  retry: number,\r\n  dhPrime: any,\r\n  serverTime: number,\r\n  localTime: number,\r\n  tmpAesKey: Bytes,\r\n  tmpAesIv: Bytes,\r\n  authKeyID: Bytes,\r\n  authKey: string,\r\n  serverSalt: Bytes\r\n}\r\n\r\nconst minSize = Math.ceil(64 / bpe) + 1\r\n\r\nconst getTwoPow = () => { //Dirty hack to count 2^(2048 - 64)\r\n                          //This number contains 496 zeroes in hex\r\n  const arr = Array(496)\r\n    .fill('0')\r\n  arr.unshift('1')\r\n  const hex = arr.join('')\r\n  const res = str2bigInt(hex, 16, minSize)\r\n  return res\r\n}\r\n\r\nconst leemonTwoPow = getTwoPow()\r\n\r\nexport const Auth = ({ Serialization, Deserialization }: TLFabric, { select, prepare }: Args) => {\r\n  const sendPlainReq = SendPlainReq({ Serialization, Deserialization })\r\n\r\n  async function mtpSendReqPQ(auth: AuthBasic) {\r\n    const deferred = auth.deferred\r\n    log('Send req_pq')(bytesToHex(auth.nonce))\r\n\r\n    const request = Serialization({ mtproto: true })\r\n    const reqBox = request.writer\r\n    request.storeMethod('req_pq', { nonce: auth.nonce })\r\n\r\n\r\n    let deserializer\r\n    try {\r\n      await prepare()\r\n      deserializer = await sendPlainReq(auth.dcUrl, reqBox.getBuffer())\r\n    } catch (err) {\r\n      console.error(dTime(), 'req_pq error', err.message)\r\n      deferred.reject(err)\r\n      throw err\r\n    }\r\n\r\n    try {\r\n      const response = deserializer.fetchObject('ResPQ', 'ResPQ')\r\n\r\n      if (response._ !== 'resPQ') {\r\n        const error = new Error(`[MT] resPQ response invalid: ${  response._}`)\r\n        deferred.reject(error)\r\n        return Promise.reject(error)\r\n      }\r\n      if (!bytesCmp(auth.nonce, response.nonce)) {\r\n        const error = new Error('[MT] resPQ nonce mismatch')\r\n        deferred.reject(error)\r\n        return Promise.reject(error)\r\n      }\r\n      auth.serverNonce = response.server_nonce\r\n      auth.pq = response.pq\r\n      auth.fingerprints = response.server_public_key_fingerprints\r\n\r\n      log('Got ResPQ')(bytesToHex(auth.serverNonce), bytesToHex(auth.pq), auth.fingerprints)\r\n\r\n      const key = await select(auth.fingerprints)\r\n\r\n      if (key)\r\n        auth.publicKey = key\r\n      else {\r\n        const error = new Error('[MT] No public key found')\r\n        deferred.reject(error)\r\n        return Promise.reject(error)\r\n      }\r\n      log('PQ factorization start')(auth.pq)\r\n      const [ p, q, it ] = await CryptoWorker.factorize(auth.pq)\r\n\r\n      auth.p = p\r\n      auth.q = q\r\n      log('PQ factorization done')(it)\r\n    } catch (error) {\r\n      log('Worker error')(error, error.stack)\r\n      deferred.reject(error)\r\n      throw error\r\n    }\r\n\r\n\r\n    return auth\r\n  }\r\n\r\n  async function mtpSendReqDhParams(auth: AuthBasic) {\r\n    const deferred = auth.deferred\r\n\r\n    auth.newNonce = new Array(32)\r\n    random(auth.newNonce)\r\n\r\n    const data = Serialization({ mtproto: true })\r\n    const dataBox = data.writer\r\n    data.storeObject({\r\n      _           : 'p_q_inner_data',\r\n      pq          : auth.pq,\r\n      p           : auth.p,\r\n      q           : auth.q,\r\n      nonce       : auth.nonce,\r\n      server_nonce: auth.serverNonce,\r\n      new_nonce   : auth.newNonce\r\n    }, 'P_Q_inner_data', 'DECRYPTED_DATA')\r\n\r\n    const dataWithHash = sha1BytesSync(dataBox.getBuffer()).concat(data.getBytes())\r\n\r\n    const request = Serialization({ mtproto: true })\r\n    const reqBox = request.writer\r\n    request.storeMethod('req_DH_params', {\r\n      nonce                 : auth.nonce,\r\n      server_nonce          : auth.serverNonce,\r\n      p                     : auth.p,\r\n      q                     : auth.q,\r\n      public_key_fingerprint: auth.publicKey.fingerprint,\r\n      encrypted_data        : rsaEncrypt(auth.publicKey, dataWithHash)\r\n    })\r\n\r\n\r\n    log('afterReqDH')('Send req_DH_params')\r\n\r\n    let deserializer\r\n    try {\r\n      deserializer = await sendPlainReq(auth.dcUrl, reqBox.getBuffer())\r\n    } catch (error) {\r\n      deferred.reject(error)\r\n      throw error\r\n    }\r\n\r\n\r\n    const response = deserializer.fetchObject('Server_DH_Params', 'RESPONSE')\r\n\r\n    if (response._ !== 'server_DH_params_fail' && response._ !== 'server_DH_params_ok') {\r\n      const error = new Error(`[MT] Server_DH_Params response invalid: ${  response._}`)\r\n      deferred.reject(error)\r\n      throw error\r\n    }\r\n\r\n    if (!bytesCmp(auth.nonce, response.nonce)) {\r\n      const error = new Error('[MT] Server_DH_Params nonce mismatch')\r\n      deferred.reject(error)\r\n      throw error\r\n    }\r\n\r\n    if (!bytesCmp(auth.serverNonce, response.server_nonce)) {\r\n      const error = new Error('[MT] Server_DH_Params server_nonce mismatch')\r\n      deferred.reject(error)\r\n      throw error\r\n    }\r\n\r\n    if (response._ === 'server_DH_params_fail') {\r\n      const newNonceHash = sha1BytesSync(auth.newNonce).slice(-16)\r\n      if (!bytesCmp(newNonceHash, response.new_nonce_hash)) {\r\n        const error = new Error('[MT] server_DH_params_fail new_nonce_hash mismatch')\r\n        deferred.reject(error)\r\n        throw error\r\n      }\r\n      const error = new Error('[MT] server_DH_params_fail')\r\n      deferred.reject(error)\r\n      throw error\r\n    }\r\n\r\n    // try {\r\n    mtpDecryptServerDhDataAnswer(auth, response.encrypted_answer)\r\n    // } catch (e) {\r\n    //   deferred.reject(e)\r\n    //   return false\r\n    // }\r\n\r\n    return auth\r\n  }\r\n\r\n  function mtpDecryptServerDhDataAnswer(auth: AuthBasic, encryptedAnswer) {\r\n    auth.tmpAesKey = tmpAesKey(auth.serverNonce, auth.newNonce)\r\n    auth.tmpAesIv = tmpAesIv(auth.serverNonce, auth.newNonce)\r\n\r\n    const answerWithHash = aesDecryptSync(\r\n      encryptedAnswer,\r\n      auth.tmpAesKey,\r\n      auth.tmpAesIv)\r\n\r\n    const hash = answerWithHash.slice(0, 20)\r\n    const answerWithPadding = answerWithHash.slice(20)\r\n    const buffer = bytesToArrayBuffer(answerWithPadding)\r\n\r\n    const deserializer = Deserialization(buffer, { mtproto: true })\r\n    const response = deserializer.fetchObject('Server_DH_inner_data', 'server_dh')\r\n\r\n    if (response._ !== 'server_DH_inner_data')\r\n      throw new Error(`[MT] server_DH_inner_data response invalid`)\r\n\r\n    if (!bytesCmp(auth.nonce, response.nonce))\r\n      throw new Error('[MT] server_DH_inner_data nonce mismatch')\r\n\r\n    if (!bytesCmp(auth.serverNonce, response.server_nonce))\r\n      throw new Error('[MT] server_DH_inner_data serverNonce mismatch')\r\n\r\n    log('DecryptServerDhDataAnswer')('Done decrypting answer')\r\n    auth.g = response.g\r\n    auth.dhPrime = response.dh_prime\r\n    auth.gA = response.g_a\r\n    auth.serverTime = response.server_time\r\n    auth.retry = 0\r\n\r\n    mtpVerifyDhParams(auth.g, auth.dhPrime, auth.gA)\r\n\r\n    const offset = deserializer.getOffset()\r\n\r\n    if (!bytesCmp(hash, sha1BytesSync(answerWithPadding.slice(0, offset))))\r\n      throw new Error('[MT] server_DH_inner_data SHA1-hash mismatch')\r\n\r\n    auth.localTime = tsNow()\r\n    applyServerTime(auth.serverTime, auth.localTime)\r\n  }\r\n\r\n  function mtpVerifyDhParams(g, dhPrime, gA) {\r\n    const innerLog = log('VerifyDhParams')\r\n    innerLog('begin')\r\n    const dhPrimeHex = bytesToHex(dhPrime)\r\n    if (g !== 3 || dhPrimeHex !== primeHex)\r\n      // The verified value is from https://core.telegram.org/mtproto/security_guidelines\r\n      throw new Error('[MT] DH params are not verified: unknown dhPrime')\r\n    innerLog('dhPrime cmp OK')\r\n\r\n    // const gABigInt = new BigInteger(bytesToHex(gA), 16)\r\n    // const dhPrimeBigInt = new BigInteger(dhPrimeHex, 16)\r\n\r\n    const dhPrimeLeemon = str2bigInt(dhPrimeHex, 16, minSize)\r\n    const gALeemon = str2bigInt(bytesToHex(gA), 16, minSize)\r\n    const dhDec = dup(dhPrimeLeemon)\r\n    sub_(dhDec, one)\r\n    // const dhDecStr = bigInt2str(dhDec, 16)\r\n    // const comp = dhPrimeBigInt.subtract(BigInteger.ONE).toString(16)\r\n    // console.log(dhPrimeLeemon, dhDecStr === comp)\r\n    const case1 = !greater(gALeemon, one)\r\n      //gABigInt.compareTo(BigInteger.ONE) <= 0\r\n    const case2 = !greater(dhDec, gALeemon)\r\n      //gABigInt.compareTo(dhPrimeBigInt.subtract(BigInteger.ONE)) >= 0\r\n    if (case1)\r\n      throw new Error('[MT] DH params are not verified: gA <= 1')\r\n\r\n    if (case2)\r\n      throw new Error('[MT] DH params are not verified: gA >= dhPrime - 1')\r\n    // console.log(dTime(), '1 < gA < dhPrime-1 OK')\r\n\r\n\r\n    // const two = new BigInteger(null)\r\n    // two.fromInt(2)\r\n    // const twoPow = two.pow(2048 - 64)\r\n\r\n    const case3 = !!greater(leemonTwoPow, gALeemon)\r\n      //gABigInt.compareTo(twoPow) < 0\r\n    const dhSubPow = dup(dhPrimeLeemon)\r\n    sub(dhSubPow, leemonTwoPow)\r\n    const case4 = !greater(dhSubPow, gALeemon)\r\n      //gABigInt.compareTo(dhPrimeBigInt.subtract(twoPow)) >= 0\r\n    // console.log(case3 === gABigInt.compareTo(twoPow) < 0)\r\n    if (case3)\r\n      throw new Error('[MT] DH params are not verified: gA < 2^{2048-64}')\r\n    if (case4)\r\n      throw new Error('[MT] DH params are not verified: gA > dhPrime - 2^{2048-64}')\r\n    innerLog('2^{2048-64} < gA < dhPrime-2^{2048-64} OK')\r\n\r\n    return true\r\n  }\r\n\r\n  async function mtpSendSetClientDhParams(auth: AuthBasic) {\r\n    const deferred = auth.deferred\r\n    const gBytes = bytesFromHex(auth.g.toString(16))\r\n\r\n    auth.b = new Array(256)\r\n    random(auth.b)\r\n\r\n    const gB = await CryptoWorker.modPow(gBytes, auth.b, auth.dhPrime)\r\n    const data = Serialization({ mtproto: true })\r\n\r\n    data.storeObject({\r\n      _           : 'client_DH_inner_data',\r\n      nonce       : auth.nonce,\r\n      server_nonce: auth.serverNonce,\r\n      retry_id    : [0, auth.retry++],\r\n      g_b         : gB\r\n    }, 'Client_DH_Inner_Data', 'client_DH')\r\n\r\n    const dataWithHash = sha1BytesSync(data.writer.getBuffer()).concat(data.getBytes())\r\n\r\n    const encryptedData = aesEncryptSync(dataWithHash, auth.tmpAesKey, auth.tmpAesIv)\r\n\r\n    const request = Serialization({ mtproto: true })\r\n\r\n    request.storeMethod('set_client_DH_params', {\r\n      nonce         : auth.nonce,\r\n      server_nonce  : auth.serverNonce,\r\n      encrypted_data: encryptedData\r\n    })\r\n\r\n    log('onGb')('Send set_client_DH_params')\r\n\r\n    const deserializer = await sendPlainReq(auth.dcUrl, request.writer.getBuffer())\r\n\r\n    const response = deserializer.fetchObject('Set_client_DH_params_answer', 'client_dh')\r\n\r\n    if (response._ != 'dh_gen_ok' && response._ != 'dh_gen_retry' && response._ != 'dh_gen_fail') {\r\n      const error = new Error(`[MT] Set_client_DH_params_answer response invalid: ${  response._}`)\r\n      deferred.reject(error)\r\n      throw error\r\n    }\r\n\r\n    if (!bytesCmp(auth.nonce, response.nonce)) {\r\n      const error = new Error('[MT] Set_client_DH_params_answer nonce mismatch')\r\n      deferred.reject(error)\r\n      throw error\r\n    }\r\n\r\n    if (!bytesCmp(auth.serverNonce, response.server_nonce)) {\r\n      const error = new Error('[MT] Set_client_DH_params_answer server_nonce mismatch')\r\n      deferred.reject(error)\r\n      throw error\r\n    }\r\n\r\n    const authKey = await CryptoWorker.modPow(auth.gA, auth.b, auth.dhPrime)\r\n\r\n    const authKeyHash = sha1BytesSync(authKey),\r\n          authKeyAux = authKeyHash.slice(0, 8),\r\n          authKeyID = authKeyHash.slice(-8)\r\n\r\n    log('Got Set_client_DH_params_answer')(response._)\r\n    switch (response._) {\r\n      case 'dh_gen_ok': {\r\n        const newNonceHash1 = sha1BytesSync(auth.newNonce.concat([1], authKeyAux)).slice(-16)\r\n\r\n        if (!bytesCmp(newNonceHash1, response.new_nonce_hash1)) {\r\n          deferred.reject(new Error('[MT] Set_client_DH_params_answer new_nonce_hash1 mismatch'))\r\n          return false\r\n        }\r\n\r\n        const serverSalt = bytesXor(auth.newNonce.slice(0, 8), auth.serverNonce.slice(0, 8))\r\n        // console.log('Auth successfull!', authKeyID, authKey, serverSalt)\r\n\r\n        auth.authKeyID = authKeyID\r\n        auth.authKey = authKey\r\n        auth.serverSalt = serverSalt\r\n\r\n        deferred.resolve(auth)\r\n        break\r\n      }\r\n      case 'dh_gen_retry': {\r\n        const newNonceHash2 = sha1BytesSync(auth.newNonce.concat([2], authKeyAux)).slice(-16)\r\n        if (!bytesCmp(newNonceHash2, response.new_nonce_hash2)) {\r\n          deferred.reject(new Error('[MT] Set_client_DH_params_answer new_nonce_hash2 mismatch'))\r\n          return false\r\n        }\r\n\r\n        return mtpSendSetClientDhParams(auth)\r\n      }\r\n      case 'dh_gen_fail': {\r\n        const newNonceHash3 = sha1BytesSync(auth.newNonce.concat([3], authKeyAux)).slice(-16)\r\n        if (!bytesCmp(newNonceHash3, response.new_nonce_hash3)) {\r\n          deferred.reject(new Error('[MT] Set_client_DH_params_answer new_nonce_hash3 mismatch'))\r\n          return false\r\n        }\r\n\r\n        deferred.reject(new Error('[MT] Set_client_DH_params_answer fail'))\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  const authChain = (auth: AuthBasic) =>\r\n    mtpSendReqPQ(auth)\r\n      .then(mtpSendReqDhParams)\r\n      .then(mtpSendSetClientDhParams)\r\n\r\n  function mtpAuth(dcID: number, cached: Cached, dcUrl: string) {\r\n    if (cached[dcID])\r\n      return cached[dcID].promise\r\n    log('mtpAuth', 'dcID', 'dcUrl')(dcID, dcUrl)\r\n    const nonce = []\r\n    for (let i = 0; i < 16; i++)\r\n      nonce.push(nextRandomInt(0xFF))\r\n\r\n    if (!dcUrl)\r\n      return Promise.reject(\r\n        new Error(`[MT] No server found for dc ${dcID} url ${dcUrl}`))\r\n\r\n    const auth: any = {\r\n      dcID,\r\n      dcUrl,\r\n      nonce,\r\n      deferred: blueDefer()\r\n    }\r\n\r\n    immediate(authChain, auth)\r\n\r\n    cached[dcID] = auth.deferred\r\n\r\n    cached[dcID].promise.catch(() => {\r\n      delete cached[dcID]\r\n    })\r\n\r\n    return cached[dcID].promise\r\n  }\r\n\r\n  return mtpAuth\r\n}\r\nexport default Auth"]}