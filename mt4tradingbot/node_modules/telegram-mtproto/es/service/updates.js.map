{"version":3,"sources":["../../src/service/updates.js"],"names":["Promise","Logger","debug","setUpdatesProcessor","AppChatsManager","a","b","pts","UpdatesManager","api","getUserID","getDifference","getChannelDifference","attach","updatesState","pendingPtsUpdates","pendingSeqUpdates","syncPending","syncLoading","channelStates","myID","then","id","auth","storage","get","popPendingSeqUpdate","nextSeq","seq","pendingUpdatesData","updates","forEach","saveUpdate","date","seqAwaiting","ptsAwaiting","clearTimeout","timeout","popPendingPtsUpdate","channelID","curState","getChannelState","length","sort","curPts","goodPts","goodIndex","update","i","pts_count","slice","splice","forceGetDifference","processUpdateMessage","updateMessage","processOpts","seqStart","seq_start","processUpdate","_","isOut","flags","fromID","from_id","user_id","toID","chat_id","emit","message","apiMessage","differenceResult","qts","channelsUpdates","other_updates","new_messages","nextState","intermediate_state","state","channelState","channel","getChannelInput","filter","limit","channel_id","map","pFlags","addChannelState","Error","undefined","options","to_id","popPts","popSeq","newPts","push","setTimeout","stateResult","noErrorBox"],"mappings":"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","file":"updates.js","sourcesContent":["//@flow\r\n\r\nimport Promise from 'bluebird'\r\nimport Logger from '../util/log'\r\nconst debug = Logger`updates`\r\n\r\nimport { setUpdatesProcessor } from './networker'\r\nimport type { ApiManagerInstance } from './api-manager/index.h'\r\nimport type { UpdatesState, CurState } from './updates.h'\r\n\r\n// const AppPeersManager = null\r\n// const AppUsersManager = null\r\nconst AppChatsManager = null\r\n\r\nconst UpdatesManager = (api: ApiManagerInstance) => {\r\n  const updatesState: any = {\r\n    pendingPtsUpdates: [],\r\n    pendingSeqUpdates: {},\r\n    syncPending      : false,\r\n    syncLoading      : true\r\n  }\r\n  const channelStates = {}\r\n\r\n  let myID = 0\r\n  getUserID().then(id => myID = id)\r\n\r\n  async function getUserID() {\r\n    const auth = await api.storage.get('user_auth')\r\n    return auth.id || 0\r\n  }\r\n\r\n  function popPendingSeqUpdate() {\r\n    const nextSeq = updatesState.seq + 1\r\n    const pendingUpdatesData = updatesState.pendingSeqUpdates[nextSeq]\r\n    if (!pendingUpdatesData) {\r\n      return false\r\n    }\r\n    const updates = pendingUpdatesData.updates\r\n    updates.forEach(saveUpdate)\r\n    updatesState.seq = pendingUpdatesData.seq\r\n    if (pendingUpdatesData.date && updatesState.date < pendingUpdatesData.date) {\r\n      updatesState.date = pendingUpdatesData.date\r\n    }\r\n    delete updatesState.pendingSeqUpdates[nextSeq]\r\n\r\n    if (!popPendingSeqUpdate() &&\r\n      updatesState.syncPending &&\r\n      updatesState.syncPending.seqAwaiting &&\r\n      updatesState.seq >= updatesState.syncPending.seqAwaiting) {\r\n      if (!updatesState.syncPending.ptsAwaiting) {\r\n        clearTimeout(updatesState.syncPending.timeout)\r\n        updatesState.syncPending = false\r\n      } else {\r\n        delete updatesState.syncPending.seqAwaiting\r\n      }\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  function popPendingPtsUpdate(channelID) {\r\n    const curState = channelID ? getChannelState(channelID) : updatesState\r\n    if (!curState.pendingPtsUpdates.length) {\r\n      return false\r\n    }\r\n    curState.pendingPtsUpdates.sort((a, b) => a.pts - b.pts)\r\n\r\n    let curPts = curState.pts\r\n    let goodPts = false\r\n    let goodIndex = 0\r\n    let update\r\n    let i = 0\r\n    for (const update of curState.pendingPtsUpdates) {\r\n      curPts += update.pts_count\r\n      if (curPts >= update.pts) {\r\n        goodPts = update.pts\r\n        goodIndex = i\r\n      }\r\n      i++\r\n    }\r\n\r\n    if (!goodPts) {\r\n      return false\r\n    }\r\n\r\n    debug('pop pending pts updates')(goodPts, curState.pendingPtsUpdates.slice(0, goodIndex + 1))\r\n\r\n    curState.pts = goodPts\r\n    for (let i = 0; i <= goodIndex; i++) {\r\n      update = curState.pendingPtsUpdates[i]\r\n      saveUpdate(update)\r\n    }\r\n    curState.pendingPtsUpdates.splice(0, goodIndex + 1)\r\n\r\n    if (!curState.pendingPtsUpdates.length && curState.syncPending) {\r\n      if (!curState.syncPending.seqAwaiting) {\r\n        clearTimeout(curState.syncPending.timeout)\r\n        curState.syncPending = false\r\n      } else {\r\n        delete curState.syncPending.ptsAwaiting\r\n      }\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  function forceGetDifference() {\r\n    if (!updatesState.syncLoading) {\r\n      getDifference()\r\n    }\r\n  }\r\n\r\n  function processUpdateMessage(updateMessage: any) {\r\n    // return forceGetDifference()\r\n    const processOpts = {\r\n      date    : updateMessage.date,\r\n      seq     : updateMessage.seq,\r\n      seqStart: updateMessage.seq_start\r\n    }\r\n\r\n    switch (updateMessage._) {\r\n      case 'updatesTooLong':\r\n      case 'new_session_created':\r\n        forceGetDifference()\r\n        break\r\n\r\n      case 'updateShort':\r\n        processUpdate(updateMessage.update, processOpts)\r\n        break\r\n\r\n      case 'updateShortMessage':\r\n      case 'updateShortChatMessage': {\r\n        const isOut = updateMessage.flags & 2\r\n        const fromID = updateMessage.from_id || (isOut ? myID : updateMessage.user_id)\r\n        const toID = updateMessage.chat_id\r\n          ? -updateMessage.chat_id\r\n          : isOut ? updateMessage.user_id : myID\r\n        \r\n        api.emit('updateShortMessage', { \r\n          processUpdate,\r\n          processOpts,\r\n          updateMessage,\r\n          fromID,\r\n          toID\r\n        })\r\n      }\r\n        break\r\n\r\n      case 'updatesCombined':\r\n      case 'updates': \r\n        api.emit('apiUpdate', updateMessage)\r\n\r\n        updateMessage.updates.forEach(update => {\r\n          processUpdate(update, processOpts)\r\n        })\r\n        break\r\n\r\n      default:\r\n        debug('Unknown update message')(updateMessage)\r\n    }\r\n  }\r\n\r\n  async function getDifference() {\r\n    if (!updatesState.syncLoading) {\r\n      updatesState.syncLoading = true\r\n      updatesState.pendingSeqUpdates = {}\r\n      updatesState.pendingPtsUpdates = []\r\n    }\r\n\r\n    if (updatesState.syncPending) {\r\n      clearTimeout(updatesState.syncPending.timeout)\r\n      updatesState.syncPending = false\r\n    }\r\n\r\n    const differenceResult = await api('updates.getDifference', {\r\n      pts : updatesState.pts,\r\n      date: updatesState.date,\r\n      qts : -1\r\n    })\r\n    if (differenceResult._ === 'updates.differenceEmpty') {\r\n      debug('apply empty diff')(differenceResult.seq)\r\n      updatesState.date = differenceResult.date\r\n      updatesState.seq = differenceResult.seq\r\n      updatesState.syncLoading = false\r\n      api.emit('stateSynchronized')\r\n      return false\r\n    }\r\n\r\n    api.emit('difference', differenceResult)\r\n\r\n    // Should be first because of updateMessageID\r\n    // console.log(dT(), 'applying', differenceResult.other_updates.length, 'other updates')\r\n\r\n    const channelsUpdates = []\r\n    differenceResult.other_updates.forEach(update => {\r\n      switch (update._) {\r\n        case 'updateChannelTooLong':\r\n        case 'updateNewChannelMessage':\r\n        case 'updateEditChannelMessage':\r\n          processUpdate(update)\r\n          return\r\n      }\r\n      saveUpdate(update)\r\n    })\r\n\r\n    // console.log(dT(), 'applying', differenceResult.new_messages.length, 'new messages')\r\n    differenceResult.new_messages.forEach(apiMessage => {\r\n      saveUpdate({\r\n        _        : 'updateNewMessage',\r\n        message  : apiMessage,\r\n        pts      : updatesState.pts,\r\n        pts_count: 0\r\n      })\r\n    })\r\n\r\n    const nextState = differenceResult.intermediate_state || differenceResult.state\r\n    updatesState.seq = nextState.seq\r\n    updatesState.pts = nextState.pts\r\n    updatesState.date = nextState.date\r\n\r\n    // console.log(dT(), 'apply diff', updatesState.seq, updatesState.pts)\r\n\r\n    if (differenceResult._ == 'updates.differenceSlice') {\r\n      getDifference()\r\n    } else {\r\n      // console.log(dT(), 'finished get diff')\r\n      api.emit('stateSynchronized')\r\n      updatesState.syncLoading = false\r\n    }\r\n  }\r\n\r\n  async function getChannelDifference(channelID: number) {\r\n    const channelState = getChannelState(channelID)\r\n    if (!channelState.syncLoading) {\r\n      channelState.syncLoading = true\r\n      channelState.pendingPtsUpdates = []\r\n    }\r\n    if (channelState.syncPending) {\r\n      clearTimeout(channelState.syncPending.timeout)\r\n      channelState.syncPending = false\r\n    }\r\n    // console.log(dT(), 'Get channel diff', AppChatsManager.getChat(channelID), channelState.pts)\r\n    const differenceResult = await api('updates.getChannelDifference', {\r\n      channel: AppChatsManager.getChannelInput(channelID),\r\n      filter : { _: 'channelMessagesFilterEmpty' },\r\n      pts    : channelState.pts,\r\n      limit  : 30\r\n    })\r\n    // console.log(dT(), 'channel diff result', differenceResult)\r\n    channelState.pts = differenceResult.pts\r\n\r\n    if (differenceResult._ == 'updates.channelDifferenceEmpty') {\r\n      debug('apply channel empty diff')(differenceResult)\r\n      channelState.syncLoading = false\r\n      api.emit('stateSynchronized')\r\n      return false\r\n    }\r\n\r\n    if (differenceResult._ == 'updates.channelDifferenceTooLong') {\r\n      debug('channel diff too long')(differenceResult)\r\n      channelState.syncLoading = false\r\n      delete channelStates[channelID]\r\n      saveUpdate({ _: 'updateChannelReload', channel_id: channelID })\r\n      return false\r\n    }\r\n\r\n    api.emit('difference', differenceResult)\r\n\r\n    // Should be first because of updateMessageID\r\n    debug('applying')(differenceResult.other_updates.length, 'channel other updates')\r\n    differenceResult.other_updates.map(saveUpdate)\r\n\r\n    debug('applying')(differenceResult.new_messages.length, 'channel new messages')\r\n    differenceResult.new_messages.forEach(apiMessage => {\r\n      saveUpdate({\r\n        _        : 'updateNewChannelMessage',\r\n        message  : apiMessage,\r\n        pts      : channelState.pts,\r\n        pts_count: 0\r\n      })\r\n    })\r\n\r\n    debug('apply channel diff')(channelState.pts)\r\n\r\n    if (differenceResult._ == 'updates.channelDifference' &&\r\n      !differenceResult.pFlags['final']) {\r\n      getChannelDifference(channelID)\r\n    } else {\r\n      debug('finished channel get diff')()\r\n      api.emit('stateSynchronized')\r\n      channelState.syncLoading = false\r\n    }\r\n  }\r\n\r\n  function addChannelState(channelID: number, pts: ?number) {\r\n    if (!pts) {\r\n      throw new Error(`Add channel state without pts ${channelID}`)\r\n    }\r\n    if (channelStates[channelID] === undefined) {\r\n      channelStates[channelID] = {\r\n        pts,\r\n        pendingPtsUpdates: [],\r\n        syncPending      : false,\r\n        syncLoading      : false\r\n      }\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  function getChannelState(channelID: number, pts?: ?number) {\r\n    if (channelStates[channelID] === undefined) {\r\n      addChannelState(channelID, pts)\r\n    }\r\n    return channelStates[channelID]\r\n  }\r\n\r\n  function processUpdate(update, options = {}) {\r\n    let channelID\r\n    switch (update._) {\r\n      case 'updateNewChannelMessage':\r\n      case 'updateEditChannelMessage':\r\n        channelID = update.message.to_id.channel_id || update.message.to_id.chat_id\r\n        break\r\n      case 'updateDeleteChannelMessages':\r\n        channelID = update.channel_id\r\n        break\r\n      case 'updateChannelTooLong':\r\n        channelID = update.channel_id\r\n        if (channelStates[channelID] === undefined) {\r\n          return false\r\n        }\r\n        break\r\n    }\r\n\r\n    const curState: CurState = channelID ? getChannelState(channelID, update.pts) : updatesState\r\n\r\n    // console.log(dT(), 'process', channelID, curState.pts, update)\r\n\r\n    if (curState.syncLoading) {\r\n      return false\r\n    }\r\n\r\n    if (update._ == 'updateChannelTooLong') {\r\n      getChannelDifference(channelID || 0)\r\n      return false\r\n    }\r\n\r\n    let popPts\r\n    let popSeq\r\n\r\n    if (update.pts) {\r\n      const newPts = curState.pts + (update.pts_count || 0)\r\n      if (newPts < update.pts) {\r\n        // debug('Pts hole')(curState, update, channelID && AppChatsManager.getChat(channelID))\r\n        curState.pendingPtsUpdates.push(update)\r\n        if (!curState.syncPending) {\r\n          curState.syncPending = {\r\n            timeout: setTimeout(() => {\r\n              if (channelID) {\r\n                getChannelDifference(channelID)\r\n              } else {\r\n                getDifference()\r\n              }\r\n            }, 5000),\r\n          }\r\n        }\r\n        curState.syncPending.ptsAwaiting = true\r\n        return false\r\n      }\r\n      if (update.pts > curState.pts) {\r\n        curState.pts = update.pts\r\n        popPts = true\r\n      }\r\n      else if (update.pts_count) {\r\n        // console.warn(dT(), 'Duplicate update', update)\r\n        return false\r\n      }\r\n      if (channelID && options.date && updatesState.date < options.date) {\r\n        updatesState.date = options.date\r\n      }\r\n    }\r\n    else if (!channelID && options.seq > 0) {\r\n      const seq = options.seq\r\n      const seqStart = options.seqStart || seq\r\n\r\n      if (seqStart != curState.seq + 1) {\r\n        if (seqStart > curState.seq) {\r\n          debug('Seq hole')(curState, curState.syncPending && curState.syncPending.seqAwaiting)\r\n\r\n          if (curState.pendingSeqUpdates[seqStart] === undefined) {\r\n            curState.pendingSeqUpdates[seqStart] = { seq, date: options.date, updates: [] }\r\n          }\r\n          curState.pendingSeqUpdates[seqStart].updates.push(update)\r\n\r\n          if (!curState.syncPending) {\r\n            curState.syncPending = {\r\n              timeout: setTimeout(() => {\r\n                getDifference()\r\n              }, 5000)\r\n            }\r\n          }\r\n          if (!curState.syncPending.seqAwaiting ||\r\n            curState.syncPending.seqAwaiting < seqStart) {\r\n            curState.syncPending.seqAwaiting = seqStart\r\n          }\r\n          return false\r\n        }\r\n      }\r\n\r\n      if (curState.seq != seq) {\r\n        curState.seq = seq\r\n        if (options.date && curState.date < options.date) {\r\n          curState.date = options.date\r\n        }\r\n        popSeq = true\r\n      }\r\n    }\r\n\r\n    saveUpdate(update)\r\n\r\n    if (popPts) {\r\n      popPendingPtsUpdate(channelID)\r\n    }\r\n    else if (popSeq) {\r\n      popPendingSeqUpdate()\r\n    }\r\n  }\r\n\r\n  function saveUpdate(update: any) {\r\n    api.emit('apiUpdate', update)\r\n  }\r\n\r\n  async function attach() {\r\n    setUpdatesProcessor(processUpdateMessage)\r\n    const stateResult: UpdatesState = await api('updates.getState', {}, { noErrorBox: true })\r\n    updatesState.seq = stateResult.seq\r\n    updatesState.pts = stateResult.pts\r\n    updatesState.date = stateResult.date\r\n    setTimeout(() => {\r\n      updatesState.syncLoading = false\r\n    }, 1000)\r\n  }\r\n\r\n  return {\r\n    processUpdateMessage,\r\n    addChannelState,\r\n    attach\r\n  }\r\n}\r\n\r\nexport default UpdatesManager"]}