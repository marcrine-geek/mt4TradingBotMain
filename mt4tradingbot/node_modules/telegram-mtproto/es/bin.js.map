{"version":3,"sources":["../src/bin.js"],"names":["toLower","Rusha","CryptoJSlib","CryptoJS","inflate","random","eGCD_","greater","divide_","str2bigInt","equalsInt","isZero","bigInt2str","copy_","copyInt_","rightShift_","leftShift_","sub_","add_","powMod","bpe","one","rushaInstance","stringToChars","str","ln","length","result","Array","i","charCodeAt","strDecToHex","bytesToHex","bytes","arr","push","toString","join","bytesFromHex","hexString","len","start","parseInt","charAt","substr","bytesCmp","bytes1","bytes2","bytesXor","bytesToWords","ArrayBuffer","Uint8Array","words","lib","WordArray","init","bytesFromWords","wordArray","sigBytes","bytesFromLeemonBigInt","bigInt","bytesToArrayBuffer","b","buffer","convertToArrayBuffer","undefined","byteLength","BYTES_PER_ELEMENT","convertToUint8Array","convertToByteArray","isArray","newBytes","bytesFromArrayBuffer","byteView","from","bufferConcat","buffer1","buffer2","l1","l2","tmp","set","dividerLem","longToInts","sLong","lemNum","div","rem","resL","longToBytes","reverse","lshift32","high","low","highNum","nLow","res","rshift32","num","intToUint","val","middle","uintToInt","sha1HashSync","hashBytes","rawDigest","sha1BytesSync","sha256HashSync","hashWords","SHA256","rsaEncrypt","publicKey","addPadding","N","modulus","E","exponent","X","encryptedBigInt","encryptedBytes","blockSize","zeroes","needPadding","padding","concat","aesEncryptSync","keyBytes","ivBytes","encryptedWords","AES","encrypt","iv","pad","NoPadding","mode","IGE","ciphertext","aesDecryptSync","decryptedWords","decrypt","gzipUncompress","nextRandomInt","maxValue","Math","floor","pqPrimeFactorization","pqBytes","minSize","ceil","hex","lWhat","pqPrimeLeemon","what","minBits","minLen","it","q","lim","a","c","g","z","x","y","j","P","Q","bytesModPow","m","xBigInt","yBigInt","mBigInt","resBigInt"],"mappings":"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","file":"bin.js","sourcesContent":["import toLower from 'ramda/src/toLower'\r\nimport Rusha from 'rusha'\r\nimport * as CryptoJSlib from '@goodmind/node-cryptojs-aes'\r\nconst { CryptoJS } = CryptoJSlib\r\nimport { inflate } from 'pako/lib/inflate'\r\n\r\nimport random from './service/secure-random'\r\n\r\n\r\nimport { eGCD_, greater, divide_, str2bigInt, equalsInt,\r\n  isZero, bigInt2str, copy_, copyInt_, rightShift_,\r\n  leftShift_, sub_, add_, powMod, bpe, one } from './vendor/leemon'\r\n\r\n\r\nconst rushaInstance = new Rusha(1024 * 1024)\r\n\r\n\r\n\r\nexport function stringToChars(str: string) {\r\n  const ln = str.length\r\n  const result: number[] = Array(ln)\r\n  for (let i = 0; i < ln; ++i)\r\n    result[i] = str.charCodeAt(i)\r\n  return result\r\n}\r\n\r\nexport const strDecToHex = str => toLower(\r\n  bigInt2str(\r\n    str2bigInt(str, 10, 0), 16\r\n  ))\r\n\r\nexport function bytesToHex(bytes = []) {\r\n  const arr = []\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    arr.push((bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16))\r\n  }\r\n  return arr.join('')\r\n}\r\n\r\nexport function bytesFromHex(hexString: string) {\r\n  const len = hexString.length\r\n  let start = 0\r\n  const bytes = []\r\n\r\n  if (hexString.length % 2) {\r\n    bytes.push(parseInt(hexString.charAt(0), 16))\r\n    start++\r\n  }\r\n\r\n  for (let i = start; i < len; i += 2) {\r\n    bytes.push(parseInt(hexString.substr(i, 2), 16))\r\n  }\r\n\r\n  return bytes\r\n}\r\n\r\nexport function bytesCmp(bytes1, bytes2) {\r\n  const len = bytes1.length\r\n  if (len !== bytes2.length) {\r\n    return false\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (bytes1[i] !== bytes2[i])\r\n      return false\r\n  }\r\n  return true\r\n}\r\n\r\nexport function bytesXor(bytes1, bytes2) {\r\n  const len = bytes1.length\r\n  const bytes = []\r\n\r\n  for (let i = 0; i < len; ++i) {\r\n    bytes[i] = bytes1[i] ^ bytes2[i]\r\n  }\r\n\r\n  return bytes\r\n}\r\n\r\nexport function bytesToWords(bytes) {\r\n  if (bytes instanceof ArrayBuffer) {\r\n    bytes = new Uint8Array(bytes)\r\n  }\r\n  const len = bytes.length\r\n  const words = []\r\n  let i\r\n  for (i = 0; i < len; i++) {\r\n    words[i >>> 2] |= bytes[i] << 24 - i % 4 * 8\r\n  }\r\n\r\n  return new CryptoJS.lib.WordArray.init(words, len)\r\n}\r\n\r\nexport function bytesFromWords(wordArray) {\r\n  const words = wordArray.words\r\n  const sigBytes = wordArray.sigBytes\r\n  const bytes = []\r\n\r\n  for (let i = 0; i < sigBytes; i++) {\r\n    bytes.push(words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)\r\n  }\r\n\r\n  return bytes\r\n}\r\n\r\n\r\nexport function bytesFromLeemonBigInt(bigInt) {\r\n  const str = bigInt2str(bigInt, 16)\r\n  return bytesFromHex(str)\r\n}\r\n\r\nexport function bytesToArrayBuffer(b) {\r\n  return (new Uint8Array(b)).buffer\r\n}\r\n\r\nexport function convertToArrayBuffer(bytes) {\r\n  // Be careful with converting subarrays!!\r\n  if (bytes instanceof ArrayBuffer) {\r\n    return bytes\r\n  }\r\n  if (bytes.buffer !== undefined &&\r\n    bytes.buffer.byteLength == bytes.length * bytes.BYTES_PER_ELEMENT) {\r\n    return bytes.buffer\r\n  }\r\n  return bytesToArrayBuffer(bytes)\r\n}\r\n\r\nexport function convertToUint8Array(bytes) {\r\n  if (bytes.buffer !== undefined)\r\n    return bytes\r\n  return new Uint8Array(bytes)\r\n}\r\n\r\nexport function convertToByteArray(bytes) {\r\n  if (Array.isArray(bytes))\r\n    return bytes\r\n  bytes = convertToUint8Array(bytes)\r\n  const newBytes = []\r\n  for (let i = 0, len = bytes.length; i < len; i++)\r\n    newBytes.push(bytes[i])\r\n  return newBytes\r\n}\r\n\r\nexport function bytesFromArrayBuffer(buffer) {\r\n  const byteView = new Uint8Array(buffer)\r\n  const bytes = Array.from( byteView )\r\n  return bytes\r\n}\r\n\r\nexport function bufferConcat(buffer1, buffer2) {\r\n  const l1 = buffer1.byteLength || buffer1.length\r\n  const l2 = buffer2.byteLength || buffer2.length\r\n  const tmp = new Uint8Array(l1 + l2)\r\n  tmp.set(\r\n    buffer1 instanceof ArrayBuffer\r\n      ? new Uint8Array(buffer1)\r\n      : buffer1,\r\n    0)\r\n  tmp.set(\r\n    buffer2 instanceof ArrayBuffer\r\n      ? new Uint8Array(buffer2)\r\n      : buffer2,\r\n    l1)\r\n\r\n  return tmp.buffer\r\n}\r\n\r\n// const dividerBig = bigint(0x100000000)\r\nconst dividerLem = str2bigInt('100000000', 16, 4)\r\n\r\n// const printTimers = (timeL, timeB, a, b, n) => setTimeout(\r\n//   () => console.log(`Timer L ${timeL} B ${timeB}`, ...a, ...b, n || ''),\r\n//   100)\r\n\r\nexport function longToInts(sLong: string) {\r\n  const lemNum = str2bigInt(sLong, 10, 6)\r\n  const div = new Array(lemNum.length)\r\n  const rem = new Array(lemNum.length)\r\n  divide_(lemNum, dividerLem, div, rem)\r\n  const resL = [\r\n    ~~bigInt2str(div, 10),\r\n    ~~bigInt2str(rem, 10)\r\n  ]\r\n  return resL\r\n}\r\n\r\nexport function longToBytes(sLong) {\r\n  return bytesFromWords({ words: longToInts(sLong), sigBytes: 8 }).reverse()\r\n}\r\n\r\nexport function lshift32(high, low) {\r\n  const highNum = str2bigInt(high.toString(), 10, 6)\r\n  const nLow = str2bigInt(low.toString(), 10, 6)\r\n  leftShift_(highNum, 32)\r\n\r\n  add_(highNum, nLow)\r\n  const res = bigInt2str(highNum, 10)\r\n  return res\r\n}\r\n\r\nexport const rshift32 = str => {\r\n  const num = str2bigInt(str, 10, 6)\r\n  rightShift_(num, 32)\r\n  return bigInt2str(num, 10)\r\n}\r\n\r\nexport function intToUint(val: string) {\r\n  let result = ~~val\r\n  if (result < 0)\r\n    result = result + 0x100000000\r\n  return result\r\n}\r\n\r\nconst middle = 0x100000000 / 2 - 1\r\n\r\nexport function uintToInt(val: number): number {\r\n  if (val > middle)\r\n    val = val - 0x100000000\r\n  return val\r\n}\r\n\r\nexport function sha1HashSync(bytes) {\r\n  // console.log(dT(), 'SHA-1 hash start', bytes.byteLength || bytes.length)\r\n  const hashBytes = rushaInstance.rawDigest(bytes).buffer\r\n  // console.log(dT(), 'SHA-1 hash finish')\r\n\r\n  return hashBytes\r\n}\r\n\r\nexport function sha1BytesSync(bytes) {\r\n  return bytesFromArrayBuffer(sha1HashSync(bytes))\r\n}\r\n\r\nexport function sha256HashSync(bytes) {\r\n  // console.log(dT(), 'SHA-2 hash start', bytes.byteLength || bytes.length)\r\n  const hashWords = CryptoJS.SHA256(bytesToWords(bytes))\r\n  // console.log(dT(), 'SHA-2 hash finish')\r\n\r\n  const hashBytes = bytesFromWords(hashWords)\r\n\r\n  return hashBytes\r\n}\r\n\r\nexport function rsaEncrypt(publicKey, bytes) {\r\n  bytes = addPadding(bytes, 255)\r\n\r\n  const N = str2bigInt(publicKey.modulus, 16, 256)\r\n  const E = str2bigInt(publicKey.exponent, 16, 256)\r\n  const X = str2bigInt(bytesToHex(bytes), 16, 256)\r\n  const encryptedBigInt = powMod(X, E, N),\r\n        encryptedBytes = bytesFromHex(bigInt2str(encryptedBigInt, 16))\r\n\r\n  return encryptedBytes\r\n}\r\n\r\nexport function addPadding(bytes, blockSize, zeroes) {\r\n  blockSize = blockSize || 16\r\n  const len = bytes.byteLength || bytes.length\r\n  const needPadding = blockSize - len % blockSize\r\n  if (needPadding > 0 && needPadding < blockSize) {\r\n    const padding = new Array(needPadding)\r\n    if (zeroes) {\r\n      for (let i = 0; i < needPadding; i++)\r\n        padding[i] = 0\r\n    } else\r\n      random(padding)\r\n\r\n    bytes = bytes instanceof ArrayBuffer\r\n      ? bufferConcat(bytes, padding)\r\n      : bytes.concat(padding)\r\n  }\r\n\r\n  return bytes\r\n}\r\n\r\nexport function aesEncryptSync(bytes, keyBytes, ivBytes) {\r\n  // console.log(dT(), 'AES encrypt start', len/*, bytesToHex(keyBytes), bytesToHex(ivBytes)*/)\r\n  bytes = addPadding(bytes)\r\n\r\n  const encryptedWords = CryptoJS.AES.encrypt(bytesToWords(bytes), bytesToWords(keyBytes), {\r\n    iv     : bytesToWords(ivBytes),\r\n    padding: CryptoJS.pad.NoPadding,\r\n    mode   : CryptoJS.mode.IGE\r\n  }).ciphertext\r\n\r\n  const encryptedBytes = bytesFromWords(encryptedWords)\r\n  // console.log(dT(), 'AES encrypt finish')\r\n\r\n  return encryptedBytes\r\n}\r\n\r\nexport function aesDecryptSync(encryptedBytes, keyBytes, ivBytes) {\r\n\r\n  // console.log(dT(), 'AES decrypt start', encryptedBytes.length)\r\n  const decryptedWords = CryptoJS.AES.decrypt({ ciphertext: bytesToWords(encryptedBytes) }, bytesToWords(keyBytes), {\r\n    iv     : bytesToWords(ivBytes),\r\n    padding: CryptoJS.pad.NoPadding,\r\n    mode   : CryptoJS.mode.IGE\r\n  })\r\n\r\n  const bytes = bytesFromWords(decryptedWords)\r\n  // console.log(dT(), 'AES decrypt finish')\r\n\r\n  return bytes\r\n}\r\n\r\nexport function gzipUncompress(bytes) {\r\n  // console.log('Gzip uncompress start')\r\n  const result = inflate(bytes)\r\n  // console.log('Gzip uncompress finish')\r\n  return result\r\n}\r\n\r\nexport function nextRandomInt(maxValue) {\r\n  return Math.floor(Math.random() * maxValue)\r\n}\r\n\r\n\r\nexport function pqPrimeFactorization(pqBytes) {\r\n  const minSize = Math.ceil(64 / bpe) + 1\r\n\r\n  // const what = new BigInteger(pqBytes)\r\n  const hex = bytesToHex(pqBytes)\r\n  const lWhat = str2bigInt(hex, 16, minSize)\r\n  const result = pqPrimeLeemon(lWhat)\r\n  return result\r\n}\r\n\r\n\r\nexport function pqPrimeLeemon(what) {\r\n  const minBits = 64\r\n  const minLen = Math.ceil(minBits / bpe) + 1\r\n  let it = 0\r\n  let q, lim\r\n  const a = new Array(minLen)\r\n  const b = new Array(minLen)\r\n  const c = new Array(minLen)\r\n  const g = new Array(minLen)\r\n  const z = new Array(minLen)\r\n  const x = new Array(minLen)\r\n  const y = new Array(minLen)\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    q = (nextRandomInt(128) & 15) + 17\r\n    copyInt_(x, nextRandomInt(1000000000) + 1)\r\n    copy_(y, x)\r\n    lim = 1 << i + 18\r\n\r\n    for (let j = 1; j < lim; j++) {\r\n      ++it\r\n      copy_(a, x)\r\n      copy_(b, x)\r\n      copyInt_(c, q)\r\n\r\n      while (!isZero(b)) {\r\n        if (b[0] & 1) {\r\n          add_(c, a)\r\n          if (greater(c, what)) {\r\n            sub_(c, what)\r\n          }\r\n        }\r\n        add_(a, a)\r\n        if (greater(a, what)) {\r\n          sub_(a, what)\r\n        }\r\n        rightShift_(b, 1)\r\n      }\r\n\r\n      copy_(x, c)\r\n      if (greater(x, y)) {\r\n        copy_(z, x)\r\n        sub_(z, y)\r\n      } else {\r\n        copy_(z, y)\r\n        sub_(z, x)\r\n      }\r\n      eGCD_(z, what, g, a, b)\r\n      if (!equalsInt(g, 1)) {\r\n        break\r\n      }\r\n      if ((j & j - 1) === 0) {\r\n        copy_(y, x)\r\n      }\r\n    }\r\n    if (greater(g, one)) {\r\n      break\r\n    }\r\n  }\r\n\r\n  divide_(what, g, x, y)\r\n\r\n  const [P, Q] =\r\n    greater(g, x)\r\n      ? [x, g]\r\n      : [g, x]\r\n\r\n  // console.log(dT(), 'done', bigInt2str(what, 10), bigInt2str(P, 10), bigInt2str(Q, 10))\r\n\r\n  return [bytesFromLeemonBigInt(P), bytesFromLeemonBigInt(Q), it]\r\n}\r\n\r\nexport function bytesModPow(x, y, m) {\r\n  const xBigInt = str2bigInt(bytesToHex(x), 16)\r\n  const yBigInt = str2bigInt(bytesToHex(y), 16)\r\n  const mBigInt = str2bigInt(bytesToHex(m), 16)\r\n  const resBigInt = powMod(xBigInt, yBigInt, mBigInt)\r\n\r\n  return bytesFromHex(bigInt2str(resBigInt, 16))\r\n}\r\n\r\n"]}