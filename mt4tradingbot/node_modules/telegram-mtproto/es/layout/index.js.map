{"version":3,"sources":["../../src/layout/index.js"],"names":["has","flip","contains","TypeClass","constructor","name","types","Set","isTypeOf","value","Argument","id","typeClass","isVector","isBare","isFlag","flagIndex","NaN","fullType","obj","result","Creator","hasFlags","params","Method","returns","Type","isFlagItself","param","type","Layout","makeCreator","elem","sign","Construct","args","entries","i","getTypeProps","pushTypeClass","arg","push","set","parseInt","creator","creators","add","funcs","typesById","makeMethod","method","instance","typeClasses","get","makeType","predicate","makeLayout","schema","methods","constructors","map","key","hasEmpty","typeDefaults","_","Map","bind","hasQuestion","hasVector","hasBare","rawType","prefix","rest","split","index","slice","isSimpleType","getFlagsRed","data","acc","e","getFlags","flagsParams","filter","reduce"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\r\n\r\nimport has from 'ramda/src/has'\r\nimport flip from 'ramda/src/flip'\r\nimport contains from 'ramda/src/contains'\r\n\r\nimport type { TLParam, SchemaElement, TLMethod, TLConstruct, TLSchema, SchemaParam } from './index.h'\r\n\r\nclass TypeClass {\r\n  name: string\r\n\r\n  types: Set<string> = new Set\r\n  constructor(name: string) {\r\n    this.name = name\r\n  }\r\n  isTypeOf(value: any): boolean {\r\n    return false\r\n  }\r\n}\r\n\r\nclass Argument {\r\n  id: string\r\n  name: string\r\n  typeClass: string\r\n  isVector: boolean\r\n  isBare: boolean\r\n  isFlag: boolean\r\n  flagIndex: number\r\n  fullType: string\r\n  constructor(id: string,\r\n              name: string,\r\n              typeClass: string,\r\n              isVector: boolean = false,\r\n              isBare: boolean = false,\r\n              isFlag: boolean = false,\r\n              flagIndex: number = NaN) {\r\n    this.name = name\r\n    this.typeClass = typeClass\r\n    this.isVector = isVector\r\n    this.isBare = isBare\r\n    this.isFlag = isFlag\r\n    this.flagIndex = flagIndex\r\n    this.id = id\r\n\r\n    this.fullType = Argument.fullType(this)\r\n  }\r\n  static fullType(obj: Argument) {\r\n    const { typeClass, isVector, isFlag, flagIndex } = obj\r\n    let result = typeClass\r\n    if (isVector)\r\n      result = `Vector<${result}>`\r\n    if (isFlag)\r\n      result = `flags.${flagIndex}?${result}`\r\n    return result\r\n  }\r\n}\r\n\r\nclass Creator {\r\n  id: number\r\n  name: string //predicate or method\r\n  hasFlags: boolean\r\n  params: Argument[]\r\n  constructor(id: number,\r\n              name: string,\r\n              hasFlags: boolean,\r\n              params: Argument[]) {\r\n    this.id = id\r\n    this.name = name\r\n    this.hasFlags = hasFlags\r\n    this.params = params\r\n  }\r\n}\r\n\r\nclass Method extends Creator {\r\n  returns: string\r\n  constructor(id: number,\r\n              name: string,\r\n              hasFlags: boolean,\r\n              params: Argument[],\r\n              returns: string) {\r\n    super(id, name, hasFlags, params)\r\n    this.returns = returns\r\n  }\r\n}\r\n\r\nclass Type extends Creator {\r\n  typeClass: string\r\n  constructor(id: number,\r\n              name: string,\r\n              hasFlags: boolean,\r\n              params: Argument[],\r\n              typeClass: string) {\r\n    super(id, name, hasFlags, params)\r\n    this.typeClass = typeClass\r\n  }\r\n}\r\n\r\nconst isFlagItself =\r\n  (param: SchemaParam) =>\r\n    param.name === 'flags' &&\r\n    param.type === '#'\r\n\r\nexport class Layout {\r\n  typeClasses: Map<string, TypeClass> = new Map\r\n  creators: Set<string> = new Set\r\n  args: Map<string, Argument> = new Map\r\n  funcs: Map<string, Method> = new Map\r\n  types: Map<string, Type> = new Map\r\n  typesById: Map<number, Type> = new Map\r\n  typeDefaults: Map<string, { _: string }> = new Map\r\n  schema: TLSchema\r\n  makeCreator(elem: SchemaElement,\r\n              name: string,\r\n              sign: string,\r\n              Construct: typeof Method | typeof Type) {\r\n    const args: Argument[] = []\r\n    let hasFlags = false\r\n    for (const [ i, param ] of elem.params.entries()) {\r\n      if (isFlagItself(param)) {\r\n        hasFlags = true\r\n        continue\r\n      }\r\n      const id = `${name}.${param.name}/${i}`\r\n      const { typeClass, isVector, isFlag, flagIndex, isBare } = getTypeProps(param.type)\r\n      if (isFlag) hasFlags = true\r\n      this.pushTypeClass(typeClass)\r\n      const arg = new Argument(id, param.name, typeClass, isVector, isBare, isFlag, flagIndex)\r\n      args.push(arg)\r\n      this.args.set(id, arg)\r\n    }\r\n    const id = parseInt(elem.id, 10)\r\n    const creator = new Construct(id, name, hasFlags, args, sign)\r\n    this.creators.add(name)\r\n    if (creator instanceof Method)\r\n      this.funcs.set(name, creator)\r\n    else if (creator instanceof Type) {\r\n      this.types.set(name, creator)\r\n      this.typesById.set(id, creator)\r\n    }\r\n  }\r\n  makeMethod(elem: TLMethod) {\r\n    const name = elem.method\r\n    const returns = elem.type\r\n    this.pushTypeClass(returns, name)\r\n    this.makeCreator(elem, name, returns, Method)\r\n  }\r\n  pushTypeClass(typeClass: string, type?: string) {\r\n    let instance\r\n    if (this.typeClasses.has(typeClass))\r\n      instance = this.typeClasses.get(typeClass)\r\n    else {\r\n      instance = new TypeClass(typeClass)\r\n      this.typeClasses.set(typeClass, instance)\r\n    }\r\n    if (type && instance)\r\n      instance.types.add(type)\r\n  }\r\n  makeType(elem: TLConstruct) {\r\n    const name = elem.predicate\r\n    const typeClass = elem.type\r\n    this.pushTypeClass(typeClass, name)\r\n    this.makeCreator(elem, name, typeClass, Type)\r\n  }\r\n  makeLayout(schema: TLSchema) {\r\n    const { methods, constructors } = schema\r\n    constructors.map(this.makeType)\r\n    methods.map(this.makeMethod)\r\n    for (const [ key, type ] of this.types.entries())\r\n      if (hasEmpty(key))\r\n        this.typeDefaults.set(type.typeClass, { _: key })\r\n  }\r\n  constructor(schema: TLSchema) {\r\n    //$FlowIssue\r\n    this.makeType = this.makeType.bind(this)\r\n    //$FlowIssue\r\n    this.makeMethod = this.makeMethod.bind(this)\r\n    // this.schema = schema\r\n    this.makeLayout(schema)\r\n  }\r\n}\r\nconst hasEmpty = contains('Empty')\r\nconst hasQuestion = contains('?')\r\nconst hasVector = contains('<')\r\nconst hasBare = contains('%')\r\n\r\nexport const getTypeProps = (rawType: string) => {\r\n  const result = {\r\n    typeClass: rawType,\r\n    isVector : false,\r\n    isFlag   : false,\r\n    flagIndex: NaN,\r\n    isBare   : false\r\n  }\r\n  if (hasQuestion(rawType)) {\r\n    const [ prefix, rest ] = rawType.split('?')\r\n    const [ , index ] = prefix.split('.')\r\n    result.isFlag = true\r\n    result.flagIndex = +index\r\n    result.typeClass = rest\r\n  }\r\n  if (hasVector(result.typeClass)) {\r\n    result.isVector = true\r\n    result.typeClass = result.typeClass.slice(7, -1)\r\n  }\r\n  if (hasBare(result.typeClass)) {\r\n    result.isBare = true\r\n    result.typeClass = result.typeClass.slice(1)\r\n  }\r\n  return result\r\n}\r\n\r\nexport const isSimpleType: (type: string) => boolean =\r\n  flip(contains)(\r\n    ['int', /*'long',*/ 'string', /*'double', */'true', /*'bytes'*/])\r\n\r\nconst getFlagsRed =\r\n  (data: Object) =>\r\n    (acc: number, { name, flagIndex }: Argument) =>\r\n        has(name, data)\r\n          ? acc + 2 ** flagIndex\r\n          : acc\r\n\r\nexport const getFlags = ({ params }: Creator) => {\r\n  const flagsParams =\r\n    params.filter(\r\n      (e: Argument) => e.isFlag)\r\n\r\n  return (data: Object) =>\r\n    flagsParams\r\n      .reduce(\r\n        getFlagsRed(data),\r\n        0)\r\n}\r\n\r\nexport default Layout"]}