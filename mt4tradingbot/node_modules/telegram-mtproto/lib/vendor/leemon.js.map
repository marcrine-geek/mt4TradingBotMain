{"version":3,"sources":["../../src/vendor/leemon.js"],"names":["powMod","sub","eGCD_","greater","divide_","int2bigInt","str2bigInt","equalsInt","isZero","bigInt2str","dup","copy_","copyInt_","addInt_","rightShift_","leftShift_","sub_","add_","bpe","mask","radix","digitsStr","one","t","Array","ss","s0","s3","s4","s5","s6","s7","T","sa","mr_x1","mr_r","mr_a","eg_v","eg_u","eg_A","eg_B","eg_C","eg_D","primes","pows","s_i","s_i2","s_R","s_rm","s_q","s_n1","s_a","s_r2","s_n","s_b","s_d","s_x1","s_x2","s_aa","rpprb","k","buff","findPrimes","n","i","s","p","ans","millerRabinInt","x","b","length","millerRabin","j","powMod_","equals","squareMod_","bitSize","z","w","expand","randTruePrime","randTruePrime_","trim","randProbPrime","randProbPrimeRounds","divisible","B","randBigInt_","modInt","mod","mod_","addInt","mult","y","mult_","add","inverseMod","inverseMod_","multMod","multMod_","c","m","pm","dd","r","zz","recSize","Math","pow","recLimit","floor","random","carry_","multInt_","GCD_","randBigInt","a","GCD","xc","yc","xp","yp","A","C","D","q","sing","qp","linComb_","max","halve_","negative","inverseModInt","inverseModInt_","v","g","greaterShift","shift","kx","ky","y1","y2","subShift_","linCombShift_","addShift_","bits","minSize","ceil","base","d","kk","parseInt","indexOf","substring","divInt_","len","ys","kn","k1","k2","np","mont_","ui","ks"],"mappings":";;;;;QA6ZgBA,M,GAAAA,M;QAOAC,G,GAAAA,G;QAyVAC,K,GAAAA,K;QA6FAC,O,GAAAA,O;QAyBAC,O,GAAAA,O;QAwFAC,U,GAAAA,U;QAaAC,U,GAAAA,U;QAmDAC,S,GAAAA,S;QA+BAC,M,GAAAA,M;QAUAC,U,GAAAA,U;QAyBAC,G,GAAAA,G;QAQAC,K,GAAAA,K;QAUAC,Q,GAAAA,Q;QAWAC,O,GAAAA,O;QAmBAC,W,GAAAA,W;QA0BAC,U,GAAAA,U;QA4HAC,I,GAAAA,I;QAiBAC,I,GAAAA,I;AApyChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","file":"leemon.js","sourcesContent":["////////////////////////////////////////////////////////////////////////////////////////\r\n// Big Integer Library v. 5.5\r\n// Created 2000, last modified 2013\r\n// Leemon Baird\r\n// www.leemon.com\r\n//\r\n// Version history:\r\n// v 5.5  17 Mar 2013\r\n//   - two lines of a form like \"if (x<0) x+=n\" had the \"if\" changed to \"while\" to\r\n//     handle the case when x<-n. (Thanks to James Ansell for finding that bug)\r\n// v 5.4  3 Oct 2009\r\n//   - added \"var i\" to greaterShift() so i is not global. (Thanks to PŽter Szab— for finding that bug)\r\n//\r\n// v 5.3  21 Sep 2009\r\n//   - added randProbPrime(k) for probable primes\r\n//   - unrolled loop in mont_ (slightly faster)\r\n//   - millerRabin now takes a bigInt parameter rather than an int\r\n//\r\n// v 5.2  15 Sep 2009\r\n//   - fixed capitalization in call to int2bigInt in randBigInt\r\n//     (thanks to Emili Evripidou, Reinhold Behringer, and Samuel Macaleese for finding that bug)\r\n//\r\n// v 5.1  8 Oct 2007\r\n//   - renamed inverseModInt_ to inverseModInt since it doesn't change its parameters\r\n//   - added functions GCD and randBigInt, which call GCD_ and randBigInt_\r\n//   - fixed a bug found by Rob Visser (see comment with his name below)\r\n//   - improved comments\r\n//\r\n// This file is public domain.   You can use it for any purpose without restriction.\r\n// I do not guarantee that it is correct, so use it at your own risk.  If you use\r\n// it for something interesting, I'd appreciate hearing about it.  If you find\r\n// any bugs or make any improvements, I'd appreciate hearing about those too.\r\n// It would also be nice if my name and URL were left in the comments.  But none\r\n// of that is required.\r\n//\r\n// This code defines a bigInt library for arbitrary-precision integers.\r\n// A bigInt is an array of integers storing the value in chunks of bpe bits,\r\n// little endian (buff[0] is the least significant word).\r\n// Negative bigInts are stored two's complement.  Almost all the functions treat\r\n// bigInts as nonnegative.  The few that view them as two's complement say so\r\n// in their comments.  Some functions assume their parameters have at least one\r\n// leading zero element. Functions with an underscore at the end of the name put\r\n// their answer into one of the arrays passed in, and have unpredictable behavior\r\n// in case of overflow, so the caller must make sure the arrays are big enough to\r\n// hold the answer.  But the average user should never have to call any of the\r\n// underscored functions.  Each important underscored function has a wrapper function\r\n// of the same name without the underscore that takes care of the details for you.\r\n// For each underscored function where a parameter is modified, that same variable\r\n// must not be used as another argument too.  So, you cannot square x by doing\r\n// multMod_(x,x,n).  You must use squareMod_(x,n) instead, or do y=dup(x); multMod_(x,y,n).\r\n// Or simply use the multMod(x,x,n) function without the underscore, where\r\n// such issues never arise, because non-underscored functions never change\r\n// their parameters; they always allocate new memory for the answer that is returned.\r\n//\r\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\r\n// For most functions, if it needs a BigInt as a local variable it will actually use\r\n// a global, and will only allocate to it only when it's not the right size.  This ensures\r\n// that when a function is called repeatedly with same-sized parameters, it only allocates\r\n// memory on the first call.\r\n//\r\n// Note that for cryptographic purposes, the calls to Math.random() must\r\n// be replaced with calls to a better pseudorandom number generator.\r\n//\r\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\r\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer\r\n// can be negative.  Negative bigInts are 2s complement.\r\n//\r\n// The following functions do not modify their inputs.\r\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\r\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\r\n// Those returning boolean or int will not allocate memory except possibly on the first\r\n// time they're called with a given parameter size.\r\n//\r\n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.\r\n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\r\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\r\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\r\n// bigInt  dup(x)                 //return a copy of bigInt x\r\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\r\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\r\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\r\n// Array   findPrimes(n)          //return array of all primes less than integer n\r\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\r\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\r\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\r\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\r\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\r\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\r\n// boolean isZero(x)              //is the bigInt x equal to zero?\r\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\r\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\r\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\r\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\r\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\r\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\r\n// boolean negative(x)            //is bigInt x negative?\r\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\r\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\r\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\r\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\r\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\r\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\r\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\r\n//\r\n//\r\n// The following functions each have a non-underscored version, which most users should call instead.\r\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array\r\n// passed in is large enough to hold the result.\r\n//\r\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\r\n// void    add_(x,y)             //do x=x+y for bigInts x and y\r\n// void    copy_(x,y)            //do x=y on bigInts x and y\r\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\r\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\r\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\r\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\r\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\r\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\r\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\r\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\r\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\r\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\r\n//\r\n// The following functions do NOT have a non-underscored version.\r\n// They each write a bigInt result to one or more parameters.  The caller is responsible for\r\n// ensuring the arrays passed in are large enough to hold the results.\r\n//\r\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\r\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\r\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\r\n// int  eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\r\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\r\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\r\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\r\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\r\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\r\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\r\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\r\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\r\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\r\n//\r\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\r\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\r\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\r\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\r\n//    mont_()             = algorithm 14.36, Montgomery multiplication\r\n//    divide_()           = algorithm 14.20  Multiple-precision division\r\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\r\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\r\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\r\n//\r\n// Profiling shows:\r\n//     randTruePrime_() spends:\r\n//         10% of its time in calls to powMod_()\r\n//         85% of its time in calls to millerRabin()\r\n//     millerRabin() spends:\r\n//         99% of its time in calls to powMod_()   (always with a base of 2)\r\n//     powMod_() spends:\r\n//         94% of its time in calls to mont_()  (almost always with x==y)\r\n//\r\n// This suggests there are several ways to speed up this library slightly:\r\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\r\n//         -- this should especially focus on being fast when raising 2 to a power mod n\r\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\r\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\r\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\r\n//       within the loop when all the parameters are the same length.\r\n//\r\n// There are several ideas that look like they wouldn't help much at all:\r\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\r\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\r\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\r\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\r\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\r\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\r\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\r\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\r\n//       Montgomery reduction, but that's obviously wrong.\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//globals\r\nexport var bpe=0;         //bits stored per array element\r\nvar mask=0;        //AND this with an array element to chop it down to bpe bits\r\nvar radix=mask+1;  //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\r\n\r\n//the digits for converting to different bases\r\nvar digitsStr='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\\\'\\\"+-';\r\n\r\n//initialize the global variables\r\nfor (bpe=0; (1<<(bpe+1)) > (1<<bpe); bpe++);  //bpe=number of bits in the mantissa on this platform\r\nbpe>>=1;                   //bpe=number of bits in one element of the array representing the bigInt\r\nmask=(1<<bpe)-1;           //AND the mask with an integer to get its bpe least significant bits\r\nradix=mask+1;              //2^bpe.  a single 1 bit to the left of the first bit of mask\r\nexport var one=int2bigInt(1, 1, 1);     //constant used in powMod_()\r\n\r\n//the following global variables are scratchpad memory to\r\n//reduce dynamic memory allocation in the inner loop\r\nvar t=new Array(0);\r\nvar ss=t;       //used in mult_()\r\nvar s0=t;       //used in multMod_(), squareMod_()\r\n// var s1=t;       //used in powMod_(), multMod_(), squareMod_()\r\n// var s2=t;       //used in powMod_(), multMod_()\r\nvar s3=t;       //used in powMod_()\r\nvar s4=t, s5=t; //used in mod_()\r\nvar s6=t;       //used in bigInt2str()\r\nvar s7=t;       //used in powMod_()\r\nvar T=t;        //used in GCD_()\r\nvar sa=t;       //used in mont_()\r\nvar mr_x1=t, mr_r=t, mr_a=t,                                      //used in millerRabin()\r\n    eg_v=t, eg_u=t, eg_A=t, eg_B=t, eg_C=t, eg_D=t                //used in eGCD_(), inverseMod_()\r\n    //, md_q1=t, md_q2=t, md_q3=t, md_r=t, md_r1=t, md_r2=t, md_tt=t, //used in mod_()\r\n\r\n    , primes=t, pows=t, s_i=t, s_i2=t, s_R=t, s_rm=t, s_q=t, s_n1=t,\r\n    s_a=t, s_r2=t, s_n=t, s_b=t, s_d=t, s_x1=t, s_x2=t, s_aa=t, //used in randTruePrime_()\r\n\r\n    rpprb=t; //used in randProbPrimeRounds() (which also uses \"primes\")\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nvar k, buff;\r\n\r\n//return array of all primes less than integer n\r\nfunction findPrimes(n) {\r\n  var i, s, p, ans;\r\n  s=new Array(n);\r\n  for (i=0; i<n; i++)\r\n    s[i]=0;\r\n  s[0]=2;\r\n  p=0;    //first p elements of s are primes, the rest are a sieve\r\n  for (;s[p]<n;) {                  //s[p] is the pth prime\r\n    for (i=s[p]*s[p]; i<n; i+=s[p]) //mark multiples of s[p]\r\n      s[i]=1;\r\n    p++;\r\n    s[p]=s[p-1]+1;\r\n    for (; s[p]<n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)\r\n  }\r\n  ans=new Array(p);\r\n  for (i=0; i<p; i++)\r\n    ans[i]=s[i];\r\n  return ans;\r\n}\r\n\r\n\r\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\r\n//x is a bigInt, and b is an integer, with b<x\r\nfunction millerRabinInt(x, b) {\r\n  if (mr_x1.length!=x.length) {\r\n    mr_x1=dup(x);\r\n    mr_r=dup(x);\r\n    mr_a=dup(x);\r\n  }\r\n\r\n  copyInt_(mr_a, b);\r\n  return millerRabin(x, mr_a);\r\n}\r\n\r\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\r\n//x and b are bigInts with b<x\r\nfunction millerRabin(x, b) {\r\n  var i, j, k, s;\r\n\r\n  if (mr_x1.length!=x.length) {\r\n    mr_x1=dup(x);\r\n    mr_r=dup(x);\r\n    mr_a=dup(x);\r\n  }\r\n\r\n  copy_(mr_a, b);\r\n  copy_(mr_r, x);\r\n  copy_(mr_x1, x);\r\n\r\n  addInt_(mr_r, -1);\r\n  addInt_(mr_x1, -1);\r\n\r\n  //s=the highest power of two that divides mr_r\r\n  k=0;\r\n  for (i=0; i<mr_r.length; i++)\r\n    for (j=1; j<mask; j<<=1)\r\n      if (x[i] & j) {\r\n        s=(k<mr_r.length+bpe ? k : 0);\r\n        i=mr_r.length;\r\n        j=mask;\r\n      } else\r\n        k++;\r\n\r\n  if (s)\r\n    rightShift_(mr_r, s);\r\n\r\n  powMod_(mr_a, mr_r, x);\r\n\r\n  if (!equalsInt(mr_a, 1) && !equals(mr_a, mr_x1)) {\r\n    j=1;\r\n    while (j<=s-1 && !equals(mr_a, mr_x1)) {\r\n      squareMod_(mr_a, x);\r\n      if (equalsInt(mr_a, 1)) {\r\n        return 0;\r\n      }\r\n      j++;\r\n    }\r\n    if (!equals(mr_a, mr_x1)) {\r\n      return 0;\r\n    }\r\n  }\r\n  return 1;\r\n}\r\n\r\n//returns how many bits long the bigInt is, not counting leading zeros.\r\nfunction bitSize(x) {\r\n  var j, z, w;\r\n  for (j=x.length-1; (x[j]==0) && (j>0); j--);\r\n  for (z=0, w=x[j]; w; (w>>=1), z++);\r\n  z+=bpe*j;\r\n  return z;\r\n}\r\n\r\n//return a copy of x with at least n elements, adding leading zeros if needed\r\nfunction expand(x, n) {\r\n  var ans=int2bigInt(0, (x.length>n ? x.length : n)*bpe, 0);\r\n  copy_(ans, x);\r\n  return ans;\r\n}\r\n\r\n//return a k-bit true random prime using Maurer's algorithm.\r\nfunction randTruePrime(k) {\r\n  var ans=int2bigInt(0, k, 0);\r\n  randTruePrime_(ans, k);\r\n  return trim(ans, 1);\r\n}\r\n\r\n//return a k-bit random probable prime with probability of error < 2^-80\r\nfunction randProbPrime(k) {\r\n  if (k>=600) return randProbPrimeRounds(k, 2); //numbers from HAC table 4.3\r\n  if (k>=550) return randProbPrimeRounds(k, 4);\r\n  if (k>=500) return randProbPrimeRounds(k, 5);\r\n  if (k>=400) return randProbPrimeRounds(k, 6);\r\n  if (k>=350) return randProbPrimeRounds(k, 7);\r\n  if (k>=300) return randProbPrimeRounds(k, 9);\r\n  if (k>=250) return randProbPrimeRounds(k, 12); //numbers from HAC table 4.4\r\n  if (k>=200) return randProbPrimeRounds(k, 15);\r\n  if (k>=150) return randProbPrimeRounds(k, 18);\r\n  if (k>=100) return randProbPrimeRounds(k, 27);\r\n              return randProbPrimeRounds(k, 40); //number from HAC remark 4.26 (only an estimate)\r\n}\r\n\r\n//return a k-bit probable random prime using n rounds of Miller Rabin (after trial division with small primes)\r\nfunction randProbPrimeRounds(k, n) {\r\n  var ans, i, divisible, B;\r\n  B=30000;  //B is largest prime to use in trial division\r\n  ans=int2bigInt(0, k, 0);\r\n\r\n  //optimization: try larger and smaller B to find the best limit.\r\n\r\n  if (primes.length==0)\r\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\r\n\r\n  if (rpprb.length!=ans.length)\r\n    rpprb=dup(ans);\r\n\r\n  for (;;) { //keep trying random values for ans until one appears to be prime\r\n    //optimization: pick a random number times L=2*3*5*...*p, plus a\r\n    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\r\n    //   This can reduce the amount of random number generation.\r\n\r\n    randBigInt_(ans, k, 0); //ans = a random odd number to check\r\n    ans[0] |= 1;\r\n    divisible=0;\r\n\r\n    //check ans for divisibility by small primes up to B\r\n    for (i=0; (i<primes.length) && (primes[i]<=B); i++)\r\n      if (modInt(ans, primes[i])==0 && !equalsInt(ans, primes[i])) {\r\n        divisible=1;\r\n        break;\r\n      }\r\n\r\n    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\r\n\r\n    //do n rounds of Miller Rabin, with random bases less than ans\r\n    for (i=0; i<n && !divisible; i++) {\r\n      randBigInt_(rpprb, k, 0);\r\n      while (!greater(ans, rpprb)) //pick a random rpprb that's < ans\r\n        randBigInt_(rpprb, k, 0);\r\n      if (!millerRabin(ans, rpprb))\r\n        divisible=1;\r\n    }\r\n\r\n    if (!divisible)\r\n      return ans;\r\n  }\r\n}\r\n\r\n//return a new bigInt equal to (x mod n) for bigInts x and n.\r\nfunction mod(x, n) {\r\n  var ans=dup(x);\r\n  mod_(ans, n);\r\n  return trim(ans, 1);\r\n}\r\n\r\n//return (x+n) where x is a bigInt and n is an integer.\r\nfunction addInt(x, n) {\r\n  var ans=expand(x, x.length+1);\r\n  addInt_(ans, n);\r\n  return trim(ans, 1);\r\n}\r\n\r\n//return x*y for bigInts x and y. This is faster when y<x.\r\nfunction mult(x, y) {\r\n  var ans=expand(x, x.length+y.length);\r\n  mult_(ans, y);\r\n  return trim(ans, 1);\r\n}\r\n\r\n//return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\r\nexport function powMod(x, y, n) {\r\n  var ans=expand(x, n.length);\r\n  powMod_(ans, trim(y, 2), trim(n, 2), 0);  //this should work without the trim, but doesn't\r\n  return trim(ans, 1);\r\n}\r\n\r\n//return (x-y) for bigInts x and y.  Negative answers will be 2s complement\r\nexport function sub(x, y) {\r\n  var ans=expand(x, (x.length>y.length ? x.length+1 : y.length+1));\r\n  sub_(ans, y);\r\n  return trim(ans, 1);\r\n}\r\n\r\n//return (x+y) for bigInts x and y.\r\nfunction add(x, y) {\r\n  var ans=expand(x, (x.length>y.length ? x.length+1 : y.length+1));\r\n  add_(ans, y);\r\n  return trim(ans, 1);\r\n}\r\n\r\n//return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\r\nfunction inverseMod(x, n) {\r\n  var ans=expand(x, n.length);\r\n  var s;\r\n  s=inverseMod_(ans, n);\r\n  return s ? trim(ans, 1) : null;\r\n}\r\n\r\n//return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\r\nfunction multMod(x, y, n) {\r\n  var ans=expand(x, n.length);\r\n  multMod_(ans, y, n);\r\n  return trim(ans, 1);\r\n}\r\n\r\n//generate a k-bit true random prime using Maurer's algorithm,\r\n//and put it into ans.  The bigInt ans must be large enough to hold it.\r\nfunction randTruePrime_(ans, k) {\r\n  var c, m, pm, dd, j, r, B, divisible, z, zz, recSize;\r\n  var w;\r\n  if (primes.length==0)\r\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\r\n\r\n  if (pows.length==0) {\r\n    pows=new Array(512);\r\n    for (j=0; j<512; j++) {\r\n      pows[j]=Math.pow(2, j/511.-1.);\r\n    }\r\n  }\r\n\r\n  //c and m should be tuned for a particular machine and value of k, to maximize speed\r\n  c=0.1;  //c=0.1 in HAC\r\n  m=20;   //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\r\n  var recLimit=20; //stop recursion when k <=recLimit.  Must have recLimit >= 2\r\n\r\n  if (s_i2.length!=ans.length) {\r\n    s_i2=dup(ans);\r\n    s_R =dup(ans);\r\n    s_n1=dup(ans);\r\n    s_r2=dup(ans);\r\n    s_d =dup(ans);\r\n    s_x1=dup(ans); //TODO Seems like a bug in eslint, reports as unused\r\n    s_x2=dup(ans);\r\n    s_b =dup(ans);\r\n    s_n =dup(ans);\r\n    s_i =dup(ans);\r\n    s_rm=dup(ans);\r\n    s_q =dup(ans);\r\n    s_a =dup(ans);\r\n    s_aa=dup(ans);\r\n  }\r\n\r\n  if (k <= recLimit) {  //generate small random primes by trial division up to its square root\r\n    pm=(1<<((k+2)>>1))-1; //pm is binary number with all ones, just over sqrt(2^k)\r\n    copyInt_(ans, 0);\r\n    for (dd=1; dd;) {\r\n      dd=0;\r\n      ans[0]= 1 | (1<<(k-1)) | Math.floor(Math.random()*(1<<k));  //random, k-bit, odd integer, with msb 1\r\n      for (j=1; (j<primes.length) && ((primes[j]&pm)==primes[j]); j++) { //trial division by all primes 3...sqrt(2^k)\r\n        if (0==(ans[0]%primes[j])) {\r\n          dd=1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    carry_(ans);\r\n    return;\r\n  }\r\n\r\n  B=c*k*k;    //try small primes up to B (or all the primes[] array if the largest is less than B).\r\n  if (k>2*m)  //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\r\n    for (r=1; k-k*r<=m; )\r\n      r=pows[Math.floor(Math.random()*512)];   //r=Math.pow(2,Math.random()-1);\r\n  else\r\n    r=.5;\r\n\r\n  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\r\n\r\n  recSize=Math.floor(r*k)+1;\r\n\r\n  randTruePrime_(s_q, recSize);\r\n  copyInt_(s_i2, 0);\r\n  s_i2[Math.floor((k-2)/bpe)] |= (1<<((k-2)%bpe));   //s_i2=2^(k-2)\r\n  divide_(s_i2, s_q, s_i, s_rm);                        //s_i=floor((2^(k-1))/(2q))\r\n\r\n  z=bitSize(s_i);\r\n\r\n  for (;;) {\r\n    for (;;) {  //generate z-bit numbers until one falls in the range [0,s_i-1]\r\n      randBigInt_(s_R, z, 0);\r\n      if (greater(s_i, s_R))\r\n        break;\r\n    }                //now s_R is in the range [0,s_i-1]\r\n    addInt_(s_R, 1);  //now s_R is in the range [1,s_i]\r\n    add_(s_R, s_i);   //now s_R is in the range [s_i+1,2*s_i]\r\n\r\n    copy_(s_n, s_q);\r\n    mult_(s_n, s_R);\r\n    multInt_(s_n, 2);\r\n    addInt_(s_n, 1);    //s_n=2*s_R*s_q+1\r\n\r\n    copy_(s_r2, s_R);\r\n    multInt_(s_r2, 2);  //s_r2=2*s_R\r\n\r\n    //check s_n for divisibility by small primes up to B\r\n    for (divisible=0, j=0; (j<primes.length) && (primes[j]<B); j++)\r\n      if (modInt(s_n, primes[j])==0 && !equalsInt(s_n, primes[j])) {\r\n        divisible=1;\r\n        break;\r\n      }\r\n\r\n    if (!divisible)    //if it passes small primes check, then try a single Miller-Rabin base 2\r\n      if (!millerRabinInt(s_n, 2)) //this line represents 75% of the total runtime for randTruePrime_\r\n        divisible=1;\r\n\r\n    if (!divisible) {  //if it passes that test, continue checking s_n\r\n      addInt_(s_n, -3);\r\n      for (j=s_n.length-1; (s_n[j]==0) && (j>0); j--);  //strip leading zeros\r\n      for (zz=0, w=s_n[j]; w; (w>>=1), zz++);\r\n      zz+=bpe*j;                             //zz=number of bits in s_n, ignoring leading zeros\r\n      for (;;) {  //generate z-bit numbers until one falls in the range [0,s_n-1]\r\n        randBigInt_(s_a, zz, 0);\r\n        if (greater(s_n, s_a))\r\n          break;\r\n      }                //now s_a is in the range [0,s_n-1]\r\n      addInt_(s_n, 3);  //now s_a is in the range [0,s_n-4]\r\n      addInt_(s_a, 2);  //now s_a is in the range [2,s_n-2]\r\n      copy_(s_b, s_a);\r\n      copy_(s_n1, s_n);\r\n      addInt_(s_n1, -1);\r\n      powMod_(s_b, s_n1, s_n);   //s_b=s_a^(s_n-1) modulo s_n\r\n      addInt_(s_b, -1);\r\n      if (isZero(s_b)) {\r\n        copy_(s_b, s_a);\r\n        powMod_(s_b, s_r2, s_n);\r\n        addInt_(s_b, -1);\r\n        copy_(s_aa, s_n);\r\n        copy_(s_d, s_b);\r\n        GCD_(s_d, s_n);  //if s_b and s_n are relatively prime, then s_n is a prime\r\n        if (equalsInt(s_d, 1)) {\r\n          copy_(ans, s_aa);\r\n          return;     //if we've made it this far, then s_n is absolutely guaranteed to be prime\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n//Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\r\nfunction randBigInt(n, s) {\r\n  var a, b;\r\n  a=Math.floor((n-1)/bpe)+2; //# array elements to hold the BigInt with a leading 0 element\r\n  b=int2bigInt(0, 0, a);\r\n  randBigInt_(b, n, s);\r\n  return b;\r\n}\r\n\r\n//Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\r\n//Array b must be big enough to hold the result. Must have n>=1\r\nfunction randBigInt_(b, n, s) {\r\n  var i, a;\r\n  for (i=0; i<b.length; i++)\r\n    b[i]=0;\r\n  a=Math.floor((n-1)/bpe)+1; //# array elements to hold the BigInt\r\n  for (i=0; i<a; i++) {\r\n    b[i]=Math.floor(Math.random()*(1<<(bpe-1)));\r\n  }\r\n  b[a-1] &= (2<<((n-1)%bpe))-1;\r\n  if (s==1)\r\n    b[a-1] |= (1<<((n-1)%bpe));\r\n}\r\n\r\n//Return the greatest common divisor of bigInts x and y (each with same number of elements).\r\nfunction GCD(x, y) {\r\n  var xc, yc;\r\n  xc=dup(x);\r\n  yc=dup(y);\r\n  GCD_(xc, yc);\r\n  return xc;\r\n}\r\n\r\n//set x to the greatest common divisor of bigInts x and y (each with same number of elements).\r\n//y is destroyed.\r\nfunction GCD_(x, y) {\r\n  var i, xp, yp, A, B, C, D, q, sing;\r\n  var qp;\r\n  if (T.length!=x.length)\r\n    T=dup(x);\r\n\r\n  sing=1;\r\n  while (sing) { //while y has nonzero elements other than y[0]\r\n    sing=0;\r\n    for (i=1; i<y.length; i++) //check if y has nonzero elements other than 0\r\n      if (y[i]) {\r\n        sing=1;\r\n        break;\r\n      }\r\n    if (!sing) break; //quit when y all zero elements except possibly y[0]\r\n\r\n    for (i=x.length; !x[i] && i>=0; i--);  //find most significant element of x\r\n    xp=x[i];\r\n    yp=y[i];\r\n    A=1; B=0; C=0; D=1;\r\n    while ((yp+C) && (yp+D)) {\r\n      q =Math.floor((xp+A)/(yp+C));\r\n      qp=Math.floor((xp+B)/(yp+D));\r\n      if (q!=qp)\r\n        break;\r\n      t= A-q*C;   A=C;   C=t;    //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)\r\n      t= B-q*D;   B=D;   D=t;\r\n      t=xp-q*yp; xp=yp; yp=t;\r\n    }\r\n    if (B) {\r\n      copy_(T, x);\r\n      linComb_(x, y, A, B); //x=A*x+B*y\r\n      linComb_(y, T, D, C); //y=D*y+C*T\r\n    } else {\r\n      mod_(x, y);\r\n      copy_(T, x);\r\n      copy_(x, y);\r\n      copy_(y, T);\r\n    }\r\n  }\r\n  if (y[0]==0)\r\n    return;\r\n  t=modInt(x, y[0]);\r\n  copyInt_(x, y[0]);\r\n  y[0]=t;\r\n  while (y[0]) {\r\n    x[0]%=y[0];\r\n    t=x[0]; x[0]=y[0]; y[0]=t;\r\n  }\r\n}\r\n\r\n//do x=x**(-1) mod n, for bigInts x and n.\r\n//If no inverse exists, it sets x to zero and returns 0, else it returns 1.\r\n//The x array must be at least as large as the n array.\r\nfunction inverseMod_(x, n) {\r\n  var k=1+2*Math.max(x.length, n.length);\r\n\r\n  if (!(x[0]&1)  && !(n[0]&1)) {  //if both inputs are even, then inverse doesn't exist\r\n    copyInt_(x, 0);\r\n    return 0;\r\n  }\r\n\r\n  if (eg_u.length!=k) {\r\n    eg_u=new Array(k);\r\n    eg_v=new Array(k);\r\n    eg_A=new Array(k);\r\n    eg_B=new Array(k);\r\n    eg_C=new Array(k);\r\n    eg_D=new Array(k);\r\n  }\r\n\r\n  copy_(eg_u, x);\r\n  copy_(eg_v, n);\r\n  copyInt_(eg_A, 1);\r\n  copyInt_(eg_B, 0);\r\n  copyInt_(eg_C, 0);\r\n  copyInt_(eg_D, 1);\r\n  for (;;) {\r\n    while (!(eg_u[0]&1)) {  //while eg_u is even\r\n      halve_(eg_u);\r\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if eg_A==eg_B==0 mod 2\r\n        halve_(eg_A);\r\n        halve_(eg_B);\r\n      } else {\r\n        add_(eg_A, n);  halve_(eg_A);\r\n        sub_(eg_B, x);  halve_(eg_B);\r\n      }\r\n    }\r\n\r\n    while (!(eg_v[0]&1)) {  //while eg_v is even\r\n      halve_(eg_v);\r\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if eg_C==eg_D==0 mod 2\r\n        halve_(eg_C);\r\n        halve_(eg_D);\r\n      } else {\r\n        add_(eg_C, n);  halve_(eg_C);\r\n        sub_(eg_D, x);  halve_(eg_D);\r\n      }\r\n    }\r\n\r\n    if (!greater(eg_v, eg_u)) { //eg_v <= eg_u\r\n      sub_(eg_u, eg_v);\r\n      sub_(eg_A, eg_C);\r\n      sub_(eg_B, eg_D);\r\n    } else {                   //eg_v > eg_u\r\n      sub_(eg_v, eg_u);\r\n      sub_(eg_C, eg_A);\r\n      sub_(eg_D, eg_B);\r\n    }\r\n\r\n    if (equalsInt(eg_u, 0)) {\r\n      while (negative(eg_C)) //make sure answer is nonnegative\r\n        add_(eg_C, n);\r\n      copy_(x, eg_C);\r\n\r\n      if (!equalsInt(eg_v, 1)) { //if GCD_(x,n)!=1, then there is no inverse\r\n        copyInt_(x, 0);\r\n        return 0;\r\n      }\r\n      return 1;\r\n    }\r\n  }\r\n}\r\n\r\n//return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\r\nfunction inverseModInt(x, n) {\r\n  var a=1, b=0, t;\r\n  for (;;) {\r\n    if (x==1) return a;\r\n    if (x==0) return 0;\r\n    b-=a*Math.floor(n/x);\r\n    n%=x;\r\n\r\n    if (n==1) return b; //to avoid negatives, change this b to n-b, and each -= to +=\r\n    if (n==0) return 0;\r\n    a-=b*Math.floor(x/n);\r\n    x%=n;\r\n  }\r\n}\r\n\r\n//this deprecated function is for backward compatibility only.\r\nfunction inverseModInt_(x, n) {\r\n   return inverseModInt(x, n);\r\n}\r\n\r\n\r\n//Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\r\n//     v = GCD_(x,y) = a*x-b*y\r\n//The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\r\nexport function eGCD_(x, y, v, a, b) {\r\n  var g=0;\r\n  var k=Math.max(x.length, y.length);\r\n  if (eg_u.length!=k) {\r\n    eg_u=new Array(k);\r\n    eg_A=new Array(k);\r\n    eg_B=new Array(k);\r\n    eg_C=new Array(k);\r\n    eg_D=new Array(k);\r\n  }\r\n  while (!(x[0]&1)  && !(y[0]&1)) {  //while x and y both even\r\n    halve_(x);\r\n    halve_(y);\r\n    g++;\r\n  }\r\n  copy_(eg_u, x);\r\n  copy_(v, y);\r\n  copyInt_(eg_A, 1);\r\n  copyInt_(eg_B, 0);\r\n  copyInt_(eg_C, 0);\r\n  copyInt_(eg_D, 1);\r\n  for (;;) {\r\n    while (!(eg_u[0]&1)) {  //while u is even\r\n      halve_(eg_u);\r\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if A==B==0 mod 2\r\n        halve_(eg_A);\r\n        halve_(eg_B);\r\n      } else {\r\n        add_(eg_A, y);  halve_(eg_A);\r\n        sub_(eg_B, x);  halve_(eg_B);\r\n      }\r\n    }\r\n\r\n    while (!(v[0]&1)) {  //while v is even\r\n      halve_(v);\r\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if C==D==0 mod 2\r\n        halve_(eg_C);\r\n        halve_(eg_D);\r\n      } else {\r\n        add_(eg_C, y);  halve_(eg_C);\r\n        sub_(eg_D, x);  halve_(eg_D);\r\n      }\r\n    }\r\n\r\n    if (!greater(v, eg_u)) { //v<=u\r\n      sub_(eg_u, v);\r\n      sub_(eg_A, eg_C);\r\n      sub_(eg_B, eg_D);\r\n    } else {                //v>u\r\n      sub_(v, eg_u);\r\n      sub_(eg_C, eg_A);\r\n      sub_(eg_D, eg_B);\r\n    }\r\n    if (equalsInt(eg_u, 0)) {\r\n      while (negative(eg_C)) {   //make sure a (C) is nonnegative\r\n        add_(eg_C, y);\r\n        sub_(eg_D, x);\r\n      }\r\n      multInt_(eg_D, -1);  ///make sure b (D) is nonnegative\r\n      copy_(a, eg_C);\r\n      copy_(b, eg_D);\r\n      leftShift_(v, g);\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n//is bigInt x negative?\r\nfunction negative(x) {\r\n  return ((x[x.length-1]>>(bpe-1))&1);\r\n}\r\n\r\n\r\n//is (x << (shift*bpe)) > y?\r\n//x and y are nonnegative bigInts\r\n//shift is a nonnegative integer\r\nfunction greaterShift(x, y, shift) {\r\n  var i, kx=x.length, ky=y.length;\r\n  k=((kx+shift)<ky) ? (kx+shift) : ky;\r\n  for (i=ky-1-shift; i<kx && i>=0; i++)\r\n    if (x[i]>0)\r\n      return 1; //if there are nonzeros in x to the left of the first column of y, then x is bigger\r\n  for (i=kx-1+shift; i<ky; i++)\r\n    if (y[i]>0)\r\n      return 0; //if there are nonzeros in y to the left of the first column of x, then x is not bigger\r\n  for (i=k-1; i>=shift; i--)\r\n    if      (x[i-shift]>y[i]) return 1;\r\n    else if (x[i-shift]<y[i]) return 0;\r\n  return 0;\r\n}\r\n\r\n//is x > y? (x and y both nonnegative)\r\nexport function greater(x, y) {\r\n  var i;\r\n  var k=(x.length<y.length) ? x.length : y.length;\r\n\r\n  for (i=x.length; i<y.length; i++)\r\n    if (y[i])\r\n      return 0;  //y has more digits\r\n\r\n  for (i=y.length; i<x.length; i++)\r\n    if (x[i])\r\n      return 1;  //x has more digits\r\n\r\n  for (i=k-1; i>=0; i--)\r\n    if (x[i]>y[i])\r\n      return 1;\r\n    else if (x[i]<y[i])\r\n      return 0;\r\n  return 0;\r\n}\r\n\r\n//divide x by y giving quotient q and remainder r.  (q=floor(x/y),  r=x mod y).  All 4 are bigints.\r\n//x must have at least one leading zero element.\r\n//y must be nonzero.\r\n//q and r must be arrays that are exactly the same length as x. (Or q can have more).\r\n//Must have x.length >= y.length >= 2.\r\nexport function divide_(x, y, q, r) {\r\n  var kx, ky;\r\n  var i, j, y1, y2, c, a, b;\r\n  copy_(r, x);\r\n  for (ky=y.length; y[ky-1]==0; ky--); //ky is number of elements in y, not including leading zeros\r\n\r\n  //normalize: ensure the most significant element of y has its highest bit set\r\n  b=y[ky-1];\r\n  for (a=0; b; a++)\r\n    b>>=1;\r\n  a=bpe-a;  //a is how many bits to shift so that the high order bit of y is leftmost in its array element\r\n  leftShift_(y, a);  //multiply both by 1<<a now, then divide both by that at the end\r\n  leftShift_(r, a);\r\n\r\n  //Rob Visser discovered a bug: the following line was originally just before the normalization.\r\n  for (kx=r.length; r[kx-1]==0 && kx>ky; kx--); //kx is number of elements in normalized x, not including leading zeros\r\n\r\n  copyInt_(q, 0);                      // q=0\r\n  while (!greaterShift(y, r, kx-ky)) {  // while (leftShift_(y,kx-ky) <= r) {\r\n    subShift_(r, y, kx-ky);             //   r=r-leftShift_(y,kx-ky)\r\n    q[kx-ky]++;                       //   q[kx-ky]++;\r\n  }                                   // }\r\n\r\n  for (i=kx-1; i>=ky; i--) {\r\n    if (r[i]==y[ky-1])\r\n      q[i-ky]=mask;\r\n    else\r\n      q[i-ky]=Math.floor((r[i]*radix+r[i-1])/y[ky-1]);\r\n\r\n    //The following for(;;) loop is equivalent to the commented while loop,\r\n    //except that the uncommented version avoids overflow.\r\n    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\r\n    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\r\n    //    q[i-ky]--;\r\n    for (;;) {\r\n      y2=(ky>1 ? y[ky-2] : 0)*q[i-ky];\r\n      c=y2>>bpe;\r\n      y2=y2 & mask;\r\n      y1=c+q[i-ky]*y[ky-1];\r\n      c=y1>>bpe;\r\n      y1=y1 & mask;\r\n\r\n      if (c==r[i] ? y1==r[i-1] ? y2>(i>1 ? r[i-2] : 0) : y1>r[i-1] : c>r[i])\r\n        q[i-ky]--;\r\n      else\r\n        break;\r\n    }\r\n\r\n    linCombShift_(r, y, -q[i-ky], i-ky);    //r=r-q[i-ky]*leftShift_(y,i-ky)\r\n    if (negative(r)) {\r\n      addShift_(r, y, i-ky);         //r=r+leftShift_(y,i-ky)\r\n      q[i-ky]--;\r\n    }\r\n  }\r\n\r\n  rightShift_(y, a);  //undo the normalization step\r\n  rightShift_(r, a);  //undo the normalization step\r\n}\r\n\r\n//do carries and borrows so each element of the bigInt x fits in bpe bits.\r\nfunction carry_(x) {\r\n  var i, k, c, b;\r\n  k=x.length;\r\n  c=0;\r\n  for (i=0; i<k; i++) {\r\n    c+=x[i];\r\n    b=0;\r\n    if (c<0) {\r\n      b=-(c>>bpe);\r\n      c+=b*radix;\r\n    }\r\n    x[i]=c & mask;\r\n    c=(c>>bpe)-b;\r\n  }\r\n}\r\n\r\n//return x mod n for bigInt x and integer n.\r\nfunction modInt(x, n) {\r\n  var i, c=0;\r\n  for (i=x.length-1; i>=0; i--)\r\n    c=(c*radix+x[i])%n;\r\n  return c;\r\n}\r\n\r\n//convert the integer t into a bigInt with at least the given number of bits.\r\n//the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\r\n//Pad the array with leading zeros so that it has at least minSize elements.\r\n//There will always be at least one leading 0 element.\r\nexport function int2bigInt(t, bits, minSize) {\r\n  var i, k;\r\n  k=Math.ceil(bits/bpe)+1;\r\n  k=minSize>k ? minSize : k;\r\n  var buff=new Array(k);\r\n  copyInt_(buff, t);\r\n  return buff;\r\n}\r\n\r\n//return the bigInt given a string representation in a given base.\r\n//Pad the array with leading zeros so that it has at least minSize elements.\r\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\r\n//The array will always have at least one leading zero, unless base=-1.\r\nexport function str2bigInt(s, base, minSize) {\r\n  var d, i, j, x, y, kk;\r\n  var k=s.length;\r\n  if (base==-1) { //comma-separated list of array elements in decimal\r\n    x=new Array(0);\r\n    for (;;) {\r\n      y=new Array(x.length+1);\r\n      for (i=0; i<x.length; i++)\r\n        y[i+1]=x[i];\r\n      y[0]=parseInt(s, 10); //TODO PERF Should we replace that with ~~ (not not)? https://jsperf.com/number-vs-parseint-vs-plus/7\r\n      x=y;\r\n      d=s.indexOf(',', 0);\r\n      if (d<1)\r\n        break;\r\n      s=s.substring(d+1);\r\n      if (s.length==0)\r\n        break;\r\n    }\r\n    if (x.length<minSize) {\r\n      y=new Array(minSize);\r\n      copy_(y, x);\r\n      return y;\r\n    }\r\n    return x;\r\n  }\r\n\r\n  x=int2bigInt(0, base*k, 0);\r\n  for (i=0; i<k; i++) {\r\n    d=digitsStr.indexOf(s.substring(i, i+1), 0);\r\n    if (base<=36 && d>=36)  //convert lowercase to uppercase if base<=36\r\n      d-=26;\r\n    if (d>=base || d<0) {   //stop at first illegal character\r\n      break;\r\n    }\r\n    multInt_(x, base);\r\n    addInt_(x, d);\r\n  }\r\n\r\n  for (k=x.length; k>0 && !x[k-1]; k--); //strip off leading zeros\r\n  k=minSize>k+1 ? minSize : k+1;\r\n  y=new Array(k);\r\n  kk=k<x.length ? k : x.length;\r\n  for (i=0; i<kk; i++)\r\n    y[i]=x[i];\r\n  for (;i<k; i++)\r\n    y[i]=0;\r\n  return y;\r\n}\r\n\r\n//is bigint x equal to integer y?\r\n//y must have less than bpe bits\r\nexport function equalsInt(x, y) {\r\n  var i;\r\n  if (x[0]!=y)\r\n    return 0;\r\n  for (i=1; i<x.length; i++)\r\n    if (x[i])\r\n      return 0;\r\n  return 1;\r\n}\r\n\r\n//are bigints x and y equal?\r\n//this works even if x and y are different lengths and have arbitrarily many leading zeros\r\nfunction equals(x, y) {\r\n  var i;\r\n  var k=x.length<y.length ? x.length : y.length;\r\n  for (i=0; i<k; i++)\r\n    if (x[i]!=y[i])\r\n      return 0;\r\n  if (x.length>y.length) {\r\n    for (;i<x.length; i++)\r\n      if (x[i])\r\n        return 0;\r\n  } else {\r\n    for (;i<y.length; i++)\r\n      if (y[i])\r\n        return 0;\r\n  }\r\n  return 1;\r\n}\r\n\r\n//is the bigInt x equal to zero?\r\nexport function isZero(x) {\r\n  var i;\r\n  for (i=0; i<x.length; i++)\r\n    if (x[i])\r\n      return 0;\r\n  return 1;\r\n}\r\n\r\n//convert a bigInt into a string in a given base, from base 2 up to base 95.\r\n//Base -1 prints the contents of the array representing the number.\r\nexport function bigInt2str(x, base) {\r\n  var i, t, s='';\r\n\r\n  if (s6.length!=x.length)\r\n    s6=dup(x);\r\n  else\r\n    copy_(s6, x);\r\n\r\n  if (base==-1) { //return the list of array contents\r\n    for (i=x.length-1; i>0; i--)\r\n      s+=x[i]+',';\r\n    s+=x[0];\r\n  }\r\n  else { //return it in the given base\r\n    while (!isZero(s6)) {\r\n      t=divInt_(s6, base);  //t=s6 % base; s6=floor(s6/base);\r\n      s=digitsStr.substring(t, t+1)+s;\r\n    }\r\n  }\r\n  if (s.length==0)\r\n    s='0';\r\n  return s;\r\n}\r\n\r\n//returns a duplicate of bigInt x\r\nexport function dup(x) {\r\n  var i;\r\n  buff=new Array(x.length);\r\n  copy_(buff, x);\r\n  return buff;\r\n}\r\n\r\n//do x=y on bigInts x and y.  x must be an array at least as big as y (not counting the leading zeros in y).\r\nexport function copy_(x, y) {\r\n  var i;\r\n  var k=x.length<y.length ? x.length : y.length;\r\n  for (i=0; i<k; i++)\r\n    x[i]=y[i];\r\n  for (i=k; i<x.length; i++)\r\n    x[i]=0;\r\n}\r\n\r\n//do x=y on bigInt x and integer y.\r\nexport function copyInt_(x, n) {\r\n  var i, c;\r\n  var len = x.length; //TODO .length in for loop have perfomance costs. Bench this\r\n  for (c=n, i=0; i<len; i++) {\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n}\r\n\r\n//do x=x+n where x is a bigInt and n is an integer.\r\n//x must be large enough to hold the result.\r\nexport function addInt_(x, n) {\r\n  var i, k, c, b;\r\n  x[0]+=n;\r\n  k=x.length;\r\n  c=0;\r\n  for (i=0; i<k; i++) {\r\n    c+=x[i];\r\n    b=0;\r\n    if (c<0) {\r\n      b=-(c>>bpe);\r\n      c+=b*radix;\r\n    }\r\n    x[i]=c & mask;\r\n    c=(c>>bpe)-b;\r\n    if (!c) return; //stop carrying as soon as the carry is zero\r\n  }\r\n}\r\n\r\n//right shift bigInt x by n bits.  0 <= n < bpe.\r\nexport function rightShift_(x, n) {\r\n  var i;\r\n  var k=Math.floor(n/bpe);\r\n  if (k) {\r\n    for (i=0; i<x.length-k; i++) //right shift x by k elements\r\n      x[i]=x[i+k];\r\n    for (;i<x.length; i++)\r\n      x[i]=0;\r\n    n%=bpe;\r\n  }\r\n  for (i=0; i<x.length-1; i++) {\r\n    x[i]=mask & ((x[i+1]<<(bpe-n)) | (x[i]>>n));\r\n  }\r\n  x[i]>>=n;\r\n}\r\n\r\n//do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\r\nfunction halve_(x) {\r\n  var i;\r\n  for (i=0; i<x.length-1; i++) {\r\n    x[i]=mask & ((x[i+1]<<(bpe-1)) | (x[i]>>1));\r\n  }\r\n  x[i]=(x[i]>>1) | (x[i] & (radix>>1));  //most significant bit stays the same\r\n}\r\n\r\n//left shift bigInt x by n bits.\r\nexport function leftShift_(x, n) {\r\n  var i;\r\n  var k=Math.floor(n/bpe);\r\n  if (k) {\r\n    for (i=x.length; i>=k; i--) //left shift x by k elements\r\n      x[i]=x[i-k];\r\n    for (;i>=0; i--)\r\n      x[i]=0;\r\n    n%=bpe;\r\n  }\r\n  if (!n)\r\n    return;\r\n  for (i=x.length-1; i>0; i--) {\r\n    x[i]=mask & ((x[i]<<n) | (x[i-1]>>(bpe-n)));\r\n  }\r\n  x[i]=mask & (x[i]<<n);\r\n}\r\n\r\n//do x=x*n where x is a bigInt and n is an integer.\r\n//x must be large enough to hold the result.\r\nfunction multInt_(x, n) {\r\n  var i, k, c, b;\r\n  if (!n)\r\n    return;\r\n  k=x.length;\r\n  c=0;\r\n  for (i=0; i<k; i++) {\r\n    c+=x[i]*n;\r\n    b=0;\r\n    if (c<0) {\r\n      b=-(c>>bpe);\r\n      c+=b*radix;\r\n    }\r\n    x[i]=c & mask;\r\n    c=(c>>bpe)-b;\r\n  }\r\n}\r\n\r\n//do x=floor(x/n) for bigInt x and integer n, and return the remainder\r\nfunction divInt_(x, n) {\r\n  var i, r=0, s;\r\n  for (i=x.length-1; i>=0; i--) {\r\n    s=r*radix+x[i];\r\n    x[i]=Math.floor(s/n);\r\n    r=s%n;\r\n  }\r\n  return r;\r\n}\r\n\r\n//do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\r\n//x must be large enough to hold the answer.\r\nfunction linComb_(x, y, a, b) {\r\n  var i, c, k, kk;\r\n  k=x.length<y.length ? x.length : y.length;\r\n  kk=x.length;\r\n  for (c=0, i=0; i<k; i++) {\r\n    c+=a*x[i]+b*y[i];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n  for (i=k; i<kk; i++) {\r\n    c+=a*x[i];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n}\r\n\r\n//do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\r\n//x must be large enough to hold the answer.\r\nfunction linCombShift_(x, y, b, ys) {\r\n  var i, c, k, kk;\r\n  k=x.length<ys+y.length ? x.length : ys+y.length;\r\n  kk=x.length;\r\n  for (c=0, i=ys; i<k; i++) {\r\n    c+=x[i]+b*y[i-ys];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n  for (i=k; c && i<kk; i++) {\r\n    c+=x[i];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n}\r\n\r\n//do x=x+(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\r\n//x must be large enough to hold the answer.\r\nfunction addShift_(x, y, ys) {\r\n  var i, c, k, kk;\r\n  k=x.length<ys+y.length ? x.length : ys+y.length;\r\n  kk=x.length;\r\n  for (c=0, i=ys; i<k; i++) {\r\n    c+=x[i]+y[i-ys];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n  for (i=k; c && i<kk; i++) {\r\n    c+=x[i];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n}\r\n\r\n//do x=x-(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\r\n//x must be large enough to hold the answer.\r\nfunction subShift_(x, y, ys) {\r\n  var i, c, k, kk;\r\n  k=x.length<ys+y.length ? x.length : ys+y.length;\r\n  kk=x.length;\r\n  for (c=0, i=ys; i<k; i++) {\r\n    c+=x[i]-y[i-ys];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n  for (i=k; c && i<kk; i++) {\r\n    c+=x[i];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n}\r\n\r\n//do x=x-y for bigInts x and y.\r\n//x must be large enough to hold the answer.\r\n//negative answers will be 2s complement\r\nexport function sub_(x, y) {\r\n  var i, c, k, kk;\r\n  k=x.length<y.length ? x.length : y.length;\r\n  for (c=0, i=0; i<k; i++) {\r\n    c+=x[i]-y[i];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n  for (i=k; c && i<x.length; i++) {\r\n    c+=x[i];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n}\r\n\r\n//do x=x+y for bigInts x and y.\r\n//x must be large enough to hold the answer.\r\nexport function add_(x, y) {\r\n  var i, c, k, kk;\r\n  k=x.length<y.length ? x.length : y.length;\r\n  for (c=0, i=0; i<k; i++) {\r\n    c+=x[i]+y[i];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n  for (i=k; c && i<x.length; i++) {\r\n    c+=x[i];\r\n    x[i]=c & mask;\r\n    c>>=bpe;\r\n  }\r\n}\r\n\r\n//do x=x*y for bigInts x and y.  This is faster when y<x.\r\nfunction mult_(x, y) {\r\n  var i;\r\n  if (ss.length!=2*x.length)\r\n    ss=new Array(2*x.length);\r\n  copyInt_(ss, 0);\r\n  for (i=0; i<y.length; i++)\r\n    if (y[i])\r\n      linCombShift_(ss, x, y[i], i);   //ss=1*ss+y[i]*(x<<(i*bpe))\r\n  copy_(x, ss);\r\n}\r\n\r\n//do x=x mod n for bigInts x and n.\r\nfunction mod_(x, n) {\r\n  if (s4.length!=x.length)\r\n    s4=dup(x);\r\n  else\r\n    copy_(s4, x);\r\n  if (s5.length!=x.length)\r\n    s5=dup(x);\r\n  divide_(s4, n, s5, x);  //x = remainder of s4 / n\r\n}\r\n\r\n//do x=x*y mod n for bigInts x,y,n.\r\n//for greater speed, let y<x.\r\nfunction multMod_(x, y, n) {\r\n  var i;\r\n  if (s0.length!=2*x.length)\r\n    s0=new Array(2*x.length);\r\n  copyInt_(s0, 0);\r\n  for (i=0; i<y.length; i++)\r\n    if (y[i])\r\n      linCombShift_(s0, x, y[i], i);   //s0=1*s0+y[i]*(x<<(i*bpe))\r\n  mod_(s0, n);\r\n  copy_(x, s0);\r\n}\r\n\r\n//do x=x*x mod n for bigInts x,n.\r\nfunction squareMod_(x, n) {\r\n  var i, j, d, c, kx, kn, k;\r\n  for (kx=x.length; kx>0 && !x[kx-1]; kx--);  //ignore leading zeros in x\r\n  k=kx>n.length ? 2*kx : 2*n.length; //k=# elements in the product, which is twice the elements in the larger of x and n\r\n  if (s0.length!=k)\r\n    s0=new Array(k);\r\n  copyInt_(s0, 0);\r\n  for (i=0; i<kx; i++) {\r\n    c=s0[2*i]+x[i]*x[i];\r\n    s0[2*i]=c & mask;\r\n    c>>=bpe;\r\n    for (j=i+1; j<kx; j++) {\r\n      c=s0[i+j]+2*x[i]*x[j]+c;\r\n      s0[i+j]=(c & mask);\r\n      c>>=bpe;\r\n    }\r\n    s0[i+kx]=c;\r\n  }\r\n  mod_(s0, n);\r\n  copy_(x, s0);\r\n}\r\n\r\n//return x with exactly k leading zero elements\r\nfunction trim(x, k) {\r\n  var i, y;\r\n  for (i=x.length; i>0 && !x[i-1]; i--);\r\n  y=new Array(i+k);\r\n  copy_(y, x);\r\n  return y;\r\n}\r\n\r\n//do x=x**y mod n, where x,y,n are bigInts and ** is exponentiation.  0**0=1.\r\n//this is faster when n is odd.  x usually needs to have as many elements as n.\r\nfunction powMod_(x, y, n) {\r\n  var k1, k2, kn, np;\r\n  if (s7.length!=n.length)\r\n    s7=dup(n);\r\n\r\n  //for even modulus, use a simple square-and-multiply algorithm,\r\n  //rather than using the more complex Montgomery algorithm.\r\n  if ((n[0]&1)==0) {\r\n    copy_(s7, x);\r\n    copyInt_(x, 1);\r\n    while (!equalsInt(y, 0)) {\r\n      if (y[0]&1)\r\n        multMod_(x, s7, n);\r\n      divInt_(y, 2);\r\n      squareMod_(s7, n);\r\n    }\r\n    return;\r\n  }\r\n\r\n  //calculate np from n for the Montgomery multiplications\r\n  copyInt_(s7, 0);\r\n  for (kn=n.length; kn>0 && !n[kn-1]; kn--);\r\n  np=radix-inverseModInt(modInt(n, radix), radix);\r\n  s7[kn]=1;\r\n  multMod_(x, s7, n);   // x = x * 2**(kn*bp) mod n\r\n\r\n  if (s3.length!=x.length)\r\n    s3=dup(x);\r\n  else\r\n    copy_(s3, x);\r\n\r\n  for (k1=y.length-1; k1>0 & !y[k1]; k1--);  //k1=first nonzero element of y\r\n  if (y[k1]==0) {  //anything to the 0th power is 1\r\n    copyInt_(x, 1);\r\n    return;\r\n  }\r\n  for (k2=1<<(bpe-1); k2 && !(y[k1] & k2); k2>>=1);  //k2=position of first 1 bit in y[k1]\r\n  for (;;) {\r\n    if (!(k2>>=1)) {  //look at next bit of y\r\n      k1--;\r\n      if (k1<0) {\r\n        mont_(x, one, n, np);\r\n        return;\r\n      }\r\n      k2=1<<(bpe-1);\r\n    }\r\n    mont_(x, x, n, np);\r\n\r\n    if (k2 & y[k1]) //if next bit is a 1\r\n      mont_(x, s3, n, np);\r\n  }\r\n}\r\n\r\n\r\n//do x=x*y*Ri mod n for bigInts x,y,n,\r\n//  where Ri = 2**(-kn*bpe) mod n, and kn is the\r\n//  number of elements in the n array, not\r\n//  counting leading zeros.\r\n//x array must have at least as many elemnts as the n array\r\n//It's OK if x and y are the same variable.\r\n//must have:\r\n//  x,y < n\r\n//  n is odd\r\n//  np = -(n^(-1)) mod radix\r\nfunction mont_(x, y, n, np) {\r\n  var i, j, c, ui, t, ks;\r\n  var kn=n.length;\r\n  var ky=y.length;\r\n\r\n  if (sa.length!=kn)\r\n    sa=new Array(kn);\r\n\r\n  copyInt_(sa, 0);\r\n\r\n  for (;kn>0 && n[kn-1]==0; kn--); //ignore leading zeros of n\r\n  for (;ky>0 && y[ky-1]==0; ky--); //ignore leading zeros of y\r\n  ks=sa.length-1; //sa will never have more than this many nonzero elements.\r\n\r\n  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\r\n  for (i=0; i<kn; i++) {\r\n    t=sa[0]+x[i]*y[0];\r\n    ui=((t & mask) * np) & mask;  //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\r\n    c=(t+ui*n[0]) >> bpe;\r\n    t=x[i];\r\n\r\n    //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\r\n    j=1;\r\n    for (;j<ky-4;) { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\r\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\r\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\r\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\r\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }\r\n    for (;j<ky;)   { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }\r\n    for (;j<kn-4;) { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\r\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\r\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\r\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\r\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }\r\n    for (;j<kn;)   { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }\r\n    for (;j<ks;)   { c+=sa[j];                  sa[j-1]=c & mask;   c>>=bpe;   j++; }\r\n    sa[j-1]=c & mask;\r\n  }\r\n\r\n  if (!greater(n, sa))\r\n    sub_(sa, n);\r\n  copy_(x, sa);\r\n}\r\n\r\n"]}