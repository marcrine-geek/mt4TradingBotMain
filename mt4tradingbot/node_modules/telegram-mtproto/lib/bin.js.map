{"version":3,"sources":["../src/bin.js"],"names":["stringToChars","bytesToHex","bytesFromHex","bytesCmp","bytesXor","bytesToWords","bytesFromWords","bytesFromLeemonBigInt","bytesToArrayBuffer","convertToArrayBuffer","convertToUint8Array","convertToByteArray","bytesFromArrayBuffer","bufferConcat","longToInts","longToBytes","lshift32","intToUint","uintToInt","sha1HashSync","sha1BytesSync","sha256HashSync","rsaEncrypt","addPadding","aesEncryptSync","aesDecryptSync","gzipUncompress","nextRandomInt","pqPrimeFactorization","pqPrimeLeemon","bytesModPow","CryptoJSlib","CryptoJS","rushaInstance","str","ln","length","result","Array","i","charCodeAt","strDecToHex","bytes","arr","push","toString","join","hexString","len","start","parseInt","charAt","substr","bytes1","bytes2","ArrayBuffer","Uint8Array","words","lib","WordArray","init","wordArray","sigBytes","bigInt","b","buffer","undefined","byteLength","BYTES_PER_ELEMENT","isArray","newBytes","byteView","from","buffer1","buffer2","l1","l2","tmp","set","dividerLem","sLong","lemNum","div","rem","resL","reverse","high","low","highNum","nLow","res","rshift32","num","val","middle","hashBytes","rawDigest","hashWords","SHA256","publicKey","N","modulus","E","exponent","X","encryptedBigInt","encryptedBytes","blockSize","zeroes","needPadding","padding","concat","keyBytes","ivBytes","encryptedWords","AES","encrypt","iv","pad","NoPadding","mode","IGE","ciphertext","decryptedWords","decrypt","maxValue","Math","floor","random","pqBytes","minSize","ceil","hex","lWhat","what","minBits","minLen","it","q","lim","a","c","g","z","x","y","j","P","Q","m","xBigInt","yBigInt","mBigInt","resBigInt"],"mappings":"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","file":"bin.js","sourcesContent":["import toLower from 'ramda/src/toLower'\r\nimport Rusha from 'rusha'\r\nimport * as CryptoJSlib from '@goodmind/node-cryptojs-aes'\r\nconst { CryptoJS } = CryptoJSlib\r\nimport { inflate } from 'pako/lib/inflate'\r\n\r\nimport random from './service/secure-random'\r\n\r\n\r\nimport { eGCD_, greater, divide_, str2bigInt, equalsInt,\r\n  isZero, bigInt2str, copy_, copyInt_, rightShift_,\r\n  leftShift_, sub_, add_, powMod, bpe, one } from './vendor/leemon'\r\n\r\n\r\nconst rushaInstance = new Rusha(1024 * 1024)\r\n\r\n\r\n\r\nexport function stringToChars(str: string) {\r\n  const ln = str.length\r\n  const result: number[] = Array(ln)\r\n  for (let i = 0; i < ln; ++i)\r\n    result[i] = str.charCodeAt(i)\r\n  return result\r\n}\r\n\r\nexport const strDecToHex = str => toLower(\r\n  bigInt2str(\r\n    str2bigInt(str, 10, 0), 16\r\n  ))\r\n\r\nexport function bytesToHex(bytes = []) {\r\n  const arr = []\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    arr.push((bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16))\r\n  }\r\n  return arr.join('')\r\n}\r\n\r\nexport function bytesFromHex(hexString: string) {\r\n  const len = hexString.length\r\n  let start = 0\r\n  const bytes = []\r\n\r\n  if (hexString.length % 2) {\r\n    bytes.push(parseInt(hexString.charAt(0), 16))\r\n    start++\r\n  }\r\n\r\n  for (let i = start; i < len; i += 2) {\r\n    bytes.push(parseInt(hexString.substr(i, 2), 16))\r\n  }\r\n\r\n  return bytes\r\n}\r\n\r\nexport function bytesCmp(bytes1, bytes2) {\r\n  const len = bytes1.length\r\n  if (len !== bytes2.length) {\r\n    return false\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    if (bytes1[i] !== bytes2[i])\r\n      return false\r\n  }\r\n  return true\r\n}\r\n\r\nexport function bytesXor(bytes1, bytes2) {\r\n  const len = bytes1.length\r\n  const bytes = []\r\n\r\n  for (let i = 0; i < len; ++i) {\r\n    bytes[i] = bytes1[i] ^ bytes2[i]\r\n  }\r\n\r\n  return bytes\r\n}\r\n\r\nexport function bytesToWords(bytes) {\r\n  if (bytes instanceof ArrayBuffer) {\r\n    bytes = new Uint8Array(bytes)\r\n  }\r\n  const len = bytes.length\r\n  const words = []\r\n  let i\r\n  for (i = 0; i < len; i++) {\r\n    words[i >>> 2] |= bytes[i] << 24 - i % 4 * 8\r\n  }\r\n\r\n  return new CryptoJS.lib.WordArray.init(words, len)\r\n}\r\n\r\nexport function bytesFromWords(wordArray) {\r\n  const words = wordArray.words\r\n  const sigBytes = wordArray.sigBytes\r\n  const bytes = []\r\n\r\n  for (let i = 0; i < sigBytes; i++) {\r\n    bytes.push(words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)\r\n  }\r\n\r\n  return bytes\r\n}\r\n\r\n\r\nexport function bytesFromLeemonBigInt(bigInt) {\r\n  const str = bigInt2str(bigInt, 16)\r\n  return bytesFromHex(str)\r\n}\r\n\r\nexport function bytesToArrayBuffer(b) {\r\n  return (new Uint8Array(b)).buffer\r\n}\r\n\r\nexport function convertToArrayBuffer(bytes) {\r\n  // Be careful with converting subarrays!!\r\n  if (bytes instanceof ArrayBuffer) {\r\n    return bytes\r\n  }\r\n  if (bytes.buffer !== undefined &&\r\n    bytes.buffer.byteLength == bytes.length * bytes.BYTES_PER_ELEMENT) {\r\n    return bytes.buffer\r\n  }\r\n  return bytesToArrayBuffer(bytes)\r\n}\r\n\r\nexport function convertToUint8Array(bytes) {\r\n  if (bytes.buffer !== undefined)\r\n    return bytes\r\n  return new Uint8Array(bytes)\r\n}\r\n\r\nexport function convertToByteArray(bytes) {\r\n  if (Array.isArray(bytes))\r\n    return bytes\r\n  bytes = convertToUint8Array(bytes)\r\n  const newBytes = []\r\n  for (let i = 0, len = bytes.length; i < len; i++)\r\n    newBytes.push(bytes[i])\r\n  return newBytes\r\n}\r\n\r\nexport function bytesFromArrayBuffer(buffer) {\r\n  const byteView = new Uint8Array(buffer)\r\n  const bytes = Array.from( byteView )\r\n  return bytes\r\n}\r\n\r\nexport function bufferConcat(buffer1, buffer2) {\r\n  const l1 = buffer1.byteLength || buffer1.length\r\n  const l2 = buffer2.byteLength || buffer2.length\r\n  const tmp = new Uint8Array(l1 + l2)\r\n  tmp.set(\r\n    buffer1 instanceof ArrayBuffer\r\n      ? new Uint8Array(buffer1)\r\n      : buffer1,\r\n    0)\r\n  tmp.set(\r\n    buffer2 instanceof ArrayBuffer\r\n      ? new Uint8Array(buffer2)\r\n      : buffer2,\r\n    l1)\r\n\r\n  return tmp.buffer\r\n}\r\n\r\n// const dividerBig = bigint(0x100000000)\r\nconst dividerLem = str2bigInt('100000000', 16, 4)\r\n\r\n// const printTimers = (timeL, timeB, a, b, n) => setTimeout(\r\n//   () => console.log(`Timer L ${timeL} B ${timeB}`, ...a, ...b, n || ''),\r\n//   100)\r\n\r\nexport function longToInts(sLong: string) {\r\n  const lemNum = str2bigInt(sLong, 10, 6)\r\n  const div = new Array(lemNum.length)\r\n  const rem = new Array(lemNum.length)\r\n  divide_(lemNum, dividerLem, div, rem)\r\n  const resL = [\r\n    ~~bigInt2str(div, 10),\r\n    ~~bigInt2str(rem, 10)\r\n  ]\r\n  return resL\r\n}\r\n\r\nexport function longToBytes(sLong) {\r\n  return bytesFromWords({ words: longToInts(sLong), sigBytes: 8 }).reverse()\r\n}\r\n\r\nexport function lshift32(high, low) {\r\n  const highNum = str2bigInt(high.toString(), 10, 6)\r\n  const nLow = str2bigInt(low.toString(), 10, 6)\r\n  leftShift_(highNum, 32)\r\n\r\n  add_(highNum, nLow)\r\n  const res = bigInt2str(highNum, 10)\r\n  return res\r\n}\r\n\r\nexport const rshift32 = str => {\r\n  const num = str2bigInt(str, 10, 6)\r\n  rightShift_(num, 32)\r\n  return bigInt2str(num, 10)\r\n}\r\n\r\nexport function intToUint(val: string) {\r\n  let result = ~~val\r\n  if (result < 0)\r\n    result = result + 0x100000000\r\n  return result\r\n}\r\n\r\nconst middle = 0x100000000 / 2 - 1\r\n\r\nexport function uintToInt(val: number): number {\r\n  if (val > middle)\r\n    val = val - 0x100000000\r\n  return val\r\n}\r\n\r\nexport function sha1HashSync(bytes) {\r\n  // console.log(dT(), 'SHA-1 hash start', bytes.byteLength || bytes.length)\r\n  const hashBytes = rushaInstance.rawDigest(bytes).buffer\r\n  // console.log(dT(), 'SHA-1 hash finish')\r\n\r\n  return hashBytes\r\n}\r\n\r\nexport function sha1BytesSync(bytes) {\r\n  return bytesFromArrayBuffer(sha1HashSync(bytes))\r\n}\r\n\r\nexport function sha256HashSync(bytes) {\r\n  // console.log(dT(), 'SHA-2 hash start', bytes.byteLength || bytes.length)\r\n  const hashWords = CryptoJS.SHA256(bytesToWords(bytes))\r\n  // console.log(dT(), 'SHA-2 hash finish')\r\n\r\n  const hashBytes = bytesFromWords(hashWords)\r\n\r\n  return hashBytes\r\n}\r\n\r\nexport function rsaEncrypt(publicKey, bytes) {\r\n  bytes = addPadding(bytes, 255)\r\n\r\n  const N = str2bigInt(publicKey.modulus, 16, 256)\r\n  const E = str2bigInt(publicKey.exponent, 16, 256)\r\n  const X = str2bigInt(bytesToHex(bytes), 16, 256)\r\n  const encryptedBigInt = powMod(X, E, N),\r\n        encryptedBytes = bytesFromHex(bigInt2str(encryptedBigInt, 16))\r\n\r\n  return encryptedBytes\r\n}\r\n\r\nexport function addPadding(bytes, blockSize, zeroes) {\r\n  blockSize = blockSize || 16\r\n  const len = bytes.byteLength || bytes.length\r\n  const needPadding = blockSize - len % blockSize\r\n  if (needPadding > 0 && needPadding < blockSize) {\r\n    const padding = new Array(needPadding)\r\n    if (zeroes) {\r\n      for (let i = 0; i < needPadding; i++)\r\n        padding[i] = 0\r\n    } else\r\n      random(padding)\r\n\r\n    bytes = bytes instanceof ArrayBuffer\r\n      ? bufferConcat(bytes, padding)\r\n      : bytes.concat(padding)\r\n  }\r\n\r\n  return bytes\r\n}\r\n\r\nexport function aesEncryptSync(bytes, keyBytes, ivBytes) {\r\n  // console.log(dT(), 'AES encrypt start', len/*, bytesToHex(keyBytes), bytesToHex(ivBytes)*/)\r\n  bytes = addPadding(bytes)\r\n\r\n  const encryptedWords = CryptoJS.AES.encrypt(bytesToWords(bytes), bytesToWords(keyBytes), {\r\n    iv     : bytesToWords(ivBytes),\r\n    padding: CryptoJS.pad.NoPadding,\r\n    mode   : CryptoJS.mode.IGE\r\n  }).ciphertext\r\n\r\n  const encryptedBytes = bytesFromWords(encryptedWords)\r\n  // console.log(dT(), 'AES encrypt finish')\r\n\r\n  return encryptedBytes\r\n}\r\n\r\nexport function aesDecryptSync(encryptedBytes, keyBytes, ivBytes) {\r\n\r\n  // console.log(dT(), 'AES decrypt start', encryptedBytes.length)\r\n  const decryptedWords = CryptoJS.AES.decrypt({ ciphertext: bytesToWords(encryptedBytes) }, bytesToWords(keyBytes), {\r\n    iv     : bytesToWords(ivBytes),\r\n    padding: CryptoJS.pad.NoPadding,\r\n    mode   : CryptoJS.mode.IGE\r\n  })\r\n\r\n  const bytes = bytesFromWords(decryptedWords)\r\n  // console.log(dT(), 'AES decrypt finish')\r\n\r\n  return bytes\r\n}\r\n\r\nexport function gzipUncompress(bytes) {\r\n  // console.log('Gzip uncompress start')\r\n  const result = inflate(bytes)\r\n  // console.log('Gzip uncompress finish')\r\n  return result\r\n}\r\n\r\nexport function nextRandomInt(maxValue) {\r\n  return Math.floor(Math.random() * maxValue)\r\n}\r\n\r\n\r\nexport function pqPrimeFactorization(pqBytes) {\r\n  const minSize = Math.ceil(64 / bpe) + 1\r\n\r\n  // const what = new BigInteger(pqBytes)\r\n  const hex = bytesToHex(pqBytes)\r\n  const lWhat = str2bigInt(hex, 16, minSize)\r\n  const result = pqPrimeLeemon(lWhat)\r\n  return result\r\n}\r\n\r\n\r\nexport function pqPrimeLeemon(what) {\r\n  const minBits = 64\r\n  const minLen = Math.ceil(minBits / bpe) + 1\r\n  let it = 0\r\n  let q, lim\r\n  const a = new Array(minLen)\r\n  const b = new Array(minLen)\r\n  const c = new Array(minLen)\r\n  const g = new Array(minLen)\r\n  const z = new Array(minLen)\r\n  const x = new Array(minLen)\r\n  const y = new Array(minLen)\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    q = (nextRandomInt(128) & 15) + 17\r\n    copyInt_(x, nextRandomInt(1000000000) + 1)\r\n    copy_(y, x)\r\n    lim = 1 << i + 18\r\n\r\n    for (let j = 1; j < lim; j++) {\r\n      ++it\r\n      copy_(a, x)\r\n      copy_(b, x)\r\n      copyInt_(c, q)\r\n\r\n      while (!isZero(b)) {\r\n        if (b[0] & 1) {\r\n          add_(c, a)\r\n          if (greater(c, what)) {\r\n            sub_(c, what)\r\n          }\r\n        }\r\n        add_(a, a)\r\n        if (greater(a, what)) {\r\n          sub_(a, what)\r\n        }\r\n        rightShift_(b, 1)\r\n      }\r\n\r\n      copy_(x, c)\r\n      if (greater(x, y)) {\r\n        copy_(z, x)\r\n        sub_(z, y)\r\n      } else {\r\n        copy_(z, y)\r\n        sub_(z, x)\r\n      }\r\n      eGCD_(z, what, g, a, b)\r\n      if (!equalsInt(g, 1)) {\r\n        break\r\n      }\r\n      if ((j & j - 1) === 0) {\r\n        copy_(y, x)\r\n      }\r\n    }\r\n    if (greater(g, one)) {\r\n      break\r\n    }\r\n  }\r\n\r\n  divide_(what, g, x, y)\r\n\r\n  const [P, Q] =\r\n    greater(g, x)\r\n      ? [x, g]\r\n      : [g, x]\r\n\r\n  // console.log(dT(), 'done', bigInt2str(what, 10), bigInt2str(P, 10), bigInt2str(Q, 10))\r\n\r\n  return [bytesFromLeemonBigInt(P), bytesFromLeemonBigInt(Q), it]\r\n}\r\n\r\nexport function bytesModPow(x, y, m) {\r\n  const xBigInt = str2bigInt(bytesToHex(x), 16)\r\n  const yBigInt = str2bigInt(bytesToHex(y), 16)\r\n  const mBigInt = str2bigInt(bytesToHex(m), 16)\r\n  const resBigInt = powMod(xBigInt, yBigInt, mBigInt)\r\n\r\n  return bytesFromHex(bigInt2str(resBigInt, 16))\r\n}\r\n\r\n"]}