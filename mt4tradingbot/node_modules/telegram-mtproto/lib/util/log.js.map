{"version":3,"sources":["../../src/util/log.js"],"names":["tagNormalize","e","arrify","fullNormalize","stringNormalize","String","length","genericLogger","LogEvent","constructor","log","values","print","Sheduler","queue","buffer","add","time","tagStr","results","map","first","other","firstLine","join","push","sheduleBuffer","logEvent","setInterval","sheduler","Logger","moduleName","rest","fullModule","unshift","fullname","debug","logger","tags","objects","setLogger","customLogger"],"mappings":"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","file":"log.js","sourcesContent":["//@flow\r\n\r\n// import memoize from 'memoizee'\r\n\r\nimport Debug from 'debug'\r\n\r\nimport trim from 'ramda/src/trim'\r\nimport map from 'ramda/src/map'\r\nimport chain from 'ramda/src/chain'\r\nimport pipe from 'ramda/src/pipe'\r\nimport split from 'ramda/src/split'\r\nimport both from 'ramda/src/both'\r\nimport is from 'ramda/src/is'\r\nimport when from 'ramda/src/when'\r\nimport take from 'ramda/src/take'\r\nimport reject from 'ramda/src/reject'\r\nimport isEmpty from 'ramda/src/isEmpty'\r\nimport join from 'ramda/src/join'\r\nimport unapply from 'ramda/src/unapply'\r\nimport unnest from 'ramda/src/unnest'\r\nimport tail from 'ramda/src/tail'\r\n\r\nimport dTime from './dtime'\r\nimport { immediate } from './smart-timeout'\r\n\r\ntype VariString = string | string[]\r\n\r\ntype Normalize = (tag: string) => string\r\ntype FullNormalize = (tags: VariString) => string\r\n\r\nconst tagNormalize: Normalize = e => `[${e}]`\r\n\r\nconst arrify = unapply(unnest)\r\n\r\nconst fullNormalize: FullNormalize = pipe(\r\n  arrify,\r\n  chain(split(',')),\r\n  map(trim),\r\n  reject(isEmpty),\r\n  map(tagNormalize),\r\n  join('')\r\n)\r\n\r\nconst stringNormalize = when(\r\n  both(is(String), e => e.length > 50),\r\n  take(150)\r\n)\r\n// const isSimple = either(\r\n//   is(String),\r\n//   is(Number)\r\n// )\r\n\r\n// const prettify = unless(\r\n//   isSimple,\r\n//   pretty\r\n// )\r\n\r\nconst genericLogger = Debug('telegram-mtproto')\r\n\r\nclass LogEvent {\r\n  log: typeof genericLogger\r\n  values: mixed[]\r\n  constructor(log: typeof genericLogger, values: mixed[]) {\r\n    this.log = log\r\n    this.values = values\r\n  }\r\n  print() {\r\n    this.log(...this.values)\r\n  }\r\n}\r\n\r\nclass Sheduler {\r\n  queue: LogEvent[][] = []\r\n  buffer: LogEvent[] = []\r\n  add = (log: typeof genericLogger, time: string, tagStr: string, values: mixed[]) => {\r\n    const results = values.map(stringNormalize)\r\n    const first = results[0] || ''\r\n    const other = tail(results)\r\n    const firstLine = [tagStr, time, first].join('  ')\r\n    this.buffer.push(new LogEvent(log, [firstLine, ...other]))\r\n  }\r\n  sheduleBuffer = () => {\r\n    this.queue.push(this.buffer)\r\n    this.buffer = []\r\n  }\r\n  print = () => {\r\n    for (const buffer of this.queue)\r\n      for (const logEvent of buffer)\r\n        logEvent.print()\r\n    this.queue = []\r\n  }\r\n  constructor() {\r\n    setInterval(this.sheduleBuffer, 50)\r\n    setInterval(this.print, 300)\r\n  }\r\n}\r\n\r\nconst sheduler = new Sheduler\r\n\r\nconst Logger = (moduleName: VariString, ...rest: string[]) => {\r\n  const fullModule: string[] = arrify(moduleName, ...rest)\r\n  fullModule.unshift('telegram-mtproto')\r\n  const fullname = fullModule.join(':')\r\n  const debug = Debug(fullname)\r\n  const logger = (tags: string | string[]) => {\r\n    const tagStr = fullNormalize(tags)\r\n    return (...objects: any[]) => {\r\n      const time = dTime()\r\n      immediate(sheduler.add, debug, time, tagStr, objects)\r\n    }\r\n  }\r\n  return logger\r\n}\r\n\r\nexport const setLogger = (customLogger: Function) => {\r\n  Debug.log = customLogger\r\n}\r\n\r\nexport default Logger"]}