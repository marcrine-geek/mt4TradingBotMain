{"version":3,"sources":["../../src/util/smart-timeout.js"],"names":["cancelToken","Symbol","timeoutRefs","WeakSet","pause","delay","r","setTimeout","smartTimeout","fn","args","newToken","checkRun","has","delete","promise","then","cancel","token","immediate","resolve","delayedCall"],"mappings":";;;;;;;AAEA;;;;;;AAEA,IAAMA,cAAcC,OAAO,cAAP,CAApB;;AAEA,IAAMC,cAAc,IAAIC,OAAJ,EAApB;;AAEA,IAAMC,QAASC,KAAD,IAAkC,uBAAYC,KAAKC,WAAWD,CAAX,EAAcD,KAAd,CAAjB,CAAhD;;AAEO,IAAMG,sCAAe,CAAIC,EAAJ,EAAkCJ,QAAiB,CAAnD,EAAsD,GAAGK,IAAzD,KAA4E;AACtG,MAAMC,WAAWV,OAAO,WAAP,CAAjB;AACA,MAAMW,WAAW,MAAM;AACrB,QAAIV,YAAYW,GAAZ,CAAgBF,QAAhB,CAAJ,EAA+B;AAC7BT,kBAAYY,MAAZ,CAAmBH,QAAnB;AACA,aAAOF,GAAG,GAAGC,IAAN,CAAP;AACD,KAHD,MAGO,OAAO,KAAP;AACR,GALD;AAMA,MAAMK,UAAUX,MAAMC,KAAN,EAAaW,IAAb,CAAkBJ,QAAlB,CAAhB;AACAG,UAAQf,WAAR,IAAuBW,QAAvB;AACA,SAAOI,OAAP;AACD,CAXM;;AAaPP,aAAaS,MAAb,GAAsBF,WAAW;AAC/B,MAAI,CAACA,OAAD,IAAY,CAACA,QAAQf,WAAR,CAAjB,EAAuC,OAAO,KAAP;AACvC,MAAMkB,QAAQH,QAAQf,WAAR,CAAd;AACA,SAAOE,YAAYW,GAAZ,CAAgBK,KAAhB,IACHhB,YAAYY,MAAZ,CAAmBI,KAAnB,CADG,GAEH,KAFJ;AAGD,CAND;;AAQO,IAAMC,gCAAY,CAAIV,EAAJ,EAAkC,GAAGC,IAArC,KACvB,mBACGU,OADH,GAEGJ,IAFH,CAEQ,MAAMP,GAAG,GAAGC,IAAN,CAFd,CADK;;AAMA,IAAMW,oCACX,CAAIZ,EAAJ,EAAkCJ,QAAiB,CAAnD,EAAsD,GAAGK,IAAzD,KACEN,MAAMC,KAAN,EACGW,IADH,CACQ,MAAMP,GAAG,GAAGC,IAAN,CADd,CAFG;;AAKPF,aAAaW,SAAb,GAAyBA,SAAzB;AACAX,aAAaO,OAAb,GAAuBM,WAAvB;;kBAEeb,Y","file":"smart-timeout.js","sourcesContent":["//@flow\r\n\r\nimport Promise from 'bluebird'\r\n\r\nconst cancelToken = Symbol('cancel token')\r\n\r\nconst timeoutRefs = new WeakSet\r\n\r\nconst pause = (delay: number): Promise<void> => new Promise(r => setTimeout(r, delay))\r\n\r\nexport const smartTimeout = <T>(fn: (...args: Array<*>) => T, delay?: number = 0, ...args: Array<*>) => {\r\n  const newToken = Symbol('cancel id')\r\n  const checkRun = () => {\r\n    if (timeoutRefs.has(newToken)) {\r\n      timeoutRefs.delete(newToken)\r\n      return fn(...args)\r\n    } else return false\r\n  }\r\n  const promise = pause(delay).then(checkRun)\r\n  promise[cancelToken] = newToken\r\n  return promise\r\n}\r\n\r\nsmartTimeout.cancel = promise => {\r\n  if (!promise || !promise[cancelToken]) return false\r\n  const token = promise[cancelToken]\r\n  return timeoutRefs.has(token)\r\n    ? timeoutRefs.delete(token)\r\n    : false\r\n}\r\n\r\nexport const immediate = <T>(fn: (...args: Array<*>) => T, ...args: Array<*>) =>\r\n  Promise\r\n    .resolve()\r\n    .then(() => fn(...args))\r\n\r\n\r\nexport const delayedCall =\r\n  <T>(fn: (...args: Array<*>) => T, delay?: number = 0, ...args: Array<*>) =>\r\n    pause(delay)\r\n      .then(() => fn(...args))\r\n\r\nsmartTimeout.immediate = immediate\r\nsmartTimeout.promise = delayedCall\r\n\r\nexport default smartTimeout"]}