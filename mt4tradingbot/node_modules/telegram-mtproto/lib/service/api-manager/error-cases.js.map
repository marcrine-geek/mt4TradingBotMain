{"version":3,"sources":["../../../src/service/api-manager/error-cases.js"],"names":["cachedExportPromise","protect","code","NaN","type","rawError","dcID","baseDcID","base","errR","patterns","noBaseAuth","noDcAuth","waitFail","_","matchProtect","matched","error","options","emit","rejectPromise","requestThunk","apiSavedNet","apiRecall","deferResolve","mtpInvokeApi","storage","invoke","throwNext","reject","remove","importAuth","id","bytes","noErrorBox","exportDeferred","dc_id","then","resolve","catch","promise","now","stopTime","waitTime","Math","min","def","switchErrors"],"mappings":"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","file":"error-cases.js","sourcesContent":["import isNil from 'ramda/src/isNil'\r\nimport propOr from 'ramda/src/propOr'\r\n\r\nimport blueDefer from '../../util/defer'\r\nimport Switch from '../../util/switch'\r\nimport { tsNow } from '../time-manager'\r\n\r\nconst cachedExportPromise = {}\r\n\r\nconst protect = (\r\n    { code = NaN, type = '' },\r\n    { rawError = null },\r\n    dcID,\r\n    baseDcID\r\n  ) => ({\r\n    base: baseDcID,\r\n    errR: rawError,\r\n    code,\r\n    type,\r\n    dcID\r\n  })\r\n\r\nconst patterns = {\r\n  noBaseAuth: ({ code, dcID, base })  =>  code === 401 && dcID === base,\r\n  noDcAuth  : ({ code, dcID, base })  =>  code === 401 && dcID !== base,\r\n  waitFail  : ({ code, type, errR })  =>  !errR && (code === 500 || type === 'MSG_WAIT_FAILED'),\r\n  _         : ()                      =>  true\r\n}\r\n\r\n\r\nconst matchProtect =\r\n  matched => (\r\n      error,\r\n      options,\r\n      dcID,\r\n      emit,\r\n      rejectPromise,\r\n      requestThunk,\r\n      apiSavedNet,\r\n      apiRecall,\r\n      deferResolve,\r\n      mtpInvokeApi,\r\n      storage\r\n    ) =>\r\n      matched({\r\n        invoke   : mtpInvokeApi,\r\n        throwNext: () => rejectPromise(error),\r\n        reject   : rejectPromise,\r\n        options,\r\n        dcID,\r\n        emit,\r\n        requestThunk,\r\n        apiRecall,\r\n        deferResolve,\r\n        apiSavedNet,\r\n        storage\r\n      })\r\n\r\n\r\nconst noBaseAuth = ({ emit, throwNext, storage }) => {\r\n  storage.remove('dc', 'user_auth')\r\n  emit('error.401.base')\r\n  throwNext()\r\n}\r\n\r\nconst noDcAuth = ({ dcID, reject, apiSavedNet, apiRecall, deferResolve, invoke }) => {\r\n  const importAuth = ({ id, bytes }) => invoke(\r\n    'auth.importAuthorization',\r\n    { id, bytes },\r\n    { dcID, noErrorBox: true })\r\n\r\n\r\n  if (isNil(cachedExportPromise[dcID])) {\r\n    const exportDeferred = blueDefer()\r\n\r\n    invoke(\r\n      'auth.exportAuthorization',\r\n      { dc_id: dcID },\r\n      { noErrorBox: true })\r\n\r\n      .then(importAuth)\r\n      .then(exportDeferred.resolve)\r\n      .catch(exportDeferred.reject)\r\n\r\n    cachedExportPromise[dcID] = exportDeferred.promise\r\n  }\r\n\r\n\r\n\r\n  cachedExportPromise[dcID] //TODO not returning promise\r\n    .then(apiSavedNet)\r\n    .then(apiRecall)\r\n    .then(deferResolve)\r\n    .catch(reject)\r\n}\r\n/*\r\nconst migrate = ({ error, dcID, options, reject,\r\n    apiRecall, deferResolve, getNet, storage\r\n  }) => {\r\n  const newDcID = error.type.match(/^(PHONE_MIGRATE_|NETWORK_MIGRATE_|USER_MIGRATE_)(\\d+)/)[2]\r\n  if (newDcID === dcID) return\r\n  if (options.dcID)\r\n    options.dcID = newDcID\r\n  else\r\n    storage.set('dc', newDcID)\r\n\r\n  getNet(newDcID, options)\r\n    .then(apiRecall)\r\n    .then(deferResolve)\r\n    .catch(reject)\r\n}*/\r\n\r\n/*const floodWait = ({ error, options, throwNext, requestThunk }) => {\r\n  const waitTime = error.type.match(/^FLOOD_WAIT_(\\d+)/)[1] || 10\r\n  if (waitTime > (options.timeout || 60))\r\n    return throwNext()\r\n  requestThunk(waitTime)\r\n}*/\r\n\r\nconst waitFail = ({ options, throwNext, requestThunk }) => {\r\n  const now = tsNow()\r\n  if (options.stopTime) {\r\n    if (now >= options.stopTime)\r\n      return throwNext()\r\n  } else\r\n    options.stopTime = now + propOr(10, 'timeout', options) * 1000\r\n  options.waitTime = options.waitTime\r\n    ? Math.min(60, options.waitTime * 1.5)\r\n    : 1\r\n  requestThunk(options.waitTime)\r\n}\r\n\r\nconst def = ({ throwNext }) => throwNext()\r\n\r\n\r\nexport const switchErrors = Switch(patterns, protect)({\r\n  noBaseAuth,\r\n  noDcAuth,\r\n  waitFail,\r\n  _: def\r\n}, matchProtect)"]}