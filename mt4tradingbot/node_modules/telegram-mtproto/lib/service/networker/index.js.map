{"version":3,"sources":["../../../src/service/networker/index.js"],"names":["log","updatesProcessor","iii","akStopped","xhrSendBuffer","window","storeIntString","writer","value","field","bytes","int","Error","NetworkerThread","constructor","appConfig","chooseServer","Serialization","Deserialization","storage","emit","dc","authKey","serverSalt","options","dcID","authKeyUint8","authKeyBuffer","authKeyID","slice","wrapApiCall","bind","upload","fileUpload","fileDownload","updateSession","setInterval","checkLongPoll","seqNo","prevSessionID","sessionID","Array","updateSentMessage","sentMessageID","state","hasSent","sentMessage","getSent","newInner","inner","innerID","innerSentMessage","push","msg_id","deleteSent","newId","seq_no","generateSeqNo","notContentRelated","container","addSent","wrapMtpCall","method","params","serializer","mtproto","storeMethod","message","getBytes","pushMessage","deferred","promise","wrapMtpMessage","object","storeObject","verifyInnerMessages","msg_ids","serialBox","connectionInited","mapper","afterMessageID","long","resultType","isAPI","copyOptions","setPending","noShedule","sheduleRequest","Object","messageID","pushResend","delay","msg","getMsgKeyIv","msgKey","isOut","x","sha1aText","Uint8Array","sha1bText","sha1cText","sha1dText","promises","set","subarray","sha1Hash","result","all","aesKey","aesIv","sha1a","sha1b","sha1c","sha1d","toggleOffline","enabled","offline","undefined","cancel","nextReqPromise","nextReq","checkConnectionPeriod","checkConnectionPromise","checkConnection","parseInt","Math","min","onOnlineCb","longPollPending","then","performResend","hasResends","resendMsgIDs","getResends","resendOpts","_","lastResendReq","req_msg_id","resend_msg_ids","parseResponse","responseBuffer","deserializerRaw","fetchIntBytes","encryptedData","fetchRawBytes","byteLength","getOffset","keyIv","dataWithPadding","aesDecrypt","deserializer","typeBuffer","isInvalidSession","console","warn","fetchInt","offset","totalLength","messageBodyLength","messageBody","paddingLength","hashData","dataHash","buffer","deserializerOptions","getDeserializeOpts","getMsgById","deserializerData","response","fetchObject","applyServerSalt","newServerSalt","performSheduledRequest","ackMessage","msgID","pendingAcks","reqResendMessage","addResend","cleanupSent","notEmpty","sentIterator","complete","hasPending","processError","rawError","matches","error_message","match","error_code","code","type","description","originalError","processMessage","msgidInt","toString","substr","messages","bad_msg_id","bad_msg_seqno","new_server_salt","badMessage","lastServerMessages","indexOf","length","shift","body","processMessageAck","first_msg_id","server_salt","onBaseDc","baseDcID","updateCond","get","forEach","answer_msg_id","spliceCond","badMsgID","deleteResent","error","reject","resolve","checkLongPollCond","checkLongPollAfterDcCond","isClean","baseDc","sleepAfter","sendLongPoll","maxWait","max_delay","wait_after","max_wait","noResponse","longPoll","event","pingID","ping_id","pingMessage","succ","sendEncryptedRequest","timeout","err","ackMsgIDs","ack","messagesByteLen","currentTime","hasApiCall","hasHttpWait","lengthOverflow","singlesCount","pendingIterator","deletePending","messageByteLength","size","cond1","cond2","singleInRequest","noResponseMsgs","startMaxLength","contBox","innerMessages","i","intBytes","data","max","sqrt","dataBox","url","getBuffer","bytesHash","encryptedBytes","aesEncrypt","request","requestBox","requestData","getArray","responseType","post","acked","NetworkerFabric","msgGetter","override","mt_message","seqno","e","stack","mt_rpc_result","startAll","stopAll","setUpdatesProcessor","callback","Set"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\r\n\r\nimport Promise from 'bluebird'\r\nimport isNode from 'detect-node'\r\n\r\nimport is from 'ramda/src/is'\r\nimport contains from 'ramda/src/contains'\r\nimport mapObjIndexed from 'ramda/src/mapObjIndexed'\r\n\r\nimport CryptoWorker from '../../crypto'\r\nimport { dTime, tsNow, generateID, applyServerTime } from '../time-manager'\r\nimport random from '../secure-random'\r\nimport { NetMessage, NetContainer } from './net-message'\r\nimport State from './state'\r\nimport smartTimeout, { immediate } from '../../util/smart-timeout'\r\nimport { httpClient } from '../../http'\r\n\r\nimport { ErrorBadRequest, ErrorBadResponse } from '../../error'\r\n\r\nimport Logger from '../../util/log'\r\n\r\nconst log = Logger`networker`\r\n\r\nimport { convertToUint8Array, convertToArrayBuffer, sha1BytesSync,\r\n  nextRandomInt, bytesCmp, bytesToHex, bytesFromArrayBuffer,\r\n  bytesToArrayBuffer, longToBytes, uintToInt, rshift32 } from '../../bin'\r\n\r\nimport type { TLFabric, SerializationFabric, DeserializationFabric } from '../../tl'\r\nimport { WriteMediator, ReadMediator, TypeWriter } from '../../tl'\r\nimport type { Emit } from '../main/index.h'\r\n\r\nlet updatesProcessor\r\nlet iii = 0\r\nlet akStopped = false\r\n\r\n//eslint-disable-next-line\r\nconst xhrSendBuffer = !isNode && !('ArrayBufferView' in window)\r\n\r\ntype NetOptions = {\r\n  fileUpload?: boolean,\r\n  fileDownload?: boolean,\r\n  notContentRelated?: boolean,\r\n  afterMessageID?: string,\r\n  resultType?: any\r\n}\r\ntype Bytes = number[]\r\n\r\ntype ContextConfig = {\r\n  Serialization: SerializationFabric,\r\n  Deserialization: DeserializationFabric,\r\n  emit: Emit\r\n}\r\n\r\nconst storeIntString = (writer: TypeWriter) => (value: number | string, field: string) => {\r\n  switch (typeof value) {\r\n    case 'string': return WriteMediator.bytes(writer, value, `${field}:string`)\r\n    case 'number': return WriteMediator.int(writer, value, field)\r\n    default: throw new Error(`tl storeIntString field ${field} value type ${typeof value}`)\r\n  }\r\n}\r\n\r\nexport class NetworkerThread {\r\n  dcID: number\r\n  authKey: string\r\n  authKeyUint8: Uint8Array\r\n  authKeyBuffer: ArrayBuffer\r\n  serverSalt: string\r\n  iii: number\r\n  authKeyID: Bytes\r\n  upload: boolean\r\n  pendingAcks: number[] = []\r\n  seqNo: number\r\n  sessionID: Bytes\r\n  prevSessionID: Bytes\r\n  state = new State\r\n  connectionInited = false\r\n  checkConnectionPeriod = 0\r\n  checkConnectionPromise: Promise<*>\r\n  Serialization: SerializationFabric\r\n  Deserialization: DeserializationFabric\r\n  emit: Emit\r\n  lastServerMessages: string[] = []\r\n  constructor(\r\n    {\r\n      appConfig,\r\n      chooseServer,\r\n      Serialization,\r\n      Deserialization,\r\n      storage,\r\n      emit\r\n    }: ContextConfig,\r\n    dc: number,\r\n    authKey: string,\r\n    serverSalt: string,\r\n    options: NetOptions) {\r\n    this.appConfig = appConfig\r\n    this.chooseServer = chooseServer\r\n    this.Serialization = Serialization\r\n    this.Deserialization = Deserialization\r\n    this.storage = storage\r\n    this.emit = emit\r\n    this.dcID = dc\r\n    this.iii = iii++\r\n\r\n    this.authKey = authKey\r\n    this.authKeyUint8 = convertToUint8Array(authKey)\r\n    this.authKeyBuffer = convertToArrayBuffer(authKey)\r\n    this.authKeyID = sha1BytesSync(authKey).slice(-8)\r\n\r\n    //$FlowIssue\r\n    this.wrapApiCall = this.wrapApiCall.bind(this)\r\n\r\n    this.serverSalt = serverSalt\r\n\r\n    this.upload = options.fileUpload || options.fileDownload || false\r\n\r\n    this.updateSession()\r\n\r\n    setInterval(this.checkLongPoll, 10000) //NOTE make configurable interval\r\n    this.checkLongPoll()\r\n  }\r\n  updateSession() {\r\n    this.seqNo = 0\r\n    this.prevSessionID = this.sessionID\r\n    this.sessionID = new Array(8)\r\n    random(this.sessionID)\r\n  }\r\n\r\n  updateSentMessage(sentMessageID: string) {\r\n    if (!this.state.hasSent(sentMessageID)) return false\r\n    const sentMessage = this.state.getSent(sentMessageID)\r\n\r\n    if (sentMessage instanceof NetContainer) {\r\n      const newInner = []\r\n      for (const innerID of sentMessage.inner) {\r\n        const innerSentMessage = this.updateSentMessage(innerID)\r\n        if (innerSentMessage)\r\n          newInner.push(innerSentMessage.msg_id)\r\n      }\r\n      sentMessage.inner = newInner\r\n    }\r\n    this.state.deleteSent(sentMessage)\r\n    const newId = generateID()\r\n    sentMessage.msg_id = newId\r\n    sentMessage.seq_no = this.generateSeqNo(\r\n      sentMessage.notContentRelated ||\r\n      sentMessage.container\r\n    )\r\n    this.state.addSent(sentMessage)\r\n\r\n    return sentMessage\r\n  }\r\n\r\n  generateSeqNo(notContentRelated?: boolean) {\r\n    let seqNo = this.seqNo * 2\r\n\r\n    if (!notContentRelated) {\r\n      seqNo++\r\n      this.seqNo++\r\n    }\r\n\r\n    return seqNo\r\n  }\r\n\r\n  wrapMtpCall(method: string, params: Object, options: NetOptions) {\r\n    const serializer = this.Serialization({ mtproto: true })\r\n\r\n    serializer.storeMethod(method, params)\r\n\r\n    const seqNo = this.generateSeqNo()\r\n    const message = new NetMessage(\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    log([`MT call`])(method, params, message.msg_id, seqNo)\r\n\r\n    this.pushMessage(message, options)\r\n    return message.deferred.promise\r\n  }\r\n\r\n  wrapMtpMessage(object: Object, options: NetOptions = {}) {\r\n\r\n    const serializer = this.Serialization({ mtproto: true })\r\n    serializer.storeObject(object, 'Object')\r\n\r\n    const seqNo = this.generateSeqNo(options.notContentRelated)\r\n    const message = new NetMessage(\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    log(`MT message`)(message.msg_id, object, seqNo)\r\n    verifyInnerMessages(object.msg_ids)\r\n    this.pushMessage(message, options)\r\n    return message\r\n  }\r\n\r\n  wrapApiCall(method: string, params: Object, options: NetOptions) {\r\n    const serializer = this.Serialization(options)\r\n    const serialBox = serializer.writer\r\n    if (!this.connectionInited) {\r\n      // serializer.storeInt(0xda9b0d0d, 'invokeWithLayer')\r\n      // serializer.storeInt(Config.Schema.API.layer, 'layer')\r\n      // serializer.storeInt(0x69796de9, 'initConnection')\r\n      // serializer.storeInt(Config.App.id, 'api_id')\r\n      // serializer.storeString(navigator.userAgent || 'Unknown UserAgent', 'device_model')\r\n      // serializer.storeString(navigator.platform || 'Unknown Platform', 'system_version')\r\n      // serializer.storeString(Config.App.version, 'app_version')\r\n      // serializer.storeString(navigator.language || 'en', 'lang_code')\r\n      const mapper = storeIntString(serialBox)\r\n      mapObjIndexed(mapper, this.appConfig)\r\n    }\r\n\r\n    if (options.afterMessageID) {\r\n      WriteMediator.int(serialBox, 0xcb9f372d, 'invokeAfterMsg')\r\n      WriteMediator.long(serialBox, options.afterMessageID, 'msg_id')\r\n    }\r\n\r\n    options.resultType = serializer.storeMethod(method, params)\r\n\r\n    const seqNo = this.generateSeqNo()\r\n    const message = new NetMessage(\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    message.isAPI = true\r\n\r\n    log([`Api call`])(method, params, message.msg_id, seqNo, options)\r\n\r\n    this.pushMessage(message, options)\r\n    return message.deferred.promise\r\n  }\r\n\r\n  checkLongPollCond = () =>\r\n    this.longPollPending &&\r\n      this.longPollPending > tsNow() ||\r\n    !!this.offline ||\r\n    akStopped\r\n\r\n  checkLongPollAfterDcCond = (isClean: boolean, baseDc: number) => isClean && (\r\n    this.dcID !== baseDc ||\r\n    this.upload ||\r\n    this.sleepAfter &&\r\n      this.sleepAfter < tsNow()\r\n  )\r\n\r\n  checkLongPoll = async () => {\r\n    const isClean = this.cleanupSent()\r\n    // console.log('Check lp', this.longPollPending, tsNow(), this.dcID, isClean)\r\n    if (this.checkLongPollCond())\r\n      return false\r\n\r\n    const baseDc: number = await this.storage.get('dc')\r\n    if (this.checkLongPollAfterDcCond(isClean, baseDc))\r\n      // console.warn(dTime(), 'Send long-poll for DC is delayed', this.dcID, this.sleepAfter)\r\n      return\r\n    return this.sendLongPoll()\r\n  }\r\n\r\n  sendLongPoll: () => Promise<boolean | void> = async () => {\r\n    const maxWait = 25000\r\n    this.longPollPending = tsNow() + maxWait\r\n    // console.log('Set lp', this.longPollPending, tsNow())\r\n\r\n    await this.wrapMtpCall('http_wait', {\r\n      max_delay : 500,\r\n      wait_after: 150,\r\n      max_wait  : maxWait\r\n    }, {\r\n      noResponse: true,\r\n      longPoll  : true\r\n    })\r\n    delete this.longPollPending\r\n    return this.checkLongPoll()\r\n  }\r\n\r\n  pushMessage(message: NetMessage, options: NetOptions = {}) {\r\n    message.copyOptions(options)\r\n    this.state.addSent(message)\r\n    this.state.setPending(message.msg_id)\r\n\r\n    if (!options || !options.noShedule)\r\n      this.sheduleRequest()\r\n    if (is(Object, options))\r\n      options.messageID = message.msg_id\r\n  }\r\n\r\n  pushResend(messageID: string, delay?: number) {\r\n    const value = delay\r\n      ? tsNow() + delay\r\n      : 0\r\n    const sentMessage = this.state.getSent(messageID)\r\n    if (sentMessage instanceof NetContainer)\r\n      for (const msg of sentMessage.inner)\r\n        this.state.setPending(msg, value)\r\n    else\r\n      this.state.setPending(messageID, value)\r\n\r\n    this.sheduleRequest(delay)\r\n  }\r\n\r\n  async getMsgKeyIv(msgKey: number[], isOut: boolean) {\r\n    const authKey = this.authKeyUint8\r\n    const x = isOut\r\n      ? 0\r\n      : 8\r\n    const sha1aText = new Uint8Array(48)\r\n    const sha1bText = new Uint8Array(48)\r\n    const sha1cText = new Uint8Array(48)\r\n    const sha1dText = new Uint8Array(48)\r\n    const promises = []\r\n\r\n    sha1aText.set(msgKey, 0)\r\n    sha1aText.set(authKey.subarray(x, x + 32), 16)\r\n    promises.push(CryptoWorker.sha1Hash(sha1aText))\r\n\r\n    sha1bText.set(authKey.subarray(x + 32, x + 48), 0)\r\n    sha1bText.set(msgKey, 16)\r\n    sha1bText.set(authKey.subarray(x + 48, x + 64), 32)\r\n    promises.push(CryptoWorker.sha1Hash(sha1bText))\r\n\r\n    sha1cText.set(authKey.subarray(x + 64, x + 96), 0)\r\n    sha1cText.set(msgKey, 32)\r\n    promises.push(CryptoWorker.sha1Hash(sha1cText))\r\n\r\n    sha1dText.set(msgKey, 0)\r\n    sha1dText.set(authKey.subarray(x + 96, x + 128), 16)\r\n    promises.push(CryptoWorker.sha1Hash(sha1dText))\r\n\r\n    const result = await Promise.all(promises)\r\n    const aesKey = new Uint8Array(32),\r\n          aesIv = new Uint8Array(32),\r\n          sha1a = new Uint8Array(result[0]),\r\n          sha1b = new Uint8Array(result[1]),\r\n          sha1c = new Uint8Array(result[2]),\r\n          sha1d = new Uint8Array(result[3])\r\n\r\n    aesKey.set(sha1a.subarray(0, 8))\r\n    aesKey.set(sha1b.subarray(8, 20), 8)\r\n    aesKey.set(sha1c.subarray(4, 16), 20)\r\n\r\n    aesIv.set(sha1a.subarray(8, 20))\r\n    aesIv.set(sha1b.subarray(0, 8), 12)\r\n    aesIv.set(sha1c.subarray(16, 20), 20)\r\n    aesIv.set(sha1d.subarray(0, 8), 24)\r\n\r\n    return [aesKey, aesIv]\r\n  }\r\n\r\n  checkConnection = async event => {\r\n    log([`Check connection`])('%O', event)\r\n    smartTimeout.cancel(this.checkConnectionPromise)\r\n\r\n    const serializer = this.Serialization({ mtproto: true })\r\n    const pingID = [nextRandomInt(0xFFFFFFFF), nextRandomInt(0xFFFFFFFF)]\r\n\r\n    serializer.storeMethod('ping', { ping_id: pingID })\r\n\r\n    const pingMessage = new NetMessage(\r\n      this.generateSeqNo(true),\r\n      serializer.getBytes()\r\n    )\r\n\r\n    let succ = false\r\n\r\n    try {\r\n      const result = await this.sendEncryptedRequest(pingMessage, { timeout: 15000 })\r\n      succ = true\r\n      this.toggleOffline(false)\r\n      log(`checkConnection, result`)('%O', result)\r\n    } catch (err) {\r\n      log(`encrypted request fail`)('%O', err)\r\n    }\r\n    if (succ) return\r\n    const delay = this.checkConnectionPeriod * 1e3\r\n    log(`checkConnection, Delay`)(delay)\r\n    this.checkConnectionPromise = smartTimeout(\r\n          this.checkConnection, delay)\r\n    this.checkConnectionPeriod = Math.min(60, this.checkConnectionPeriod * 1.5)\r\n  }\r\n\r\n  toggleOffline(enabled) {\r\n    // console.log('toggle ', enabled, this.dcID, this.iii)\r\n    if (!this.offline !== undefined && this.offline == enabled)\r\n      return false\r\n\r\n    this.offline = enabled\r\n\r\n    if (this.offline) {\r\n      smartTimeout.cancel(this.nextReqPromise)\r\n      delete this.nextReq\r\n\r\n      if (this.checkConnectionPeriod < 1.5)\r\n        this.checkConnectionPeriod = 0\r\n\r\n\r\n      this.checkConnectionPromise = smartTimeout(\r\n        this.checkConnection, parseInt(this.checkConnectionPeriod * 1000))\r\n      this.checkConnectionPeriod = Math.min(30, (1 + this.checkConnectionPeriod) * 1.5)\r\n\r\n      this.onOnlineCb = this.checkConnection\r\n      this.emit('net.offline', this.onOnlineCb)\r\n    } else {\r\n      delete this.longPollPending\r\n      //NOTE check long state was here\r\n      this.checkLongPoll().then(() => {})\r\n      this.sheduleRequest()\r\n\r\n      if (this.onOnlineCb)\r\n        this.emit('net.online', this.onOnlineCb)\r\n\r\n      smartTimeout.cancel(this.checkConnectionPromise)\r\n\r\n    }\r\n  }\r\n  performResend() {\r\n    if (this.state.hasResends()) {\r\n      const resendMsgIDs = [...this.state.getResends()]\r\n      const resendOpts = { noShedule: true, notContentRelated: true }\r\n      // console.log('resendReq messages', resendMsgIDs)\r\n      const msg = this.wrapMtpMessage({\r\n        _      : 'msg_resend_req',\r\n        msg_ids: resendMsgIDs\r\n      }, resendOpts)\r\n      this.lastResendReq = { req_msg_id: msg.msg_id, resend_msg_ids: resendMsgIDs }\r\n    }\r\n  }\r\n  performSheduledRequest = async () => { //TODO extract huge method\r\n    // console.log(dTime(), 'sheduled', this.dcID, this.iii)\r\n    if (this.offline || akStopped) {\r\n      log(`Cancel sheduled`)(``)\r\n      return false\r\n    }\r\n    delete this.nextReq\r\n    if (this.pendingAcks.length) {\r\n      const ackMsgIDs = []\r\n      for (const ack of this.pendingAcks)\r\n        ackMsgIDs.push(ack)\r\n      // console.log('acking messages', ackMsgIDs)\r\n      this.wrapMtpMessage({\r\n        _      : 'msgs_ack',\r\n        msg_ids: ackMsgIDs\r\n      }, {\r\n        notContentRelated: true,\r\n        noShedule        : true\r\n      })\r\n      // const res = await msg.deferred.promise\r\n      // log(`AWAITED`, `ack`)(res)\r\n    }\r\n\r\n    this.performResend()\r\n\r\n    const messages = []\r\n    let message: NetMessage\r\n    let messagesByteLen = 0\r\n    const currentTime = tsNow()\r\n    let hasApiCall = false\r\n    let hasHttpWait = false\r\n    let lengthOverflow = false\r\n    let singlesCount = 0\r\n\r\n    for (const [messageID, value] of this.state.pendingIterator()) {\r\n      if (value && value < currentTime) continue\r\n      this.state.deletePending(messageID)\r\n      if (!this.state.hasSent(messageID)) continue\r\n      message = this.state.getSent(messageID)\r\n      const messageByteLength = message.size() + 32\r\n      const cond1 = !message.notContentRelated && lengthOverflow\r\n      const cond2 =\r\n        !message.notContentRelated &&\r\n        messagesByteLen &&\r\n        //eslint-disable-next-line\r\n        messagesByteLen + messageByteLength > 655360; // 640 Kb\r\n      if (cond1) continue\r\n      if (cond2) {\r\n        lengthOverflow = true\r\n        continue\r\n      }\r\n      if (message.singleInRequest) {\r\n        singlesCount++\r\n        if (singlesCount > 1) continue\r\n      }\r\n      messages.push(message)\r\n      messagesByteLen += messageByteLength\r\n      if (message.isAPI)\r\n        hasApiCall = true\r\n      else if (message.longPoll)\r\n        hasHttpWait = true\r\n    }\r\n\r\n    if (hasApiCall && !hasHttpWait) {\r\n      const serializer = this.Serialization({ mtproto: true })\r\n      serializer.storeMethod('http_wait', {\r\n        max_delay : 500,\r\n        wait_after: 150,\r\n        max_wait  : 3000\r\n      })\r\n      messages.push(new NetMessage(\r\n        this.generateSeqNo(),\r\n        serializer.getBytes()\r\n      ))\r\n    }\r\n\r\n    if (!messages.length) {\r\n      // console.log('no sheduled messages')\r\n      return\r\n    }\r\n\r\n    const noResponseMsgs = []\r\n\r\n    if (messages.length > 1) {\r\n      const container = this.Serialization({ mtproto: true, startMaxLength: messagesByteLen + 64 })\r\n      const contBox = container.writer\r\n      WriteMediator.int(contBox, 0x73f1f8dc, 'CONTAINER[id]')\r\n      WriteMediator.int(contBox, messages.length, 'CONTAINER[count]')\r\n      const innerMessages = []\r\n      let i = 0\r\n      for (const msg of messages) {\r\n        WriteMediator.long(contBox, msg.msg_id, `CONTAINER[${i}][msg_id]`)\r\n        innerMessages.push(msg.msg_id)\r\n        WriteMediator.int(contBox, msg.seq_no, `CONTAINER[${i}][seq_no]`)\r\n        WriteMediator.int(contBox, msg.body.length, `CONTAINER[${i}][bytes]`)\r\n        WriteMediator.intBytes(contBox, msg.body, false, `CONTAINER[${i}][body]`)\r\n        if (msg.noResponse)\r\n          noResponseMsgs.push(msg.msg_id)\r\n        i++\r\n      }\r\n\r\n      message = new NetContainer(\r\n        this.generateSeqNo(true),\r\n        container.getBytes(true),\r\n        innerMessages)\r\n\r\n      log(`Container`)(innerMessages, message.msg_id, message.seq_no)\r\n    } else {\r\n      if (message.noResponse)\r\n        noResponseMsgs.push(message.msg_id)\r\n    }\r\n\r\n    this.state.addSent(message)\r\n\r\n    this.pendingAcks = [] //TODO WTF,he just clear and forget them at all?!?\r\n    if (lengthOverflow || singlesCount > 1) this.sheduleRequest()\r\n\r\n    try {\r\n      const result = await this.sendEncryptedRequest(message)\r\n      this.toggleOffline(false)\r\n      const response = await this.parseResponse(result.data)\r\n      log(`Server response`)(this.dcID, response)\r\n\r\n      this.processMessage(\r\n        response.response,\r\n        response.messageID,\r\n        response.sessionID)\r\n\r\n      for (const msgID of noResponseMsgs)\r\n        if (this.state.hasSent(msgID)) {\r\n          const msg = this.state.getSent(msgID)\r\n          this.state.deleteSent(msg)\r\n          msg.deferred.resolve()\r\n        }\r\n\r\n      this.checkConnectionPeriod = Math.max(1.1, Math.sqrt(this.checkConnectionPeriod))\r\n\r\n      return this.checkLongPoll() //TODO Bluebird warning here\r\n    } catch (error) {\r\n      console.log('Encrypted request failed', error)\r\n\r\n      if (message instanceof NetContainer) {\r\n        for (const msgID of message.inner)\r\n          this.state.setPending(msgID)\r\n        this.state.deleteSent(message)\r\n      } else\r\n        this.state.setPending(message.msg_id)\r\n\r\n\r\n      for (const msgID of noResponseMsgs)\r\n        if (this.state.hasSent(msgID)) {\r\n          const msg = this.state.getSent(msgID)\r\n          this.state.deleteSent(msg)\r\n          this.state.deletePending(msgID)\r\n          msg.deferred.reject()\r\n        }\r\n\r\n      this.toggleOffline(true)\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n\r\n  sendEncryptedRequest = async (message: NetMessage, options = {}) => {\r\n    // console.log(dTime(), 'Send encrypted'/*, message*/)\r\n    // console.trace()\r\n    const data = this.Serialization({ startMaxLength: message.body.length + 64 })\r\n    const dataBox = data.writer\r\n    WriteMediator.intBytes(dataBox, this.serverSalt, 64, 'salt')\r\n    WriteMediator.intBytes(dataBox, this.sessionID, 64, 'session_id')\r\n    WriteMediator.long(dataBox, message.msg_id, 'message_id')\r\n    WriteMediator.int(dataBox, message.seq_no, 'seq_no')\r\n\r\n    WriteMediator.int(dataBox, message.body.length, 'message_data_length')\r\n    WriteMediator.intBytes(dataBox, message.body, false, 'message_data')\r\n\r\n    const url = this.chooseServer(this.dcID, this.upload)\r\n\r\n    const bytes = dataBox.getBuffer()\r\n\r\n    const bytesHash = await CryptoWorker.sha1Hash(bytes)\r\n    const msgKey = new Uint8Array(bytesHash).subarray(4, 20)\r\n    const keyIv = await this.getMsgKeyIv(msgKey, true)\r\n    const encryptedBytes = await CryptoWorker.aesEncrypt(bytes, keyIv[0], keyIv[1])\r\n\r\n    const request = this.Serialization({ startMaxLength: encryptedBytes.byteLength + 256 })\r\n    const requestBox = request.writer\r\n    WriteMediator.intBytes(requestBox, this.authKeyID, 64, 'auth_key_id')\r\n    WriteMediator.intBytes(requestBox, msgKey, 128, 'msg_key')\r\n    WriteMediator.intBytes(requestBox, encryptedBytes, false, 'encrypted_data')\r\n\r\n    const requestData = xhrSendBuffer\r\n      ? requestBox.getArray().buffer\r\n      : requestBox.getArray()\r\n\r\n    options = { responseType: 'arraybuffer', ...options }\r\n\r\n    try {\r\n      const result = await httpClient.post(url, requestData, options)\r\n      return !result.data || !result.data.byteLength\r\n        ? Promise.reject(new ErrorBadResponse(url, result))\r\n        : result\r\n    } catch (error) {\r\n      return Promise.reject(new ErrorBadRequest(url, error))\r\n    }\r\n  }\r\n\r\n  getMsgById = ({ req_msg_id }) => this.state.getSent(req_msg_id)\r\n\r\n  async parseResponse(responseBuffer: Uint8Array) {\r\n    // console.log(dTime(), 'Start parsing response')\r\n    // const self = this\r\n\r\n    const deserializerRaw = this.Deserialization(responseBuffer)\r\n\r\n    const authKeyID = deserializerRaw.fetchIntBytes(64, 'auth_key_id')\r\n    if (!bytesCmp(authKeyID, this.authKeyID)) {\r\n      throw new Error(`[MT] Invalid server auth_key_id: ${  bytesToHex(authKeyID)}`)\r\n    }\r\n    const msgKey = deserializerRaw.fetchIntBytes(128, 'msg_key')\r\n    const encryptedData = deserializerRaw.fetchRawBytes(\r\n      responseBuffer.byteLength - deserializerRaw.getOffset(),\r\n      'encrypted_data')\r\n\r\n\r\n    const keyIv = await this.getMsgKeyIv(msgKey, false)\r\n    const dataWithPadding = await CryptoWorker.aesDecrypt(encryptedData, keyIv[0], keyIv[1])\r\n    // console.log(dTime(), 'after decrypt')\r\n    const deserializer = this.Deserialization(dataWithPadding, { mtproto: true })\r\n\r\n    deserializer.fetchIntBytes(64, 'salt')\r\n    const sessionID = deserializer.fetchIntBytes(64, 'session_id')\r\n    const messageID = ReadMediator.long( deserializer.typeBuffer, 'message_id')\r\n\r\n    const isInvalidSession =\r\n      !bytesCmp(sessionID, this.sessionID) && (\r\n        !this.prevSessionID ||\r\n        //eslint-disable-next-line\r\n        !bytesCmp(sessionID, this.prevSessionID));\r\n    if (isInvalidSession) {\r\n      console.warn('Sessions', sessionID, this.sessionID, this.prevSessionID)\r\n      throw new Error(`[MT] Invalid server session_id: ${ bytesToHex(sessionID) }`)\r\n    }\r\n\r\n    const seqNo = deserializer.fetchInt('seq_no')\r\n\r\n    let offset = deserializer.getOffset()\r\n    const totalLength = dataWithPadding.byteLength\r\n\r\n    const messageBodyLength = deserializer.fetchInt('message_data[length]')\r\n    if (messageBodyLength % 4 ||\r\n        messageBodyLength > totalLength - offset) {\r\n      throw new Error(`[MT] Invalid body length: ${  messageBodyLength}`)\r\n    }\r\n    const messageBody = deserializer.fetchRawBytes(messageBodyLength, 'message_data')\r\n\r\n    offset = deserializer.getOffset()\r\n    const paddingLength = totalLength - offset\r\n    if (paddingLength < 0 || paddingLength > 15)\r\n      throw new Error(`[MT] Invalid padding length: ${  paddingLength}`)\r\n    const hashData = convertToUint8Array(dataWithPadding).subarray(0, offset)\r\n\r\n    const dataHash = await CryptoWorker.sha1Hash(hashData)\r\n\r\n    if (!bytesCmp(msgKey, bytesFromArrayBuffer(dataHash).slice(-16))) {\r\n      console.warn(msgKey, bytesFromArrayBuffer(dataHash))\r\n      throw new Error('[MT] server msgKey mismatch')\r\n    }\r\n\r\n    const buffer = bytesToArrayBuffer(messageBody)\r\n    const deserializerOptions = getDeserializeOpts(this.getMsgById)\r\n    const deserializerData = this.Deserialization(buffer, deserializerOptions)\r\n    const response = deserializerData.fetchObject('', 'INPUT')\r\n\r\n    return {\r\n      response,\r\n      messageID,\r\n      sessionID,\r\n      seqNo\r\n    }\r\n  }\r\n\r\n  applyServerSalt(newServerSalt) {\r\n    const serverSalt = longToBytes(newServerSalt)\r\n    this.storage.set(`dc${ this.dcID }_server_salt`, bytesToHex(serverSalt))\r\n\r\n    this.serverSalt = serverSalt\r\n    return true\r\n  }\r\n\r\n  sheduleRequest(delay: number = 0) {\r\n    if (this.offline) this.checkConnection('forced shedule')\r\n    const nextReq = tsNow() + delay\r\n\r\n    if (delay && this.nextReq && this.nextReq <= nextReq)\r\n      return false\r\n\r\n    // console.log(dTime(), 'shedule req', delay)\r\n    // console.trace()\r\n    smartTimeout.cancel(this.nextReqPromise)\r\n    if (delay > 0)\r\n      this.nextReqPromise = smartTimeout(\r\n        this.performSheduledRequest, delay)\r\n    else\r\n      immediate(this.performSheduledRequest)\r\n\r\n    this.nextReq = nextReq\r\n  }\r\n\r\n  ackMessage(msgID: string) {\r\n    /*console.trace(msgID)\r\n    if (this.pendingAcks.includes(msgID)) {\r\n      debugger\r\n    }*/\r\n    // console.log('ack message', msgID)\r\n    if (contains(msgID, this.pendingAcks)) return\r\n    this.pendingAcks.push(msgID)\r\n    this.sheduleRequest(30000)\r\n  }\r\n\r\n  reqResendMessage(msgID: string) {\r\n    log(`Req resend`)(msgID)\r\n    this.state.addResend(msgID)\r\n    this.sheduleRequest(100)\r\n  }\r\n\r\n  cleanupSent() {\r\n    let notEmpty = false\r\n    // console.log('clean start', this.dcID/*, this.state.sent*/)\r\n\r\n    for (const [msgID, message] of this.state.sentIterator()) {\r\n      let complete = true\r\n      if (message.notContentRelated && !this.state.hasPending(msgID))\r\n        // console.log('clean notContentRelated', msgID)\r\n        this.state.deleteSent(message)\r\n      else if (message instanceof NetContainer) {\r\n        for (const inner of message.inner) {\r\n          if (this.state.hasSent(inner)) {\r\n            // console.log('clean failed, found', msgID, message.inner[i],\r\n            // this.state.getSent(message.inner[i]).seq_no)\r\n            notEmpty = true\r\n            complete = false\r\n            break\r\n          }\r\n        }\r\n        // console.log('clean container', msgID)\r\n        if (complete)\r\n          this.state.deleteSent(message)\r\n      } else\r\n        notEmpty = true\r\n    }\r\n    return !notEmpty\r\n  }\r\n\r\n  processMessageAck = (messageID: string) => {\r\n    const sentMessage = this.state.getSent(messageID)\r\n    if (sentMessage && !sentMessage.acked) {\r\n      delete sentMessage.body\r\n      sentMessage.acked = true\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  processError(rawError) {\r\n    const matches = (rawError.error_message || '').match(/^([A-Z_0-9]+\\b)(: (.+))?/) || []\r\n    rawError.error_code = uintToInt(rawError.error_code)\r\n\r\n    return {\r\n      code: !rawError.error_code || rawError.error_code <= 0\r\n        ? 500\r\n        : rawError.error_code,\r\n      type         : matches[1] || 'UNKNOWN',\r\n      description  : matches[3] || `CODE#${  rawError.error_code  } ${  rawError.error_message}`,\r\n      originalError: rawError\r\n    }\r\n  }\r\n\r\n  processMessage(message, messageID, sessionID) {\r\n    const msgidInt = parseInt(messageID.toString(10).substr(0, -10), 10)\r\n    if (msgidInt % 2) {\r\n      console.warn('[MT] Server even message id: ', messageID, message)\r\n      return\r\n    }\r\n    // console.log('process message', message, messageID, sessionID)\r\n    switch (message._) {\r\n      case 'msg_container': {\r\n        for (const inner of message.messages)\r\n          this.processMessage(inner, inner.msg_id, sessionID)\r\n        break\r\n      }\r\n      case 'bad_server_salt': {\r\n        log(`Bad server salt`)(message)\r\n        const sentMessage = this.state.getSent(message.bad_msg_id)\r\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\r\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\r\n          throw new Error('[MT] Bad server salt for invalid message')\r\n        }\r\n\r\n        this.applyServerSalt(message.new_server_salt)\r\n        this.pushResend(message.bad_msg_id)\r\n        this.ackMessage(messageID)\r\n        break\r\n      }\r\n      case 'bad_msg_notification': {\r\n        log(`Bad msg notification`)(message)\r\n        const sentMessage = this.state.getSent(message.bad_msg_id)\r\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\r\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\r\n          throw new Error('[MT] Bad msg notification for invalid message')\r\n        }\r\n\r\n        if (message.error_code == 16 || message.error_code == 17) {\r\n          if (applyServerTime(\r\n              rshift32(messageID)\r\n            )) {\r\n            log(`Update session`)()\r\n            this.updateSession()\r\n          }\r\n          const badMessage = this.updateSentMessage(message.bad_msg_id)\r\n          this.pushResend(badMessage.msg_id)\r\n          this.ackMessage(messageID)\r\n        }\r\n        break\r\n      }\r\n      case 'message': {\r\n        if (this.lastServerMessages.indexOf(messageID) != -1) {\r\n          // console.warn('[MT] Server same messageID: ', messageID)\r\n          this.ackMessage(messageID)\r\n          return\r\n        }\r\n        this.lastServerMessages.push(messageID)\r\n        if (this.lastServerMessages.length > 100) {\r\n          this.lastServerMessages.shift()\r\n        }\r\n        this.processMessage(message.body, message.msg_id, sessionID)\r\n        break\r\n      }\r\n      case 'new_session_created': {\r\n        this.ackMessage(messageID)\r\n\r\n        this.processMessageAck(message.first_msg_id)\r\n        this.applyServerSalt(message.server_salt)\r\n\r\n        const onBaseDc = baseDcID => {\r\n          const updateCond =\r\n            baseDcID === this.dcID &&\r\n            !this.upload &&\r\n            updatesProcessor\r\n          if (updateCond)\r\n            updatesProcessor(message, true)\r\n        }\r\n        this.storage.get('dc').then(onBaseDc)\r\n        break\r\n      }\r\n      case 'msgs_ack': {\r\n        message.msg_ids.forEach(this.processMessageAck)\r\n        break\r\n      }\r\n      case 'msg_detailed_info': {\r\n        if (!this.state.hasSent(message.msg_id)) {\r\n          this.ackMessage(message.answer_msg_id)\r\n          break\r\n        }\r\n        break\r\n      }\r\n      case 'msg_new_detailed_info': {\r\n        // this.ackMessage(message.answer_msg_id)\r\n        this.reqResendMessage(message.answer_msg_id)\r\n        break\r\n      }\r\n      case 'msgs_state_info': {\r\n        this.ackMessage(message.answer_msg_id)\r\n        const spliceCond =\r\n          this.lastResendReq &&\r\n          //eslint-disable-next-line\r\n          this.lastResendReq.req_msg_id == message.req_msg_id;\r\n        if (spliceCond)\r\n          for (const badMsgID of this.lastResendReq.resend_msg_ids)\r\n            this.state.deleteResent(badMsgID)\r\n        break\r\n      }\r\n      case 'rpc_result': {\r\n        this.ackMessage(messageID)\r\n\r\n        const sentMessageID = message.req_msg_id\r\n        const sentMessage = this.state.getSent(sentMessageID)\r\n\r\n        this.processMessageAck(sentMessageID)\r\n        if (!sentMessage) break\r\n\r\n        const deferred = sentMessage.deferred\r\n        if (message.result._ == 'rpc_error') {\r\n          const error = this.processError(message.result)\r\n          log(`ERROR, Rpc error`)('%O', error)\r\n          if (deferred) {\r\n            deferred.reject(error)\r\n          }\r\n        } else {\r\n          if (deferred) {\r\n            log(`Rpc response`)('%O', message.result)\r\n            /*if (debug) {\r\n              console.log(dTime(), 'Rpc response', message.result)\r\n            } else {\r\n              let dRes = message.result._\r\n              if (!dRes)\r\n                dRes = message.result.length > 5\r\n                  ? `[..${  message.result.length  }..]`\r\n                  : message.result\r\n              console.log(dTime(), 'Rpc response', dRes)\r\n            }*/\r\n            sentMessage.deferred.resolve(message.result)\r\n          }\r\n          if (sentMessage.isAPI)\r\n            this.connectionInited = true\r\n        }\r\n        this.state.deleteSent(sentMessage)\r\n        break\r\n      }\r\n      default: {\r\n        this.ackMessage(messageID)\r\n\r\n        // console.log('Update', message)\r\n        if (updatesProcessor) updatesProcessor(message, true)\r\n        break\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport type Networker = NetworkerThread\r\n\r\nexport const NetworkerFabric = (\r\n  appConfig,\r\n  { Serialization, Deserialization }: TLFabric,\r\n  storage,\r\n  emit: Emit) => chooseServer =>\r\n    (dc: number,\r\n    authKey: string,\r\n    serverSalt: string,\r\n    options: NetOptions = {}) =>\r\n      new NetworkerThread({\r\n        appConfig,\r\n        chooseServer,\r\n        Serialization,\r\n        Deserialization,\r\n        storage,\r\n        emit\r\n      }, dc, authKey, serverSalt, options)\r\n\r\n\r\nconst getDeserializeOpts = msgGetter => ({\r\n  mtproto : true,\r\n  override: {\r\n    mt_message(result, field) {\r\n      result.msg_id = ReadMediator.long( this.typeBuffer, `${ field }[msg_id]`)\r\n      result.seqno = ReadMediator.int( this.typeBuffer, `${ field }[seqno]`)\r\n      result.bytes = ReadMediator.int( this.typeBuffer, `${ field }[bytes]`)\r\n\r\n      const offset = this.getOffset()\r\n\r\n      try {\r\n        result.body = this.fetchObject('Object', `${ field }[body]`)\r\n      } catch (e) {\r\n        console.error(dTime(), 'parse error', e.message, e.stack)\r\n        result.body = { _: 'parse_error', error: e }\r\n      }\r\n      if (this.typeBuffer.offset != offset + result.bytes) {\r\n        // console.warn(dTime(), 'set offset', this.offset, offset, result.bytes)\r\n        // console.log(dTime(), result)\r\n        this.typeBuffer.offset = offset + result.bytes\r\n      }\r\n      // console.log(dTime(), 'override message', result)\r\n    },\r\n    mt_rpc_result(result, field: string) {\r\n      result.req_msg_id = ReadMediator.long( this.typeBuffer, `${ field }[req_msg_id]`)\r\n\r\n      const sentMessage = msgGetter(result)\r\n      const type = sentMessage && sentMessage.resultType || 'Object'\r\n\r\n      if (result.req_msg_id && !sentMessage) {\r\n        // console.warn(dTime(), 'Result for unknown message', result)\r\n        return\r\n      }\r\n      result.result = this.fetchObject(type, `${ field }[result]`)\r\n      // console.log(dTime(), 'override rpc_result', sentMessage, type, result)\r\n    }\r\n  }\r\n})\r\n\r\nexport const startAll = () => {\r\n  if (akStopped) {\r\n    akStopped = false\r\n    updatesProcessor({ _: 'new_session_created' }, true)\r\n  }\r\n}\r\n\r\nexport const stopAll = () => akStopped = true\r\n\r\nexport const setUpdatesProcessor = callback =>\r\n  updatesProcessor = callback\r\n\r\nexport default NetworkerFabric\r\n\r\n\r\nconst verifyInnerMessages = (messages) => {\r\n  if (messages.length !== new Set(messages).size) {\r\n    console.log(`!!!!!!WARN!!!!!!`, 'container check failed', messages)\r\n    // throw new Error('Container bug')\r\n  }\r\n}"]}